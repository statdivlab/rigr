[{"path":[]},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement adwillis@uw.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://statdivlab.github.io/rigr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://statdivlab.github.io/rigr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 rigr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://statdivlab.github.io/rigr/articles/descrip_intro.html","id":"descriptive-statistics-with-descrip","dir":"Articles","previous_headings":"","what":"Descriptive statistics with descrip","title":"Descriptive statistics in rigr","text":"Throughout examples, ’ll use fev dataset. dataset included rigr package; see documentation running ?fev. First, can obtain default descriptive statistics dataset simply running descrip(). Since input dataframe, can see variables number elements given N column. None variables missing values, seen Msng column. Rather specifying whole dataframe, interested variables fev height, can input two vectors descrip() function, .","code":"## Preparing our R session library(rigr) ## rigr version 1.0.8: Regression, Inference, and General Data Analysis Tools in R data(fev) descrip(fev) ##           N     Msng  Mean      Std Dev    Min       25%       Mdn      ## seqnbr:     654     0   327.5     188.9     1.000     164.2     327.5   ## subjid:     654     0   37170     23691     201.0     15811     36071   ##    age:     654     0   9.931     2.954     3.000     8.000     10.00   ##    fev:     654     0   2.637     0.8671    0.7910    1.981     2.547   ## height:     654     0   61.14     5.704     46.00     57.00     61.50   ##    sex:     654     0   1.514     0.5002    1.000     1.000     2.000   ##  smoke:     654     0   1.099     0.2994    1.000     1.000     1.000   ##            75%       Max      ## seqnbr:     490.8     654.0   ## subjid:     53638     90001   ##    age:     12.00     19.00   ##    fev:     3.118     5.793   ## height:     65.50     74.00   ##    sex:     2.000     2.000   ##  smoke:     1.000     2.000 descrip(fev$fev, fev$height) ##               N     Msng  Mean      Std Dev    Min       25%       Mdn      ##    fev$fev:     654     0   2.637     0.8671    0.7910    1.981     2.547   ## fev$height:     654     0   61.14     5.704     46.00     57.00     61.50   ##                75%       Max      ##    fev$fev:     3.118     5.793   ## fev$height:     65.50     74.00"},{"path":"https://statdivlab.github.io/rigr/articles/descrip_intro.html","id":"descriptive-statistics-for-strata","dir":"Articles","previous_headings":"","what":"Descriptive statistics for strata","title":"Descriptive statistics in rigr","text":"Suppose wish obtain descriptive statistics fev height variables, stratified smoking status. , can use strata parameter descrip: output, can see overall descriptive statistics, well descriptive statistics stratum (smoke = 1, smoke = 2) returned table.","code":"descrip(fev$fev, fev$height, strata = fev$smoke) ##                         N     Msng  Mean      Std Dev    Min       25%      ##    fev$fev:  All          654     0   2.637     0.8671    0.7910    1.981   ##    fev$fev:    Str  no    589     0   2.566     0.8505    0.7910    1.920   ##    fev$fev:    Str  yes    65     0   3.277     0.7500    1.694     2.795   ## fev$height:  All          654     0   61.14     5.704     46.00     57.00   ## fev$height:    Str  no    589     0   60.61     5.672     46.00     57.00   ## fev$height:    Str  yes    65     0   65.95     3.193     58.00     63.50   ##                          Mdn       75%       Max      ##    fev$fev:  All          2.547     3.118     5.793   ##    fev$fev:    Str  no    2.465     3.048     5.793   ##    fev$fev:    Str  yes   3.169     3.751     4.872   ## fev$height:  All          61.50     65.50     74.00   ## fev$height:    Str  no    61.00     64.50     74.00   ## fev$height:    Str  yes   66.00     68.00     72.00"},{"path":"https://statdivlab.github.io/rigr/articles/descrip_intro.html","id":"descriptive-statistics-for-subsets","dir":"Articles","previous_headings":"","what":"Descriptive statistics for subsets","title":"Descriptive statistics in rigr","text":"Now suppose want descriptive statistics height FEV individuals age 10. first create indicator variable age > 10 outside descrip() function, give variable subset parameter.","code":"greater_10 <- ifelse(fev$age > 10, 1, 0) descrip(fev$fev, fev$height, subset = greater_10) ##               N     Msng  Mean      Std Dev    Min       25%       Mdn      ##    fev$fev:     264     0   1.708     0.0000    1.708     1.708     1.708   ## fev$height:     264     0   57.00     0.0000    57.00     57.00     57.00   ##                75%       Max      ##    fev$fev:     1.708     1.708   ## fev$height:     57.00     57.00"},{"path":"https://statdivlab.github.io/rigr/articles/descrip_intro.html","id":"abovebelow","dir":"Articles","previous_headings":"","what":"Above/Below","title":"Descriptive statistics in rigr","text":"Suppose want know proportion individuals FEV greater 2, stratified smoking status. can use strata argument , addition parameter obtain set descriptive statistics: output, can see 96.92% individuals dataset smoke (smoking status 1) FEV greater 2 L/sec, 71.99% individuals dataset nonsmokers FEV greater 2 L/sec. ","code":"descrip(fev$fev, strata = fev$smoke, above = 2) ##                      N     Msng  Mean      Std Dev    Min       25%      ## fev$fev:  All          654     0   2.637     0.8671    0.7910    1.981   ## fev$fev:    Str  no    589     0   2.566     0.8505    0.7910    1.920   ## fev$fev:    Str  yes    65     0   3.277     0.7500    1.694     2.795   ##                       Mdn       75%       Max      Pr>2      ## fev$fev:  All          2.547     3.118     5.793     0.7446  ## fev$fev:    Str  no    2.465     3.048     5.793     0.7199  ## fev$fev:    Str  yes   3.169     3.751     4.872     0.9692"},{"path":"https://statdivlab.github.io/rigr/articles/one_and_two_sample_inference.html","id":"one-and-two-sample-inference","dir":"Articles","previous_headings":"","what":"One and two-sample inference","title":"One- and two-sample inference in rigr","text":"Many analyses boil one-sample two-sample problems, “mean time graduation?”, “median home price Seattle?”, “difference mean time relapse event control treatment group?” many methods analyzing one- two-sample relationships, package implemented three common approaches.","code":""},{"path":"https://statdivlab.github.io/rigr/articles/one_and_two_sample_inference.html","id":"t-tests","dir":"Articles","previous_headings":"One and two-sample inference","what":"t-tests","title":"One- and two-sample inference in rigr","text":"often interested making statements average (mean) value variable. one-sample t-test asks whether mean distribution sample drawn equal fixed value. two-sample t-test asks whether difference means two distributions equal value (often zero, .e., difference means). function ttest() flexible, allowing stratification, calculation geometric mean, equal/unequal variances samples. example, t-test whether mean ldl variable equal 125 mg/dL can performed using rigr follows: Note addition running hypothesis test, ttest also returns point estimate (column Mean Summary) 95% confidence interval true mean LDL. instead wanted two-sample t-test whether difference mean LDL males females zero, stratify using argument: addition using , can also run two-sample tests simply providing two data vectors: ttest(mri$ldl[mri$sex == \"Female\"], mri$ldl[mri$sex == \"Male\"]). Note default ttest assume unequal variances groups, (authors package) believe best choice scenarios. also run two-sided tests default, others can specified, along non-zero null hypotheses, tests levels 0.95: prefer run test using summary statistics (sample mean, sample standard deviation, sample size) can instead use ttesti function: result provided ttest(mri$weight, null.hypoth = 155).","code":"ttest(mri$ldl, null.hypoth = 125) ##  ## Call: ## ttest(var1 = mri$ldl, null.hypoth = 125) ##  ## One-sample t-test : ##   ## Summary: ##  Variable Obs Missing Mean Std. Err. Std. Dev.     95% CI ##   mri$ldl 735      10  126      1.25      33.6 [123, 128] ##  ##  Ho:  mean = 125 ;  ##  Ha:  mean != 125  ##  t = 0.6433 , df = 724  ##  Pr(|T| > t) =  0.520256 ttest(mri$ldl, by = mri$sex) ##  ## Call: ## ttest(var1 = mri$ldl, by = mri$sex) ##  ## Two-sample t-test allowing for unequal variances : ##   ## Summary: ##               Group Obs Missing  Mean Std. Err. Std. Dev.         95% CI ##    mri$sex = Female 369       4 130.9      1.79      34.3 [127.4, 134.5] ##      mri$sex = Male 366       6 120.6      1.69      32.1 [117.3, 123.9] ##          Difference 735      10  10.3      2.47      <NA>    [5.5, 15.2] ##  ##  Ho: difference in  means = 0 ;  ##  Ha: difference in  means != 0  ##  t = 4.194 , df = 721  ##  Pr(|T| > t) =  3.08428e-05 ttest(mri$ldl, null.hypoth = 125, conf.level = 0.9) ##  ## Call: ## ttest(var1 = mri$ldl, null.hypoth = 125, conf.level = 0.9) ##  ## One-sample t-test : ##   ## Summary: ##  Variable Obs Missing Mean Std. Err. Std. Dev.     90% CI ##   mri$ldl 735      10  126      1.25      33.6 [124, 128] ##  ##  Ho:  mean = 125 ;  ##  Ha:  mean != 125  ##  t = 0.6433 , df = 724  ##  Pr(|T| > t) =  0.520256 ttest(mri$ldl, by = mri$sex, var.eq = FALSE) ##  ## Call: ## ttest(var1 = mri$ldl, by = mri$sex, var.eq = FALSE) ##  ## Two-sample t-test allowing for unequal variances : ##   ## Summary: ##               Group Obs Missing  Mean Std. Err. Std. Dev.         95% CI ##    mri$sex = Female 369       4 130.9      1.79      34.3 [127.4, 134.5] ##      mri$sex = Male 366       6 120.6      1.69      32.1 [117.3, 123.9] ##          Difference 735      10  10.3      2.47      <NA>    [5.5, 15.2] ##  ##  Ho: difference in  means = 0 ;  ##  Ha: difference in  means != 0  ##  t = 4.194 , df = 721  ##  Pr(|T| > t) =  3.08428e-05 ttesti(length(mri$weight), mean(mri$weight), sd(mri$weight), null.hypoth = 155) ##  ## Call: ## ttesti(obs = length(mri$weight), mean = mean(mri$weight), sd = sd(mri$weight),  ##     null.hypoth = 155) ##  ## One-sample t-test : ##   ## Summary: ##      Obs Mean Std. Error Std. Dev. 95% CI     ## var1 735 160  1.13       30.7      [158, 162] ##  ##  Ho:  mean = 155 ;  ##  Ha:  mean != 155  ##  t = 4.365 , df = 734  ##  Pr(|T| > t) =  1.45125e-05"},{"path":"https://statdivlab.github.io/rigr/articles/one_and_two_sample_inference.html","id":"tests-of-proportions","dir":"Articles","previous_headings":"One and two-sample inference","what":"Tests of proportions","title":"One- and two-sample inference in rigr","text":"example, investigated mean continuous random variable. However, sometimes work binary data. case, may wish make inference probabilities. rigr, can using proptest. one-sample proportion tests, approximate (based normal distribution) exact (based binomial distribution) options. example, may wish test whether proportion LDL values greater 128mg/dL equal 0.5. Note creating binary data within proptest call. proptest function works 0-1 numeric data, two-level factors, () TRUE/FALSE data. Using exact argument allows us choose kind test run. case, results quite similar. Given two samples, can also test whether two proportions equal . exact option two-sample test. test whether proportion men LDL greater 128 mg/dL proportion women. proptesti function analogous ttesti described - rather providing data vectors, can provide summary statistics form counts successes total number trials. test whether proportion people weight greater 155 lbs equal 0.6.","code":"proptest(mri$ldl > 128, null.hypoth = 0.5, exact = FALSE) ##  ## Call: ## proptest(var1 = mri$ldl > 128, exact = FALSE, null.hypoth = 0.5) ##  ## One-sample proportion test (approximate) : ##   ##       Variable Obs Missing  Estimate Std. Err.       95% CI ##  mri$ldl > 128 735      10 0.4634483    0.0185 [0.427, 0.5] ## Summary: ##  ##  Ho: True proportion is = 0.5;  ##  Ha: True proportion is != 0.5  ##  Z = -1.97  ##  p-value = 0.049 proptest(mri$ldl > 128, null.hypoth = 0.5, exact = TRUE) ##  ## Call: ## proptest(var1 = mri$ldl > 128, exact = TRUE, null.hypoth = 0.5) ##  ## One-sample proportion test (exact) : ##   ##       Variable Obs Missing  Estimate Std. Err.         95% CI ##  mri$ldl > 128 735      10 0.4634483    0.0185 [0.427, 0.501] ## Summary: ##  ##  Ho: True proportion is = 0.5;  ##  Ha: True proportion is != 0.5  ##    ##  p-value = 0.0534 proptest(mri$ldl > 128, by = mri$sex) ##  ## Call: ## proptest(var1 = mri$ldl > 128, by = mri$sex) ##  ## Two-sample proportion test (approximate) : ##   ##               Group Obs Missing      Mean Std. Err.          95% CI ##    mri$sex = Female 369       4 0.5287671    0.0261  [0.4776, 0.58] ##      mri$sex = Male 366       6 0.3972222    0.0258 [0.3467, 0.448] ##          Difference 735      10 0.1315449    0.0367 [0.0596, 0.203] ## Summary: ##  ##  Ho: Difference in proportions = 0  ##  Ha: Difference in proportions != 0  ##  Z = 3.55  ##  p.value = 0.000383 proptesti(sum(mri$weight > 155), length(mri$weight), exact = FALSE, null.hypoth= 0.6) ##  ## Call: ## proptesti(x1 = sum(mri$weight > 155), n1 = length(mri$weight),  ##     exact = FALSE, null.hypoth = 0.6) ##  ## One-sample proportion test (approximate)  : ##   ##  Variable Obs Mean  Std. Error 95% CI         ##  var1     735 0.533 0.0184     [0.497, 0.569] ## Summary: ##  ##  Ho: True proportion is = 0.6;  ##  Ha: True proportion is != 0.6  ##  Z = -3.69  ##  p.value = 0.000225"},{"path":"https://statdivlab.github.io/rigr/articles/one_and_two_sample_inference.html","id":"wilcoxon-and-mann-whitney","dir":"Articles","previous_headings":"One and two-sample inference","what":"Wilcoxon and Mann-Whitney","title":"One- and two-sample inference in rigr","text":"Wilcoxon Mann-Whitney tests, use “rank” given variables, nonparametric methods analyzing locations underlying distributions gave rise dataset. often viewed alternative one- two-sample t-tests, respectively. function wilcoxon() takes one two samples performs either approximate exact test location. Since tests based mean data, output looks slightly different ttest. , perform paired (matched) test made-data comparing individuals cystic fibrosis (CF) health individuals. function can also provide confidence interval median, although unlike Wilcoxon Mann-Whitney tests, confidence interval semiparametric rather nonparametric. Note version wilcoxon using summary statistics, since test relies ranks observed data.","code":"## create the data cf <- c(1153, 1132, 1165, 1460, 1162, 1493, 1358, 1453, 1185, 1824, 1793, 1930, 2075) healthy <- c(996, 1080, 1182, 1452, 1634, 1619, 1140, 1123, 1113, 1463, 1632, 1614, 1836)  wilcoxon(cf, healthy, paired = TRUE) ##  ##  Wilcoxon signed rank test  ##          obs sum ranks expected ## positive  10        71     45.5 ## negative   3        20     45.5 ## zero       0         0      0.0 ## all       13        91     91.0 ##                              ## unadjusted variance   204.75 ## adjustment for ties     0.00 ## adjustment for zeroes   0.00 ## adjusted variance     204.75 ##                     H0 Ha        ## Hypothesized Median 0  two.sided ##   Test Statistic p-value  ## Z 1.7821         0.074735 wilcoxon(cf, healthy, paired = TRUE, conf.int = TRUE) ##  ##  Wilcoxon signed rank test  ##          obs sum ranks expected ## positive  10        71     45.5 ## negative   3        20     45.5 ## zero       0         0      0.0 ## all       13        91     91.0 ##                              ## unadjusted variance   204.75 ## adjustment for ties     0.00 ## adjustment for zeroes   0.00 ## adjusted variance     204.75 ##                     H0 Ha        ## Hypothesized Median 0  two.sided ##   Test Statistic p-value  CI           Point Estimate ## Z 1.7821         0.074735 [-27, 238.5] 117.5"},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"fnctl-the-functional","dir":"Articles","previous_headings":"","what":"fnctl: the functional","title":"Regression in rigr","text":"use concept functional handle first goal: allowing specify different types regression models using single function. functional takes function argument returns number. common example functional regression mean. allowed functionals regress() ","code":""},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"formula-and-data","dir":"Articles","previous_headings":"","what":"formula and data","title":"Regression in rigr","text":"formula regress() formula given lm() glm(), additional optional functionality enable sophisticated analyses (multiple partial F-tests) fewer headaches. data argument exactly lm() regression commands.","code":""},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"linear-regression","dir":"Articles","previous_headings":"","what":"Linear Regression","title":"Regression in rigr","text":"first example, run linear regression atrophy (measure global brain activity) age, sex race, mri data. dataset included rigr package; see documentation running ?mri. Notice default robust standard error estimates returned addition naive estimates. robust estimates also used perform inference. Thus, confidence intervals, statistics, p-values use estimates standard error. F-statistics also displayed default, including multiple partial F-tests levels multi-level category (race) well overall F-test variable.","code":"## Preparing our R session library(rigr) ## rigr version 1.0.8: Regression, Inference, and General Data Analysis Tools in R data(mri) regress(\"mean\", atrophy ~ age + sex + race, data = mri) ##  ## Call: ## regress(fnctl = \"mean\", formula = atrophy ~ age + sex + race,  ##     data = mri) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -34.120  -8.331  -0.434   7.325  53.915  ##  ## Coefficients: ##                                                          Estimate  Naive SE  ## [1] Intercept                                             -17.60     6.341   ## [2] age                                                    0.6866   0.08134  ## [3] sexMale                                                5.988     0.8867  ##     race                                                                     ## [4]    Black                                              -2.375     2.109   ## [5]    Subject did not identify White, Black or Asian     -3.078     3.885   ## [6]    White                                              -0.2664    1.822   ##                                                          Robust SE    95%L      ## [1] Intercept                                              6.893       -31.14   ## [2] age                                                   0.08836       0.5132  ## [3] sexMale                                                0.8895       4.242   ##     race                                                                        ## [4]    Black                                               2.049       -6.397   ## [5]    Subject did not identify White, Black or Asian      4.157       -11.24   ## [6]    White                                               1.780       -3.761   ##                                                          95%H         F stat    ## [1] Intercept                                             -4.072           6.52 ## [2] age                                                    0.8601         60.38 ## [3] sexMale                                                7.734          45.32 ##     race                                                                   1.14 ## [4]    Black                                               1.647           1.34 ## [5]    Subject did not identify White, Black or Asian      5.082           0.55 ## [6]    White                                               3.228           0.02 ##                                                          df Pr(>F)    ## [1] Intercept                                            1    0.0109  ## [2] age                                                  1  < 0.00005 ## [3] sexMale                                              1  < 0.00005 ##     race                                                 3    0.3315  ## [4]    Black                                             1    0.2467  ## [5]    Subject did not identify White, Black or Asian    1    0.4592  ## [6]    White                                             1    0.8810  ##  ## Residual standard error: 12 on 729 degrees of freedom ## Multiple R-squared:  0.1439, Adjusted R-squared:  0.138  ## F-statistic: 21.32 on 5 and 729 DF,  p-value: < 2.2e-16"},{"path":[]},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"logistic-regression","dir":"Articles","previous_headings":"Generalized Linear Regression","what":"Logistic Regression","title":"Regression in rigr","text":"can also run generalized linear regression using regress(). example, model odds diabetes males compared females, run logistic regression follows: generalized linear regression output see two tables. Raw Model table displays estimated coefficients (standard errors) log-odds scale. Transformed Model table exponentiates estimated coefficients confidence intervals estimated parameters can interpreted odds scale. Note possible link function regress fnctl = odds\" logit link. Similarly, possible link function regress fnctl = \"rate\" log link.","code":"regress(\"odds\", diabetes ~ sex, data = mri) ##  ## Call: ## regress(fnctl = \"odds\", formula = diabetes ~ sex, data = mri) ##  ## Deviance Residuals:  ##     Min       1Q   Median       3Q      Max   ## -0.5593  -0.5593  -0.3823  -0.3823   2.3034   ##  ## Coefficients: ##  ## Raw Model: ##                  Estimate  Naive SE  Robust SE       F stat    df Pr(>F)    ## [1] Intercept     -2.580     0.2034    0.2037           160.39 1  < 0.00005 ## [2] sexMale        0.8037    0.2519    0.2522            10.15 1    0.0015  ##  ## Transformed Model: ##                  e(Est)    e(95%L)   e(95%H)         F stat    df Pr(>F)    ## [1] Intercept     0.07580   0.05082    0.1131           160.39 1  < 0.00005 ## [2] sexMale        2.234     1.361     3.665             10.15 1    0.0015  ##  ## (Dispersion parameter for binomial family taken to be 1) ##  ##     Null deviance: 501.59  on 734  degrees of freedom ## Residual deviance: 490.82  on 733  degrees of freedom ## AIC: 494.82 ##  ## Number of Fisher Scoring iterations: 5"},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"poisson-regression","dir":"Articles","previous_headings":"Generalized Linear Regression","what":"Poisson Regression","title":"Regression in rigr","text":"next functional regress supports \"rate\", use Poisson regression. regress yrsquit age, run: Note two tables output, denoted Raw Model Transformed Model, Transformed Model displaying exponentiated estimated coefficients.","code":"regress(\"rate\", yrsquit ~ age, data = mri) ##  ## Call: ## regress(fnctl = \"rate\", formula = yrsquit ~ age, data = mri) ##  ## Deviance Residuals:  ##    Min      1Q  Median      3Q     Max   ## -5.385  -4.365  -4.186   2.395   9.920   ##  ## Coefficients: ##  ## Raw Model: ##                  Estimate  Naive SE   Robust SE        F stat    df Pr(>F)    ## [1] Intercept      1.011     0.1571     0.7239              1.95 1    0.1629  ## [2] age           0.01680   2.087e-03  9.688e-03            3.01 1    0.0834  ##  ## Transformed Model: ##                  e(Est)    e(95%L)   e(95%H)         F stat    df Pr(>F)    ## [1] Intercept      2.749     0.6637    11.39              1.95 1    0.1629  ## [2] age            1.017     0.9978    1.036              3.01 1    0.0834  ##  ## (Dispersion parameter for poisson family taken to be 1) ##  ##     Null deviance: 14574  on 734  degrees of freedom ## Residual deviance: 14511  on 733  degrees of freedom ## AIC: 16008 ##  ## Number of Fisher Scoring iterations: 6"},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"proportional-hazards-regression","dir":"Articles","previous_headings":"","what":"Proportional Hazards Regression","title":"Regression in rigr","text":"final functional regress supports \"hazard\", use proportional hazards regression. regress age death status (note need create Surv object first), run: Similar Poisson regression case, two tables output, denoted Raw Model Transformed Model, Transformed Model displaying exponentiated estimated coefficients (.e., hazard scale).","code":"library(survival) regress(\"hazard\", Surv(obstime, death)~age, data=mri) ##  ## Call: ## regress(fnctl = \"hazard\", formula = Surv(obstime, death) ~ age,  ##     data = mri) ##  ##  ## Coefficients: ##  ## Raw Model: ##            Estimate  Naive SE  Robust SE       F stat    df Pr(>F)    ## [1] age     0.06795   0.01354   0.01412            23.17 1  < 0.00005 ##  ## Transformed Model: ##            e(Est)    e(95%L)   e(95%H)         F stat    df Pr(>F)    ## [1] age      1.070     1.041     1.100             23.17 1  < 0.00005 ## n =  735, number of events= 133  ## Overall significance test:  ## Likelihood ratio test= 22.33  on 1 df,   p=2.292e-06 ## Wald test            = 25.17  on 1 df,   p=5.24e-07 ## Score (logrank) test = 25.44  on 1 df,   p=4.554e-07"},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"regression-on-the-geometric-mean","dir":"Articles","previous_headings":"","what":"Regression on the Geometric Mean","title":"Regression in rigr","text":"often linear regression interested modeling mean response variable. However, sometimes interested modeling mean log-transformed response variable, allows us make statements geometric mean response. regress(), can use \"geometric mean\" functional fit model. Regression geometric mean packyrs variable mri dataset can performed follows: noted many packyrs observations zero, geometric mean data including observation zero zero… regardless many non-zeros also observed. Therefore, default, zeroes outcome variable replaced value equal one-half lowest nonzero value outcome variable. based idea lowest observed value proxy lower limit detection. wish specify different value replace zeroes, may say using replaceZeroes argument. output regress using geometric mean functional, see table Raw Model Transformed Model. e(Est), e(95%L), e(95%H) columns Transformed Model table correspond exponentiated values Raw Model - ’ll notice e5.119≈167.2.e^{5.119} \\approx 167.2.","code":"regress(\"geometric mean\", packyrs ~ age, data = mri) ## ( 1  cases deleted due to missing values) ##  ##  ## Call: ## regress(fnctl = \"geometric mean\", formula = packyrs ~ age, data = mri) ##  ## Residuals: ##    Min     1Q Median     3Q    Max  ## -4.136 -3.417  1.283  2.970  5.219  ##  ## Coefficients: ##  ## Raw Model: ##                  Estimate  Naive SE  Robust SE       F stat    df Pr(>F)    ## [1] Intercept      6.410     1.586     1.537             17.39 1  < 0.00005 ## [2] age          -0.07986   0.02121   0.02050            15.17 1     1e-04  ##  ## Transformed Model: ##                  e(Est)    e(95%L)   e(95%H)         F stat    df Pr(>F)    ## [1] Intercept      608.1     29.74     12431             17.39 1  < 0.00005 ## [2] age            0.9232    0.8868    0.9612            15.17 1     1e-04  ##  ## Residual standard error: 3.13 on 732 degrees of freedom ##   (1 observation deleted due to missingness) ## Multiple R-squared:  0.01899,    Adjusted R-squared:  0.01765  ## F-statistic: 15.17 on 1 and 732 DF,  p-value: 0.0001074 regress(\"geometric mean\", packyrs ~ age, data = mri, replaceZeroes = 1) ## ( 1  cases deleted due to missing values) ##  ##  ## Call: ## regress(fnctl = \"geometric mean\", formula = packyrs ~ age, data = mri,  ##     replaceZeroes = 1) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -3.6437 -1.7460  0.0625  1.7259  3.8246  ##  ## Coefficients: ##  ## Raw Model: ##                  Estimate  Naive SE  Robust SE       F stat    df Pr(>F)    ## [1] Intercept      5.119     0.8887    0.8462            36.60 1  < 0.00005 ## [2] age          -0.04498   0.01189   0.01127            15.93 1     1e-04  ##  ## Transformed Model: ##                  e(Est)    e(95%L)   e(95%H)         F stat    df Pr(>F)    ## [1] Intercept      167.2     31.76     880.7             36.60 1  < 0.00005 ## [2] age            0.9560    0.9351    0.9774            15.93 1     1e-04  ##  ## Residual standard error: 1.754 on 732 degrees of freedom ##   (1 observation deleted due to missingness) ## Multiple R-squared:  0.01919,    Adjusted R-squared:  0.01785  ## F-statistic: 15.93 on 1 and 732 DF,  p-value: 7.218e-05"},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"re-parameterizations-of-a-variable","dir":"Articles","previous_headings":"","what":"Re-parameterizations of a Variable","title":"Regression in rigr","text":"two special functions rigr allow us re-parameterize variables: dummy: create dummy variables polynomial: create polynomial functions may used regress() call, additionally give multiple partial F-test entire variable automatically.","code":""},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"specifying-the-reference-group-with-dummy","dir":"Articles","previous_headings":"Re-parameterizations of a Variable","what":"Specifying the reference group with dummy","title":"Regression in rigr","text":"dummy function useful specifying reference group wish use categorical variables. show example using reference group “Female” vs. reference group “Male” regression sex. Notice coefficients table output, reference category reported.","code":"regress(\"mean\", atrophy ~ dummy(sex, reference = \"Male\"), data = mri) ##  ## Call: ## regress(fnctl = \"mean\", formula = atrophy ~ dummy(sex, reference = \"Male\"),  ##     data = mri) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -29.087  -9.087  -0.905   8.095  49.095  ##  ## Coefficients: ##                                         Estimate  Naive SE  Robust SE    ## [1] Intercept                             39.09     0.6563    0.6733     ## [2]   dummy(sex, reference = \"Male\")     -6.182     0.9263    0.9265     ##                                         95%L      95%H         F stat    df ## [1] Intercept                             37.77     40.41        3370.22 1  ## [2]   dummy(sex, reference = \"Male\")     -8.001    -4.363          44.53 1  ##                                         Pr(>F)    ## [1] Intercept                           < 0.00005 ## [2]   dummy(sex, reference = \"Male\")    < 0.00005 ##  ##  Dummy terms calculated from sex, reference = Male  ##  ## Residual standard error: 12.56 on 733 degrees of freedom ## Multiple R-squared:  0.05729,    Adjusted R-squared:  0.05601  ## F-statistic: 44.53 on 1 and 733 DF,  p-value: 4.944e-11 regress(\"mean\", atrophy ~ dummy(sex, reference = \"Female\"), data = mri) ##  ## Call: ## regress(fnctl = \"mean\", formula = atrophy ~ dummy(sex, reference = \"Female\"),  ##     data = mri) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -29.087  -9.087  -0.905   8.095  49.095  ##  ## Coefficients: ##                                           Estimate  Naive SE  Robust SE    ## [1] Intercept                               32.91     0.6536    0.6364     ## [2]   dummy(sex, reference = \"Female\")      6.182     0.9263    0.9265     ##                                           95%L      95%H         F stat    df ## [1] Intercept                               31.66     34.15        2673.43 1  ## [2]   dummy(sex, reference = \"Female\")      4.363     8.001          44.53 1  ##                                           Pr(>F)    ## [1] Intercept                             < 0.00005 ## [2]   dummy(sex, reference = \"Female\")    < 0.00005 ##  ##  Dummy terms calculated from sex, reference = Female  ##  ## Residual standard error: 12.56 on 733 degrees of freedom ## Multiple R-squared:  0.05729,    Adjusted R-squared:  0.05601  ## F-statistic: 44.53 on 1 and 733 DF,  p-value: 4.944e-11"},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"polynomial-regression","dir":"Articles","previous_headings":"Re-parameterizations of a Variable","what":"Polynomial regression","title":"Regression in rigr","text":"can fit higher-order polynomials using polynomial: Note polynomials less equal degree specified included model, variables polynomial specification mean-centered default. can change centering using center parameter polynomial function, example follows.","code":"regress(\"mean\", atrophy ~ polynomial(age, degree = 2), data = mri) ##  ## Call: ## regress(fnctl = \"mean\", formula = atrophy ~ polynomial(age, degree = 2),  ##     data = mri) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -36.828  -9.063  -1.018   7.816  50.887  ##  ## Coefficients: ##                                    Estimate  Naive SE  Robust SE    95%L       ## [1] Intercept                        35.34     0.5598    0.5622        34.24   ##     polynomial(age, degree = 2)                                                ## [2]    age^1                         0.5869    0.1009   0.09808       0.3943   ## [3]    age^2                        0.02159   0.01099   0.01150     -9.897e-04 ##                                    95%H         F stat    df Pr(>F)    ## [1] Intercept                        36.45        3952.13 1  < 0.00005 ##     polynomial(age, degree = 2)                     32.91 2  < 0.00005 ## [2]    age^1                         0.7794         35.80 1  < 0.00005 ## [3]    age^2                        0.04417          3.52 1    0.0609  ##  ##  Polynomial terms calculated from age, centered at 74.566  ##  ## Residual standard error: 12.33 on 732 degrees of freedom ## Multiple R-squared:  0.09148,    Adjusted R-squared:  0.089  ## F-statistic: 32.91 on 2 and 732 DF,  p-value: 2.06e-14 regress(\"mean\", atrophy ~ polynomial(age, degree = 2, center = 65), data = mri) ##  ## Call: ## regress(fnctl = \"mean\", formula = atrophy ~ polynomial(age, degree = 2,  ##     center = 65), data = mri) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -36.828  -9.063  -1.018   7.816  50.887  ##  ## Coefficients: ##                                                 Estimate  Naive SE  ## [1] Intercept                                     31.70     1.528   ##     polynomial(age, degree = 2, center = 65)                        ## [2]    age^1                                      0.1738    0.2797  ## [3]    age^2                                     0.02159   0.01099  ##                                                 Robust SE    95%L       ## [1] Intercept                                     1.497         28.77   ##     polynomial(age, degree = 2, center = 65)                            ## [2]    age^1                                      0.2811      -0.3781   ## [3]    age^2                                     0.01150     -9.897e-04 ##                                                 95%H         F stat    df ## [1] Intercept                                     34.64         448.45 1  ##     polynomial(age, degree = 2, center = 65)                     32.91 2  ## [2]    age^1                                      0.7257          0.38 1  ## [3]    age^2                                     0.04417          3.52 1  ##                                                 Pr(>F)    ## [1] Intercept                                   < 0.00005 ##     polynomial(age, degree = 2, center = 65)    < 0.00005 ## [2]    age^1                                      0.5367  ## [3]    age^2                                      0.0609  ##  ##  Polynomial terms calculated from age, centered at 65  ##  ## Residual standard error: 12.33 on 732 degrees of freedom ## Multiple R-squared:  0.09148,    Adjusted R-squared:  0.089  ## F-statistic: 32.91 on 2 and 732 DF,  p-value: 2.06e-14"},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"user-specified-multiple-partial-f-tests","dir":"Articles","previous_headings":"","what":"User-specified multiple partial F-tests","title":"Regression in rigr","text":"can also perform multiple partial F-tests using formulas U function. useful want test subset variables regression. example, test whether variables packyrs yrsquit associated atrophy model age predictor, can run \"Smoking variables\" name group variables packyrs yrsquit. overall F statistic p-value associated inclusion two smoking variables variables model 4.37 0.0130, respectively.","code":"regress(\"mean\", atrophy ~ age + sex + U(\"Smoking variables\" = ~packyrs + yrsquit), data = mri) ## ( 1  cases deleted due to missing values) ##  ##  ## Call: ## regress(fnctl = \"mean\", formula = atrophy ~ age + sex + U(`Smoking variables` = ~packyrs +  ##     yrsquit), data = mri) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -33.593  -8.613  -0.306   7.279  52.399  ##  ## Coefficients: ##                          Estimate   Naive SE  Robust SE    95%L      95%H      ## [1] Intercept              -18.82     6.167     6.690       -31.95    -5.683   ## [2] age                    0.6917    0.08212   0.08900       0.5170    0.8664  ## [3] sexMale                 5.628     0.9386    0.9596       3.744     7.512   ##     Smoking variables                                                          ## [4]   packyrs             9.782e-03  0.01684   0.01693     -0.02346   0.04302  ## [5]   yrsquit              0.02071   0.03282   0.03276     -0.04361   0.08503  ##                             F stat    df Pr(>F)    ## [1] Intercept                    7.91 1    0.0050  ## [2] age                         60.40 1  < 0.00005 ## [3] sexMale                     34.39 1  < 0.00005 ##     Smoking variables            0.37 2    0.6905  ## [4]   packyrs                    0.33 1    0.5636  ## [5]   yrsquit                    0.40 1    0.5275  ##  ## Residual standard error: 11.99 on 729 degrees of freedom ##   (1 observation deleted due to missingness) ## Multiple R-squared:  0.1419, Adjusted R-squared:  0.1372  ## F-statistic: 26.44 on 4 and 729 DF,  p-value: < 2.2e-16"},{"path":"https://statdivlab.github.io/rigr/articles/regress_intro.html","id":"testing-contrasts-hypotheses-about-linear-combinations-of-regression-coefficients","dir":"Articles","previous_headings":"","what":"Testing contrasts: hypotheses about linear combinations of regression coefficients","title":"Regression in rigr","text":"may interested testing null hypothesis linear combination coefficients regression model. example, investigate “mean atrophy female subject equal mean atrophy male subject 10 years younger?”, hypothesis test involves coefficients age sex. can test hypothesis using lincom function. First, need fit linear model age sex atrophy: create vector giving linear combination coefficient hypothesized zero, perform test using lincom. elements mod_combo correspond Intercept, age, sexMale, order coefficient table shown . Note standard errors returned default robust, associated confidence intervals p-values. also test null hypothesis mean difference atrophy two groups (females, males 10 years younger) equal -1 follows:","code":"mod_rigr <- regress(\"mean\", atrophy ~ age + sex, data = mri) mod_rigr ##  ## Call: ## regress(fnctl = \"mean\", formula = atrophy ~ age + sex, data = mri) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -33.765  -8.582  -0.356   7.344  52.100  ##  ## Coefficients: ##                  Estimate  Naive SE  Robust SE    95%L      95%H      ## [1] Intercept     -17.83     6.081     6.557       -30.70    -4.959   ## [2] age            0.6819   0.08129   0.08769       0.5097    0.8540  ## [3] sexMale        5.964     0.8857    0.8845       4.227     7.700   ##                     F stat    df Pr(>F)    ## [1] Intercept            7.40 1    0.0067  ## [2] age                 60.47 1  < 0.00005 ## [3] sexMale             45.46 1  < 0.00005 ##  ## Residual standard error: 12 on 732 degrees of freedom ## Multiple R-squared:   0.14,  Adjusted R-squared:  0.1376  ## F-statistic: 52.18 on 2 and 732 DF,  p-value: < 2.2e-16 mod_combo <- c(0, -10, 1) lincom(mod_rigr, mod_combo) ##  ## H0: -10*age+1*sexMale   =  0  ## Ha: -10*age+1*sexMale  !=  0  ##      Estimate Std. Err.   95%L   95%H      T Pr(T > |t|) ## [1,]   -0.855     1.236 -3.282  1.571 -0.692       0.489 lincom(mod_rigr, mod_combo, null.hypoth = -1) ##  ## H0: -10*age+1*sexMale   =  -1  ## Ha: -10*age+1*sexMale  !=  -1  ##      Estimate Std. Err.   95%L   95%H     T Pr(T > |t|) ## [1,]   -0.855     1.236 -3.282  1.571 0.117       0.907"},{"path":"https://statdivlab.github.io/rigr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Amy D Willis. Author, maintainer. Taylor Okonek. Author. Charles J Wolock. Author. Brian D Williamson. Author. Scott S Emerson. Author. Andrew J Spieker. Author. Yiqun T Chen. Author. Travis Y Hee Wai. Contributor. James P Hughes. Contributor. R Core Team. Contributor. Akhil S Bhel. Contributor. Thomas Lumley. Contributor.","code":""},{"path":"https://statdivlab.github.io/rigr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Willis , Okonek T, Wolock C, Williamson B, Emerson S, Spieker , Chen Y (2025). rigr: Regression, Inference, General Data Analysis Tools R. R package version 1.0.8, https://statdivlab.github.io/rigr/.","code":"@Manual{,   title = {rigr: Regression, Inference, and General Data Analysis Tools in R},   author = {Amy D Willis and Taylor Okonek and Charles J Wolock and Brian D Williamson and Scott S Emerson and Andrew J Spieker and Yiqun T Chen},   year = {2025},   note = {R package version 1.0.8},   url = {https://statdivlab.github.io/rigr/}, }"},{"path":[]},{"path":"https://statdivlab.github.io/rigr/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Regression, Inference, and General Data Analysis Tools in R","text":"rigr R package streamline data analysis R. Learning R introductory statistics time can challenging, created rigr facilitate common data analysis tasks enable learners focus statistical concepts. rigr, formerly known uwIntroStats, provides easy--use interfaces descriptive statistics, one- two-sample inference, regression analyses. rigr output includes key information omitting unnecessary details can confusing beginners. Heteroskedasticity-robust (“sandwich”) standard errors returned default, multiple partial F-tests tests contrasts easy specify. single regression function (regress()) can fit linear models, generalized linear models, proportional hazards models, allowing students easily make connections different classes models.","code":""},{"path":"https://statdivlab.github.io/rigr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regression, Inference, and General Data Analysis Tools in R","text":"can install stable release rigr CRAN follows: can install development version rigr GitHub using code . installment R package remotes. produces error, please run install.packages(\"remotes\") first try line . rigr maintained StatDivLab, relies community support log issues implement new features. method like implemented? Please submit pull request start discussion!","code":"install.packages(\"rigr\") #> Using GitHub PAT from the git credential store. #> Skipping install of 'rigr' from a github remote, the SHA1 (8b901ee9) has not changed since last install. #>   Use `force = TRUE` to force installation"},{"path":"https://statdivlab.github.io/rigr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Regression, Inference, and General Data Analysis Tools in R","text":"Examples use main functions rigr provided three vignettes. One details regress function utilities, one details descrip function descriptive statistics, third details functions used one- two-sample inference, including ttest, wilcoxon, proptest.","code":""},{"path":"https://statdivlab.github.io/rigr/index.html","id":"humans","dir":"","previous_headings":"","what":"Humans","title":"Regression, Inference, and General Data Analysis Tools in R","text":"Maintainer: Amy Willis Authors: Scott S Emerson, Brian D Williamson, Charles Wolock, Taylor Okonek, Yiqun T Chen, Jim Hughes, Amy Willis, Andrew J Spieker Travis Y Hee Wai.","code":""},{"path":"https://statdivlab.github.io/rigr/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Regression, Inference, and General Data Analysis Tools in R","text":"encounter bugs, please file issue. Better yet, submit pull request! question? Please first check vignettes, please post Discussions.","code":""},{"path":"https://statdivlab.github.io/rigr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Regression, Inference, and General Data Analysis Tools in R","text":"Please note rigr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://statdivlab.github.io/rigr/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Regression models essential analytical tool modern biomedical research, applications ranging disease outcomes prediction vaccine efficacy estimation [@Bland1986-zk; @rothman2008modern]. R provides set comprehensive tools fitting regression models (e.g., lm, glm base R [@stats-package]; coxph survival package [@survival-package]), existing routines require users navigate multiple R packages different conventions syntaxes, creating barriers practitioners learners. alleviate barriers, developed R package called rigr facilitates common data analyses R, emphasis straightforward, modern regression modeling. high level, rigr compiles output existing routines together intuitive format, adds functionality existing functions. example, users can fit linear models, generalized linear models, proportional hazards models using single function regress. can also easily perform complex inference obtain robust standard errors single package. also provide functions descriptive statistics one- two-sample inference improved clarity output.","code":""},{"path":"https://statdivlab.github.io/rigr/paper.html","id":"statement-of-need","dir":"","previous_headings":"","what":"Statement of need","title":"Summary","text":"R become one leading languages used statistical analyses biomedical sciences, tens thousands available open-source packages can perform statistical tasks ranging simple z-tests complex deep learning models. However, navigating regression analyses R can challenging, especially biomedical researchers limited programming experience. particular, fitting commonly-used regression models (e.g., linear, logistic, Poisson, proportional hazards regressions) requires different functions R, possessing function-specific syntax. creates unnecessary burden hinders learners making conceptual connections related regression models. Barriers entry even higher obtaining customized, “modern” inferential results. instance, heteroskedasticity-robust (-called “sandwich”) standard errors, robust certain misspecified variance covariance structures outcome variables [@king2015robust; @Mansournia2021-cd], provided default popular lm, glm, coxph functions R. Moreover, researchers want perform joint inference linear combination regression coefficients, need manually extract robust standard errors call specialized packages perform calculation. summary, combining existing packages R can provide necessary tools simple advanced analyses, process laden unnecessary complexity details. designed rigr package lower barriers obtaining robust interpretable regression results R; emphasise connections commonly-used statistical models; facilitate use distribution-free inference tools regression. single regression function regress can fit linear models, frequently-used generalized linear models, proportional hazards models, output regress call displays exponentiated coefficients confidence intervals appropriate. Together, allows researchers () make connections different classes models, (ii) easily report estimated coefficients interpretable scale (e.g., odds ratio logistic regressions hazard ratio proportional hazards regressions). Moreover, heteroskedasticity-robust standard errors used inference default, tests linear contrasts multiple partial F-tests (e.g., testing null hypothesis multiple regression coefficients equal zero) easy specify. means rigr users can easily test multiple linear hypotheses (includes ANOVA special case) robust standard error estimates single function (lincom anova), presently requires pooling results multiple packages R (including stats [@stats-package], survival [@survival-package], sandwich [@sandwich-package] car [@car-package]). Finally, package also provides easy--use functions descriptive statistics, one- two-sample inference clearly formated outputs. designing outputs functions rigr, deliberately include key information inferential results omitting additional details might confusing newcomers regression analyses.","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/paper.html","id":"regress-general-regression-for-an-arbitrary-functional","dir":"","previous_headings":"","what":"regress: General Regression for an Arbitrary Functional","title":"Summary","text":"first demonstrate use regress function, single function can used fit linear, logistic, Poisson, proportional hazards regressions depending specified fnctl argument. following example, use regress fit linear regression model atrophy (measure loss neurons estimated degree ventricular enlargement relative predicted ventricular size; 0 indicating atrophy 100 indicating severe degree atrophy) sex, weight, age, race. see robust standard error estimates reported default, results F-test null hypothesis difference mean atrophy messure across populations matched sex, weight age differ self-reported racial categories. mri dataset represents subset Cardiovascular Health Study dataset [@kuller2007white;@mri_dataset]. order preserve patient anonymity facilitate use classroom, data modified adding random noise rescaling variables. modifications preserved general relationships among variables dataset. next set code demonstrates regress can used run regression models. cases, outputs include exponentiated coefficients (.e., coefficients odds ratio hazard ratio scales, respectively) default.","code":"# Loading library and dataset library(rigr) library(dplyr) data(mri) # renaming category for display purposes mri$race_display <- recode(mri$race,  \"Subject did not identify as White, Black or Asian\" = \"Others\") regress(fnctl = \"mean\", atrophy ~ sex + weight + age + race_display, data = mri)  # Residuals: #     Min      1Q  Median      3Q     Max # -34.053  -8.469  -0.538   7.405  54.071  # Coefficients: #                     Estimate  Naive SE  Robust SE    95%L      95%H # [1] Intercept        -22.71     7.646     8.098       -38.61    -6.813 # [2] sexMale           5.441     0.9977    1.034        3.411     7.470 # [3] weight           0.01998   0.01672   0.01787     -0.01510   0.05505 # [4] age               0.7153   0.08478   0.09125       0.5361    0.8944 #     race_display # [5]    Black         -2.387     2.109     2.055       -6.422     1.648 # [6]    Others        -3.135     3.885     4.148       -11.28     5.008 # [7]    White         -0.2016    1.822     1.790       -3.716     3.313 #                     F stat    df    Pr(>F) # [1] Intercept        7.87     1     0.0052 # [2] sexMale          27.70    1     < 0.00005 # [3] weight           1.25     1     0.2639 # [4] age              61.45    1     < 0.00005 #     race_display     1.23     3     0.2992 # [5]    Black         1.35     1     0.2459 # [6]    Others        0.57     1     0.4500 # [7]    White         0.01     1     0.9104  # Residual standard error: 11.99 on 728 degrees of freedom # Multiple R-squared:  0.1456,  Adjusted R-squared:  0.1385 # F-statistic: 18.17 on 6 and 728 DF,  p-value: < 2.2e-16 # Logistic regression of atrophy on sex height, weight, race, and # a degree-2 polynomial of ldl. regress(fnctl = \"odds\", diabetes ~ height+weight*sex +  polynomial(ldl, 2), data = mri)  # Fitting a proportional hazards regression (Cox regression). library(survival) regress(fnctl = \"hazard\", Surv(obstime, death)~age+race, data=mri)"},{"path":"https://statdivlab.github.io/rigr/paper.html","id":"testing-linear-hypotheses","dir":"","previous_headings":"","what":"Testing linear hypotheses","title":"Summary","text":"now demonstrate produce point estimates, interval estimates, p-values linear combinations regression coefficients using rigr.","code":"# Linear regression of LDL on age, stroke, and race (with robust SE by default) ldl_reg <- regress (\"mean\", ldl~age+stroke, data = mri)  # Testing coefficient created by .5*age - stroke (the first 0 comes # from excluding the intercept) single_comb <- c(0, 0.5, -1) lincom(ldl_reg, single_comb)  # H0: 0.5*age-1*stroke   =  0 # Ha: 0.5*age-1*stroke  !=  0 #      Estimate Std. Err.   95%L   95%H      T Pr(T > |t|) # [1,]   -1.367     2.152 -5.593  2.859 -0.635       0.526  # Test multiple combinations: # .5*age - stroke = 0 and Intercept + 60*age = 125 (two marginal tests) multiple_comb <- matrix(c(0, 0.5, -1, 1, 60, 0), byrow = TRUE, nrow = 2) lincom(ldl_reg, multiple_comb, null.hypoth = c(0, 125))  # H0: 0.5*age-1*stroke   =  0 # Ha: 0.5*age-1*stroke  !=  0 #      Estimate Std. Err.   95%L   95%H      T Pr(T > |t|) # [1,]   -1.367     2.152 -5.593  2.859 -0.635       0.526  # H0: 1*(Intercept)+60*age   =  125 # Ha: 1*(Intercept)+60*age  !=  125 #      Estimate Std. Err.    95%L    95%H     T Pr(T > |t|) # [1,]  126.989     3.568 119.984 133.994 0.557       0.577  # Test joint null hypothesis: # H0: .5*age - stroke = 0 AND Intercept + 60*age = 125 (one joint test) lincom(ldl_reg, multiple_comb, null.hypoth = c(0, 125), joint.test = TRUE) #      Chi2 stat df p value # [1,]    0.6911  2   0.708"},{"path":"https://statdivlab.github.io/rigr/paper.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Summary","text":"authors gratefully acknowledge contributions Thomas Lumley, Terry M. Therneau Solomon Lim, support colleagues Department Biostatistics University Washington.","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/reference/U.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Partial Formula — U","title":"Create a Partial Formula — U","text":"Creates partial formula form ~var1 + var2. partial formula can named adding equals sign tilde.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/U.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Partial Formula — U","text":"","code":"U(...)"},{"path":"https://statdivlab.github.io/rigr/reference/U.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Partial Formula — U","text":"... partial formula form ~var1 + var2.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/U.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Partial Formula — U","text":"partial formula  (potentially named) use regress.","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/reference/U.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Partial Formula — U","text":"","code":"# Reading in a dataset data(mri)  # Create a named partial formula U(ma=~male+age) #> $ma #> ~male + age #> <environment: 0x559895f19158> #>   # Create an unnamed partial formula  U(~male+age) #> $`~male + age` #> ~male + age #> <environment: 0x559895f19158> #>"},{"path":"https://statdivlab.github.io/rigr/reference/anova.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"ANOVA — anova.uRegress","title":"ANOVA — anova.uRegress","text":"Compute analysis variance (deviance) tables two fitted, nested uRegress objects. model parameters referred full model (larger model), model fewer parameters referred null model (smaller model).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/anova.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ANOVA — anova.uRegress","text":"","code":"# S3 method for class 'uRegress' anova(object, full_object, test = \"LRT\", robustSE = TRUE, useFdstn = TRUE, ...)"},{"path":"https://statdivlab.github.io/rigr/reference/anova.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ANOVA — anova.uRegress","text":"object object class uRegress, model fewer parameters (.e. null model). full_object object class uRegress, model parameters (.e. full model). test character string specifying test statistic used. Can one 'Wald' 'LRT', corresponds Wald likelihood (partial likelihood hazard regressions) ratio tests. Note currently Wald test supported symbolically nested models; , larger model contains covariates (names) smaller model. robustSE logical value indicating whether use robust standard errors calculation. Defaults TRUE. TRUE, robustSE must TRUE reg created. useFdstn logical indicator F distribution used test statistics instead chi squared distribution. Defaults FALSE. option supported input reg hazard regression (.e., fnctl=\"hazard\"). ... argument passed ","code":""},{"path":"https://statdivlab.github.io/rigr/reference/anova.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ANOVA — anova.uRegress","text":"list class anova.uRegress following components: printMat formatted table inferential results (.e., test statistics p-values) comparing two nested models. null_model null model comparison. full_model full model comparison.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/anova.uRegress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ANOVA — anova.uRegress","text":"","code":"# Loading required libraries library(sandwich)  # Reading in a dataset data(mri)  # Linear regression of LDL on age and stroke (with robust SE by default) testReg_null <- regress (\"mean\", ldl~age+stroke, data = mri)  # Linear regression of LDL on age, stroke, and race (with robust SE by default) testReg_full <- regress (\"mean\", ldl~age+stroke+race, data = mri) # Comparing the two models using the Wald test with robust SE anova(testReg_null, testReg_full, test = \"Wald\") #> Analysis of Deviance Table  #> Null model: ldl ~ age + stroke #> <environment: 0x5598900977b8> #>  #> Full model: ldl ~ age + stroke + race #> <environment: 0x5598900977b8> #>  #>      F stat num df den df p value #> [1,] 0.1619 3.0000    719   0.922"},{"path":"https://statdivlab.github.io/rigr/reference/cooks.distance.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cook's distances from uRegress objects — cooks.distance.uRegress","title":"Calculate Cook's distances from uRegress objects — cooks.distance.uRegress","text":"Extracts Cook's distances uRegress objects relying functionality stats package.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/cooks.distance.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cook's distances from uRegress objects — cooks.distance.uRegress","text":"","code":"# S3 method for class 'uRegress' cooks.distance(model, ...)"},{"path":"https://statdivlab.github.io/rigr/reference/cooks.distance.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cook's distances from uRegress objects — cooks.distance.uRegress","text":"model object class uRegress, returned regress. ... arguments pass stats::cooks.distance","code":""},{"path":"https://statdivlab.github.io/rigr/reference/cooks.distance.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cook's distances from uRegress objects — cooks.distance.uRegress","text":"vector Cook's distances","code":""},{"path":"https://statdivlab.github.io/rigr/reference/descrip.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive Statistics — descrip","title":"Descriptive Statistics — descrip","text":"Produces table relevant descriptive statistics arbitrary number variables class integer, numeric, Surv, Date, factor. Descriptive statistics can obtained within strata, user can specify subset data used. Descriptive statistics include count observations, count cases missing values, mean, standard deviation, geometric mean, minimum, maximum. user can specify arbitrary quantiles estimated, well specifying estimation proportions observations within specified ranges.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/descrip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive Statistics — descrip","text":"","code":"descrip(   ...,   strata = NULL,   subset = NULL,   probs = c(0.25, 0.5, 0.75),   geomInclude = FALSE,   replaceZeroes = FALSE,   restriction = Inf,   above = NULL,   below = NULL,   labove = NULL,   rbelow = NULL,   lbetween = NULL,   rbetween = NULL,   interval = NULL,   linterval = NULL,   rinterval = NULL,   lrinterval = NULL )"},{"path":"https://statdivlab.github.io/rigr/reference/descrip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive Statistics — descrip","text":"... arbitrary number variables descriptive statistics desired. arguments can vectors, matrices, lists. Individual columns matrix elements list may class numeric, factor, Surv, Date. Factor variables converted integers. Character vectors coerced numeric. Variables may different lengths, unless strata subset non-NULL. single data.frame tibble may also entered, case variable object described. strata vector, matrix, list stratification variables. Descriptive statistics computed within strata defined unique combination stratification variables, well combined sample. strata supplied, variables must length. subset vector indicating subset used descriptive statistics. subset supplied, variables must length. probs vector probabilities 0 1 indicating quantile estimates included descriptive statistics. Default compute 25th, 50th (median) 75th percentiles. geomInclude FALSE (default), includes geometric mean descriptive statistics. replaceZeroes FALSE (default), indicates value used place zeroes computing geometric mean. TRUE, value equal one-half lowest nonzero value used. numeric value supplied, value used variables. restriction value used computing restricted means, standard deviations, geometric means censored time--event data. default value Inf cause restrictions highest observation. Note value used variables class Surv. vector values used dichotomize variables. descriptive statistics include estimate variable proportion measurements values greater element . vector values used dichotomize variables. descriptive statistics include estimate variable proportion measurements values less element . labove vector values used dichotomize variables. descriptive statistics include estimate variable proportion measurements values greater equal element labove. rbelow vector values used dichotomize variables. descriptive statistics include estimate variable proportion measurements values less equal element rbelow. lbetween vector values -Inf Inf appended used cutpoints categorize variables. descriptive statistics include estimate variable proportion measurements values successive elements lbetween, left-hand endpoint included interval. rbetween vector values -Inf Inf appended used cutpoints categorize variables. descriptive statistics include estimate variable proportion measurements values successive elements rbetween, right-hand endpoint included interval. interval two-column matrix values row used define intervals interest categorize variables. descriptive statistics include estimate variable proportion measurements values two elements row, neither endpoint included interval. linterval two-column matrix values row used define intervals interest categorize variables. descriptive statistics include estimate variable proportion measurements values two elements row, left-hand endpoint included interval. rinterval two-column matrix values row used define intervals interest categorize variables. descriptive statistics include estimate variable proportion measurements values two elements row, right-hand endpoint included interval. lrinterval two-column matrix values row used define intervals interest categorize variables. descriptive statistics include estimate variable proportion measurements values two elements row, endpoints included interval.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/descrip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Descriptive Statistics — descrip","text":"object class uDescriptives returned. Descriptive   statistics variable entire subsetted sample, well   within stratum defined, contained matrix rows   corresponding variables strata columns corresponding   descriptive statistics. Descriptive statistics include N: number observations. Msng: number observations missing values. Mean: mean nonmissing observations (potentially                   restricted mean right-censored time--event data). Std Dev: standard deviation nonmissing observations                     (potentially restricted standard deviation                     right-censored time event data). Geom Mn: geometric mean nonmissing observations                    (potentially restricted geometric mean                    right-censored time event data). Nonpositive values                    variable generate NA, unless replaceZeroes                    specified. Min: minimum value nonmissing observations (                 potentially restricted right-censored time--event data). Quantiles: columns corresponding quantiles specified probs                      (potentially restricted right-censored                      time--event data). Max: maximum value nonmissing observations (                 potentially restricted right-censored time--event data). Proportions: columns corresponding proportions specified                         , , labove, rbelow,                         lbetween, rbetween, interval,                         linterval, rinterval, lrinterval. restriction: threshold restricted means, standard deviations,                          geometric means. firstEvent: time first event censored time--event variables. lastEvent: time last event censored time--event variables. isDate: indicator variable Date object.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/descrip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Descriptive Statistics — descrip","text":"function depends survival R package. execute library(survival) library previously installed. Quantiles computed uncensored data using default method quantile(). variables class factor, descriptive statistics computed using integer coding factors. variables class Surv, estimated proportions quantiles computed Kaplan-Meier estimates, restricted means, restricted standard deviations, restricted geometric means. variables class Date, estimated proportions labeled using Julian date since January 1, 1970.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/descrip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive Statistics — descrip","text":"","code":"# Read in the data data(mri)   # Create the table  descrip(mri) #>             N     Msng  Mean       Std Dev    Min        25%        Mdn       #>     ptid:     735     0   368.0      212.3     1.000      184.5      368.0    #>  mridate:     735     0 1992-05-09   111.9   1991-10-19 1992-01-10 1992-07-05 #>      age:     735     0   74.57      5.451     65.00      71.00      74.00    #>      sex:     735     0   1.498      0.5003    1.000      1.000      1.000    #>     race:     735     0   3.509      0.9580    1.000      4.000      4.000    #>   weight:     735     0   159.9      30.74     74.00      138.5      158.0    #>   height:     735     0   165.8      9.710     139.0      158.0      165.9    #>  packyrs:     735     1   19.60      27.11     0.0000     0.0000     6.500    #>  yrsquit:     735     0   9.661      14.10     0.0000     0.0000     0.0000   #>    alcoh:     735     0   2.109      4.852     0.0000     0.0000    0.01920   #>  physact:     735     0   1.922      2.052     0.0000     0.5538     1.312    #>      chf:     735     0  0.05578     0.2297    0.0000     0.0000     0.0000   #>      chd:     735     0   0.3347     0.6862    0.0000     0.0000     0.0000   #>   stroke:     735     0   0.2367     0.6207    0.0000     0.0000     0.0000   #> diabetes:     735     0   0.1075     0.3099    0.0000     0.0000     0.0000   #>  genhlth:     735     0   2.588      0.9382    1.000      2.000      3.000    #>      ldl:     735    10   125.8      33.60     11.00      102.0      125.0    #>      alb:     735     2   3.994      0.2690    3.200      3.800      4.000    #>      crt:     735     2   1.064      0.3030    0.5000     0.9000     1.000    #>      plt:     735     7   246.0      65.80     92.00      201.8      239.0    #>      sbp:     735     0   131.1      19.66     78.00      118.0      130.0    #>      aai:     735     9   1.103      0.1828    0.3171     1.027      1.112    #>      fev:     735    10   2.207      0.6875    0.4083     1.745      2.158    #>     dsst:     735    12   41.06      12.71     0.0000     32.00      40.00    #>  atrophy:     735     0   35.98      12.92     5.000      27.00      35.00    #>    whgrd:     735     1   2.007      1.410     0.0000     1.000      2.000    #>   numinf:     735     0   0.6109     0.9895    0.0000     0.0000     0.0000   #>   volinf:     735     1   3.223      17.36     0.0000     0.0000     0.0000   #>  obstime:     735     0    1804      392.3     68.00       1837       1879    #>    death:     735     0   0.1810     0.3852    0.0000     0.0000     0.0000   #>              75%        Max       #>     ptid:     551.5      735.0    #>  mridate:   1992-08-12 1992-10-12 #>      age:     78.00      99.00    #>      sex:     2.000      2.000    #>     race:     4.000      4.000    #>   weight:     179.0      264.0    #>   height:     173.2      190.5    #>  packyrs:     33.75      240.0    #>  yrsquit:     18.50      56.00    #>    alcoh:     1.144      35.00    #>  physact:     2.513      13.81    #>      chf:     0.0000     1.000    #>      chd:     0.0000     2.000    #>   stroke:     0.0000     2.000    #> diabetes:     0.0000     1.000    #>  genhlth:     3.000      5.000    #>      ldl:     147.0      247.0    #>      alb:     4.200      5.000    #>      crt:     1.200      4.000    #>      plt:     285.0      539.0    #>      sbp:     142.0      210.0    #>      aai:     1.207      1.728    #>      fev:     2.649      4.471    #>     dsst:     50.00      82.00    #>  atrophy:     44.00      84.00    #>    whgrd:     3.000      9.000    #>   numinf:     1.000      5.000    #>   volinf:    0.09420     197.0    #>  obstime:      2044       2159    #>    death:     0.0000     1.000"},{"path":"https://statdivlab.github.io/rigr/reference/dfbeta.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dfbeta from uRegress objects — dfbeta.uRegress","title":"Calculate dfbeta from uRegress objects — dfbeta.uRegress","text":"Extracts dfbeta uRegress objects relying functionality stats package. Note dfbeta dfbetas (dfbetas less dfbeta values scaling factor reflects leverage observation  question residual model error).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dfbeta.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dfbeta from uRegress objects — dfbeta.uRegress","text":"","code":"# S3 method for class 'uRegress' dfbeta(model, ...)"},{"path":"https://statdivlab.github.io/rigr/reference/dfbeta.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dfbeta from uRegress objects — dfbeta.uRegress","text":"model object class uRegress, returned regress. ... arguments pass stats::dfbeta","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dfbeta.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dfbeta from uRegress objects — dfbeta.uRegress","text":"matrix dfbeta values, row observation column model coefficient","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dfbetas.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dfbetas from uRegress objects — dfbetas.uRegress","title":"Calculate dfbetas from uRegress objects — dfbetas.uRegress","text":"Extracts dfbetas uRegress objects relying functionality stats package. Note dfbeta dfbetas (dfbetas less dfbeta values scaling factor reflects leverage observation  question residual model error).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dfbetas.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dfbetas from uRegress objects — dfbetas.uRegress","text":"","code":"# S3 method for class 'uRegress' dfbetas(model, ...)"},{"path":"https://statdivlab.github.io/rigr/reference/dfbetas.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dfbetas from uRegress objects — dfbetas.uRegress","text":"model object class uRegress, returned regress. ... arguments pass stats::dfbetas","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dfbetas.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dfbetas from uRegress objects — dfbetas.uRegress","text":"matrix dfbetas values, row observation column model coefficient","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Dummy Variables — dummy","title":"Create Dummy Variables — dummy","text":"Creates dummy variables using reference value.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Dummy Variables — dummy","text":"","code":"dummy(   x,   subset = rep(TRUE, length(x)),   reference = sort(unique(x[!is.na(x)])),   includeAll = FALSE )"},{"path":"https://statdivlab.github.io/rigr/reference/dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Dummy Variables — dummy","text":"x y variable used create dummy variables. subset cluster subset data, desired. reference reference value dummy variables compare . includeAll logical value indicating whether dummy variables returned (including reference).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dummy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Dummy Variables — dummy","text":"matrix containing dummy variables.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/dummy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Dummy Variables — dummy","text":"","code":"data(mri)  # Create a dummy variable for chd dummy(mri$chd) #>        1 vs 0 2 vs 0 #>   [1,]      1      0 #>   [2,]      0      0 #>   [3,]      0      0 #>   [4,]      0      0 #>   [5,]      0      0 #>   [6,]      0      0 #>   [7,]      0      0 #>   [8,]      0      0 #>   [9,]      0      0 #>  [10,]      0      0 #>  [11,]      0      0 #>  [12,]      1      0 #>  [13,]      0      0 #>  [14,]      0      0 #>  [15,]      0      0 #>  [16,]      0      0 #>  [17,]      1      0 #>  [18,]      0      0 #>  [19,]      0      0 #>  [20,]      0      0 #>  [21,]      0      0 #>  [22,]      0      0 #>  [23,]      0      0 #>  [24,]      0      0 #>  [25,]      0      0 #>  [26,]      0      0 #>  [27,]      0      0 #>  [28,]      0      0 #>  [29,]      0      0 #>  [30,]      0      0 #>  [31,]      0      0 #>  [32,]      0      0 #>  [33,]      0      0 #>  [34,]      0      0 #>  [35,]      0      0 #>  [36,]      0      0 #>  [37,]      0      0 #>  [38,]      0      0 #>  [39,]      0      0 #>  [40,]      0      0 #>  [41,]      0      0 #>  [42,]      0      0 #>  [43,]      0      0 #>  [44,]      0      1 #>  [45,]      0      0 #>  [46,]      0      0 #>  [47,]      0      0 #>  [48,]      0      0 #>  [49,]      0      0 #>  [50,]      0      0 #>  [51,]      0      0 #>  [52,]      0      1 #>  [53,]      0      0 #>  [54,]      0      0 #>  [55,]      0      0 #>  [56,]      0      0 #>  [57,]      1      0 #>  [58,]      0      0 #>  [59,]      0      0 #>  [60,]      0      1 #>  [61,]      0      0 #>  [62,]      0      0 #>  [63,]      0      0 #>  [64,]      0      0 #>  [65,]      0      0 #>  [66,]      0      0 #>  [67,]      0      0 #>  [68,]      0      0 #>  [69,]      1      0 #>  [70,]      0      0 #>  [71,]      0      0 #>  [72,]      0      0 #>  [73,]      0      0 #>  [74,]      0      0 #>  [75,]      0      0 #>  [76,]      0      1 #>  [77,]      0      0 #>  [78,]      0      0 #>  [79,]      1      0 #>  [80,]      0      0 #>  [81,]      0      0 #>  [82,]      0      0 #>  [83,]      0      0 #>  [84,]      0      0 #>  [85,]      0      0 #>  [86,]      0      0 #>  [87,]      0      0 #>  [88,]      0      0 #>  [89,]      0      0 #>  [90,]      0      0 #>  [91,]      0      0 #>  [92,]      1      0 #>  [93,]      0      0 #>  [94,]      0      0 #>  [95,]      0      0 #>  [96,]      0      1 #>  [97,]      0      0 #>  [98,]      0      0 #>  [99,]      0      0 #> [100,]      1      0 #> [101,]      0      0 #> [102,]      0      0 #> [103,]      0      0 #> [104,]      0      0 #> [105,]      0      0 #> [106,]      1      0 #> [107,]      0      0 #> [108,]      0      0 #> [109,]      0      1 #> [110,]      0      0 #> [111,]      1      0 #> [112,]      0      0 #> [113,]      0      0 #> [114,]      0      0 #> [115,]      0      0 #> [116,]      0      0 #> [117,]      0      0 #> [118,]      0      1 #> [119,]      0      0 #> [120,]      0      0 #> [121,]      0      1 #> [122,]      0      0 #> [123,]      0      0 #> [124,]      0      0 #> [125,]      0      0 #> [126,]      0      0 #> [127,]      0      1 #> [128,]      0      0 #> [129,]      1      0 #> [130,]      0      0 #> [131,]      0      0 #> [132,]      0      1 #> [133,]      0      0 #> [134,]      0      0 #> [135,]      0      0 #> [136,]      0      0 #> [137,]      0      0 #> [138,]      0      0 #> [139,]      0      1 #> [140,]      0      0 #> [141,]      0      0 #> [142,]      0      0 #> [143,]      0      0 #> [144,]      0      0 #> [145,]      0      0 #> [146,]      0      0 #> [147,]      0      0 #> [148,]      0      0 #> [149,]      0      1 #> [150,]      0      0 #> [151,]      0      0 #> [152,]      0      0 #> [153,]      0      0 #> [154,]      0      0 #> [155,]      0      0 #> [156,]      0      0 #> [157,]      0      0 #> [158,]      0      0 #> [159,]      0      0 #> [160,]      0      0 #> [161,]      0      0 #> [162,]      0      0 #> [163,]      0      0 #> [164,]      0      0 #> [165,]      0      0 #> [166,]      0      0 #> [167,]      0      0 #> [168,]      0      0 #> [169,]      0      0 #> [170,]      0      0 #> [171,]      0      0 #> [172,]      1      0 #> [173,]      0      0 #> [174,]      0      0 #> [175,]      1      0 #> [176,]      0      0 #> [177,]      0      0 #> [178,]      0      0 #> [179,]      0      1 #> [180,]      0      0 #> [181,]      0      0 #> [182,]      0      0 #> [183,]      0      0 #> [184,]      0      0 #> [185,]      0      0 #> [186,]      0      0 #> [187,]      0      1 #> [188,]      1      0 #> [189,]      0      0 #> [190,]      0      1 #> [191,]      0      0 #> [192,]      0      0 #> [193,]      0      0 #> [194,]      0      0 #> [195,]      0      0 #> [196,]      1      0 #> [197,]      0      0 #> [198,]      0      0 #> [199,]      0      0 #> [200,]      0      0 #> [201,]      0      0 #> [202,]      0      0 #> [203,]      0      0 #> [204,]      0      1 #> [205,]      1      0 #> [206,]      0      0 #> [207,]      1      0 #> [208,]      0      0 #> [209,]      0      0 #> [210,]      0      0 #> [211,]      0      1 #> [212,]      1      0 #> [213,]      0      0 #> [214,]      0      0 #> [215,]      0      0 #> [216,]      0      1 #> [217,]      0      0 #> [218,]      0      0 #> [219,]      0      0 #> [220,]      0      0 #> [221,]      0      1 #> [222,]      0      0 #> [223,]      0      0 #> [224,]      0      0 #> [225,]      0      1 #> [226,]      0      0 #> [227,]      0      0 #> [228,]      0      1 #> [229,]      0      0 #> [230,]      0      0 #> [231,]      0      0 #> [232,]      0      0 #> [233,]      0      0 #> [234,]      0      0 #> [235,]      1      0 #> [236,]      0      0 #> [237,]      0      0 #> [238,]      0      0 #> [239,]      0      0 #> [240,]      0      0 #> [241,]      0      0 #> [242,]      0      0 #> [243,]      0      1 #> [244,]      0      0 #> [245,]      0      1 #> [246,]      0      0 #> [247,]      0      0 #> [248,]      0      0 #> [249,]      0      1 #> [250,]      0      1 #> [251,]      0      0 #> [252,]      0      1 #> [253,]      0      0 #> [254,]      0      0 #> [255,]      0      0 #> [256,]      0      0 #> [257,]      0      0 #> [258,]      0      0 #> [259,]      0      0 #> [260,]      0      0 #> [261,]      0      0 #> [262,]      0      1 #> [263,]      0      1 #> [264,]      0      0 #> [265,]      0      0 #> [266,]      0      0 #> [267,]      1      0 #> [268,]      0      0 #> [269,]      0      0 #> [270,]      0      0 #> [271,]      0      0 #> [272,]      0      0 #> [273,]      0      0 #> [274,]      0      0 #> [275,]      0      1 #> [276,]      0      0 #> [277,]      1      0 #> [278,]      0      0 #> [279,]      0      0 #> [280,]      0      0 #> [281,]      0      0 #> [282,]      0      0 #> [283,]      0      0 #> [284,]      0      0 #> [285,]      0      0 #> [286,]      0      0 #> [287,]      0      1 #> [288,]      0      0 #> [289,]      0      1 #> [290,]      0      0 #> [291,]      0      0 #> [292,]      0      0 #> [293,]      0      0 #> [294,]      0      0 #> [295,]      0      0 #> [296,]      1      0 #> [297,]      0      0 #> [298,]      0      0 #> [299,]      0      0 #> [300,]      0      1 #> [301,]      0      0 #> [302,]      0      0 #> [303,]      1      0 #> [304,]      0      0 #> [305,]      0      0 #> [306,]      0      0 #> [307,]      0      0 #> [308,]      0      0 #> [309,]      0      0 #> [310,]      0      0 #> [311,]      0      1 #> [312,]      0      0 #> [313,]      0      0 #> [314,]      0      0 #> [315,]      0      0 #> [316,]      0      1 #> [317,]      0      0 #> [318,]      0      0 #> [319,]      0      0 #> [320,]      0      0 #> [321,]      0      0 #> [322,]      0      1 #> [323,]      0      0 #> [324,]      0      0 #> [325,]      0      1 #> [326,]      0      0 #> [327,]      0      0 #> [328,]      0      0 #> [329,]      0      1 #> [330,]      1      0 #> [331,]      1      0 #> [332,]      0      0 #> [333,]      0      0 #> [334,]      0      0 #> [335,]      0      0 #> [336,]      0      0 #> [337,]      0      1 #> [338,]      0      0 #> [339,]      0      0 #> [340,]      0      0 #> [341,]      0      0 #> [342,]      0      0 #> [343,]      1      0 #> [344,]      0      0 #> [345,]      0      0 #> [346,]      0      0 #> [347,]      0      0 #> [348,]      0      0 #> [349,]      0      0 #> [350,]      0      0 #> [351,]      0      1 #> [352,]      0      0 #> [353,]      0      1 #> [354,]      0      0 #> [355,]      0      0 #> [356,]      0      0 #> [357,]      0      0 #> [358,]      0      0 #> [359,]      0      0 #> [360,]      0      0 #> [361,]      0      0 #> [362,]      0      0 #> [363,]      0      0 #> [364,]      0      0 #> [365,]      0      0 #> [366,]      0      0 #> [367,]      1      0 #> [368,]      0      1 #> [369,]      0      0 #> [370,]      0      0 #> [371,]      0      0 #> [372,]      0      0 #> [373,]      0      0 #> [374,]      0      0 #> [375,]      0      0 #> [376,]      0      0 #> [377,]      0      0 #> [378,]      0      0 #> [379,]      0      0 #> [380,]      0      0 #> [381,]      0      1 #> [382,]      0      1 #> [383,]      0      0 #> [384,]      0      0 #> [385,]      0      0 #> [386,]      0      0 #> [387,]      0      0 #> [388,]      0      0 #> [389,]      0      0 #> [390,]      0      0 #> [391,]      0      0 #> [392,]      0      0 #> [393,]      0      0 #> [394,]      0      0 #> [395,]      0      0 #> [396,]      0      0 #> [397,]      0      0 #> [398,]      0      0 #> [399,]      0      0 #> [400,]      0      0 #> [401,]      0      0 #> [402,]      0      0 #> [403,]      0      0 #> [404,]      0      0 #> [405,]      0      0 #> [406,]      0      1 #> [407,]      0      0 #> [408,]      0      0 #> [409,]      0      0 #> [410,]      0      1 #> [411,]      0      0 #> [412,]      0      0 #> [413,]      0      0 #> [414,]      0      0 #> [415,]      0      0 #> [416,]      0      1 #> [417,]      0      0 #> [418,]      0      0 #> [419,]      0      0 #> [420,]      0      1 #> [421,]      0      0 #> [422,]      0      0 #> [423,]      1      0 #> [424,]      0      0 #> [425,]      0      0 #> [426,]      0      0 #> [427,]      0      1 #> [428,]      1      0 #> [429,]      0      1 #> [430,]      0      0 #> [431,]      0      0 #> [432,]      0      0 #> [433,]      1      0 #> [434,]      0      0 #> [435,]      1      0 #> [436,]      0      0 #> [437,]      0      0 #> [438,]      1      0 #> [439,]      0      0 #> [440,]      0      0 #> [441,]      0      0 #> [442,]      0      0 #> [443,]      0      0 #> [444,]      0      1 #> [445,]      1      0 #> [446,]      0      0 #> [447,]      0      0 #> [448,]      0      0 #> [449,]      0      0 #> [450,]      1      0 #> [451,]      0      0 #> [452,]      0      0 #> [453,]      0      1 #> [454,]      0      1 #> [455,]      0      0 #> [456,]      0      0 #> [457,]      0      0 #> [458,]      1      0 #> [459,]      0      0 #> [460,]      1      0 #> [461,]      1      0 #> [462,]      0      0 #> [463,]      0      0 #> [464,]      0      0 #> [465,]      0      0 #> [466,]      0      0 #> [467,]      0      0 #> [468,]      0      0 #> [469,]      0      0 #> [470,]      1      0 #> [471,]      0      0 #> [472,]      0      1 #> [473,]      0      1 #> [474,]      0      1 #> [475,]      0      0 #> [476,]      0      0 #> [477,]      0      0 #> [478,]      0      0 #> [479,]      1      0 #> [480,]      0      0 #> [481,]      1      0 #> [482,]      1      0 #> [483,]      0      0 #> [484,]      0      0 #> [485,]      0      1 #> [486,]      1      0 #> [487,]      0      0 #> [488,]      0      0 #> [489,]      0      0 #> [490,]      0      1 #> [491,]      0      0 #> [492,]      1      0 #> [493,]      0      0 #> [494,]      1      0 #> [495,]      0      1 #> [496,]      0      0 #> [497,]      0      0 #> [498,]      0      0 #> [499,]      0      0 #> [500,]      0      0 #> [501,]      0      0 #> [502,]      0      1 #> [503,]      0      0 #> [504,]      0      1 #> [505,]      0      1 #> [506,]      0      0 #> [507,]      0      0 #> [508,]      0      1 #> [509,]      0      1 #> [510,]      0      0 #> [511,]      0      0 #> [512,]      0      0 #> [513,]      0      1 #> [514,]      0      0 #> [515,]      0      0 #> [516,]      1      0 #> [517,]      0      0 #> [518,]      0      0 #> [519,]      0      0 #> [520,]      0      0 #> [521,]      0      0 #> [522,]      0      0 #> [523,]      1      0 #> [524,]      1      0 #> [525,]      0      0 #> [526,]      0      1 #> [527,]      0      0 #> [528,]      1      0 #> [529,]      0      0 #> [530,]      0      0 #> [531,]      0      0 #> [532,]      0      0 #> [533,]      0      0 #> [534,]      0      0 #> [535,]      0      0 #> [536,]      0      0 #> [537,]      0      1 #> [538,]      0      1 #> [539,]      0      0 #> [540,]      0      0 #> [541,]      1      0 #> [542,]      0      0 #> [543,]      0      0 #> [544,]      0      0 #> [545,]      0      1 #> [546,]      0      0 #> [547,]      1      0 #> [548,]      1      0 #> [549,]      1      0 #> [550,]      0      0 #> [551,]      0      0 #> [552,]      0      0 #> [553,]      0      0 #> [554,]      0      0 #> [555,]      0      0 #> [556,]      0      0 #> [557,]      0      0 #> [558,]      0      1 #> [559,]      0      1 #> [560,]      0      0 #> [561,]      0      1 #> [562,]      0      0 #> [563,]      0      0 #> [564,]      0      0 #> [565,]      0      1 #> [566,]      0      1 #> [567,]      0      0 #> [568,]      0      1 #> [569,]      0      0 #> [570,]      0      1 #> [571,]      0      0 #> [572,]      1      0 #> [573,]      0      0 #> [574,]      0      0 #> [575,]      0      0 #> [576,]      0      0 #> [577,]      0      0 #> [578,]      0      0 #> [579,]      0      1 #> [580,]      0      0 #> [581,]      1      0 #> [582,]      0      0 #> [583,]      1      0 #> [584,]      0      0 #> [585,]      0      1 #> [586,]      0      0 #> [587,]      0      0 #> [588,]      0      0 #> [589,]      0      0 #> [590,]      0      0 #> [591,]      0      0 #> [592,]      0      0 #> [593,]      0      0 #> [594,]      0      1 #> [595,]      1      0 #> [596,]      0      0 #> [597,]      0      0 #> [598,]      0      0 #> [599,]      0      0 #> [600,]      0      0 #> [601,]      0      0 #> [602,]      0      0 #> [603,]      1      0 #> [604,]      0      1 #> [605,]      0      0 #> [606,]      0      0 #> [607,]      0      0 #> [608,]      0      0 #> [609,]      0      1 #> [610,]      0      0 #> [611,]      0      0 #> [612,]      0      0 #> [613,]      0      0 #> [614,]      0      0 #> [615,]      0      0 #> [616,]      0      0 #> [617,]      0      0 #> [618,]      0      0 #> [619,]      0      0 #> [620,]      0      0 #> [621,]      0      1 #> [622,]      0      0 #> [623,]      0      0 #> [624,]      0      0 #> [625,]      0      0 #> [626,]      0      0 #> [627,]      0      0 #> [628,]      0      0 #> [629,]      0      0 #> [630,]      0      0 #> [631,]      0      1 #> [632,]      0      0 #> [633,]      0      0 #> [634,]      0      1 #> [635,]      0      0 #> [636,]      0      0 #> [637,]      0      0 #> [638,]      0      0 #> [639,]      0      0 #> [640,]      0      0 #> [641,]      0      0 #> [642,]      0      1 #> [643,]      0      0 #> [644,]      0      0 #> [645,]      0      0 #> [646,]      0      0 #> [647,]      0      0 #> [648,]      0      0 #> [649,]      0      0 #> [650,]      0      1 #> [651,]      0      0 #> [652,]      0      0 #> [653,]      0      0 #> [654,]      0      0 #> [655,]      0      0 #> [656,]      0      0 #> [657,]      0      1 #> [658,]      0      0 #> [659,]      0      0 #> [660,]      0      0 #> [661,]      0      0 #> [662,]      0      0 #> [663,]      0      0 #> [664,]      0      0 #> [665,]      0      0 #> [666,]      0      0 #> [667,]      0      0 #> [668,]      1      0 #> [669,]      0      0 #> [670,]      0      0 #> [671,]      0      0 #> [672,]      1      0 #> [673,]      0      0 #> [674,]      0      0 #> [675,]      0      0 #> [676,]      0      0 #> [677,]      0      0 #> [678,]      0      0 #> [679,]      0      0 #> [680,]      0      0 #> [681,]      1      0 #> [682,]      0      0 #> [683,]      0      0 #> [684,]      1      0 #> [685,]      0      0 #> [686,]      0      0 #> [687,]      0      1 #> [688,]      0      0 #> [689,]      0      0 #> [690,]      1      0 #> [691,]      1      0 #> [692,]      0      0 #> [693,]      0      0 #> [694,]      0      0 #> [695,]      0      0 #> [696,]      0      0 #> [697,]      0      0 #> [698,]      0      0 #> [699,]      0      0 #> [700,]      0      1 #> [701,]      0      0 #> [702,]      0      0 #> [703,]      0      0 #> [704,]      0      0 #> [705,]      0      0 #> [706,]      0      0 #> [707,]      0      0 #> [708,]      0      0 #> [709,]      0      0 #> [710,]      0      0 #> [711,]      0      0 #> [712,]      0      0 #> [713,]      0      0 #> [714,]      0      0 #> [715,]      0      0 #> [716,]      0      0 #> [717,]      1      0 #> [718,]      0      1 #> [719,]      0      0 #> [720,]      0      0 #> [721,]      0      1 #> [722,]      0      0 #> [723,]      0      0 #> [724,]      0      0 #> [725,]      0      0 #> [726,]      0      0 #> [727,]      0      0 #> [728,]      0      0 #> [729,]      0      1 #> [730,]      0      0 #> [731,]      0      0 #> [732,]      0      0 #> [733,]      0      0 #> [734,]      0      0 #> [735,]      0      0 #> attr(,\"transformation\") #> [1] \"dummy\" #> attr(,\"reference\") #> [1] 0 1 2 #> attr(,\"name\") #> [1] \"dummy(mri$chd)\" #> attr(,\"prnm\") #> [1] \"mri$chd\" #> attr(,\"original\") #>   [1] 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [38] 0 0 0 0 0 0 2 0 0 0 0 0 0 0 2 0 0 0 0 1 0 0 2 0 0 0 0 0 0 0 0 1 0 0 0 0 0 #>  [75] 0 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 0 0 1 0 0 0 0 0 1 0 0 2 0 1 #> [112] 0 0 0 0 0 0 2 0 0 2 0 0 0 0 0 2 0 1 0 0 2 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 #> [149] 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 2 0 0 0 0 0 0 #> [186] 0 2 1 0 2 0 0 0 0 0 1 0 0 0 0 0 0 0 2 1 0 1 0 0 0 2 1 0 0 0 2 0 0 0 0 2 0 #> [223] 0 0 2 0 0 2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 2 0 2 0 0 0 2 2 0 2 0 0 0 0 0 0 0 #> [260] 0 0 2 2 0 0 0 1 0 0 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 0 1 #> [297] 0 0 0 2 0 0 1 0 0 0 0 0 0 0 2 0 0 0 0 2 0 0 0 0 0 2 0 0 2 0 0 0 2 1 1 0 0 #> [334] 0 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 0 0 #> [371] 0 0 0 0 0 0 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 #> [408] 0 0 2 0 0 0 0 0 2 0 0 0 2 0 0 1 0 0 0 2 1 2 0 0 0 1 0 1 0 0 1 0 0 0 0 0 2 #> [445] 1 0 0 0 0 1 0 0 2 2 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 1 0 2 2 2 0 0 0 0 1 0 1 #> [482] 1 0 0 2 1 0 0 0 2 0 1 0 1 2 0 0 0 0 0 0 2 0 2 2 0 0 2 2 0 0 0 2 0 0 1 0 0 #> [519] 0 0 0 0 1 1 0 2 0 1 0 0 0 0 0 0 0 0 2 2 0 0 1 0 0 0 2 0 1 1 1 0 0 0 0 0 0 #> [556] 0 0 2 2 0 2 0 0 0 2 2 0 2 0 2 0 1 0 0 0 0 0 0 2 0 1 0 1 0 2 0 0 0 0 0 0 0 #> [593] 0 2 1 0 0 0 0 0 0 0 1 2 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 #> [630] 0 2 0 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 #> [667] 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 2 0 0 1 1 0 0 0 0 0 0 0 0 2 0 0 0 #> [704] 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 #> attr(,\"groups\") #> [1] 0 1 2 #> attr(,\"labels\") #> attr(,\"labels\")[[1]] #> NULL #>  #> attr(,\"labels\")[[2]] #> [1] \"1 vs 0\" \"2 vs 0\" #>  #> attr(,\"reference_name\") #> [1] 0 1 2"},{"path":"https://statdivlab.github.io/rigr/reference/fev.html","id":null,"dir":"Reference","previous_headings":"","what":"FEV dataset — fev","title":"FEV dataset — fev","text":"Data study 654 children relationship smoking status lung function (measured FEV). row corresponds single clinic visit contains information age, height, sex, FEV, smoking status. information, including coding key, available rct-design.com (Teaching Materials, Datasets section).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/fev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FEV dataset — fev","text":"","code":"fev"},{"path":"https://statdivlab.github.io/rigr/reference/fev.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FEV dataset — fev","text":"data frame 654 rows 7 variables: seqnbr case number (numbers 1 654) subjid subject identification number (unique different child) age subject age time measurement (years) fev measured forced exhalation volume (liters per second) height subject height time measurement (inches) sex subject sex smoke smoking habits (\"yes\" \"\")","code":""},{"path":"https://statdivlab.github.io/rigr/reference/fev.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FEV dataset — fev","text":"Dataset originally distributed rct-design.com (Teaching Materials, Datasets section).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/hatvalues.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the hat-values (leverages) from uRegress objects — hatvalues.uRegress","title":"Calculate the hat-values (leverages) from uRegress objects — hatvalues.uRegress","text":"Extracts hat-values (leverages) uRegress objects relying functionality stats package.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/hatvalues.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the hat-values (leverages) from uRegress objects — hatvalues.uRegress","text":"","code":"# S3 method for class 'uRegress' hatvalues(model, ...)"},{"path":"https://statdivlab.github.io/rigr/reference/hatvalues.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the hat-values (leverages) from uRegress objects — hatvalues.uRegress","text":"model object class uRegress, returned regress. ... arguments pass stats::hatvalues","code":""},{"path":"https://statdivlab.github.io/rigr/reference/hatvalues.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the hat-values (leverages) from uRegress objects — hatvalues.uRegress","text":"vector hat-values (leverages)","code":""},{"path":"https://statdivlab.github.io/rigr/reference/lincom.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests of Linear Combinations of Regression Coefficients — lincom","title":"Tests of Linear Combinations of Regression Coefficients — lincom","text":"Produces point estimates, interval estimates, p-values linear combinations regression coefficients using uRegress object.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/lincom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests of Linear Combinations of Regression Coefficients — lincom","text":"","code":"lincom(   reg,   comb,   null.hypoth = 0,   conf.level = 0.95,   robustSE = TRUE,   joint.test = FALSE,   useFdstn = FALSE,   eform = reg$fnctl != \"mean\" )"},{"path":"https://statdivlab.github.io/rigr/reference/lincom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests of Linear Combinations of Regression Coefficients — lincom","text":"reg object class uRegress. comb vector matrix containing values constants create linear combination form $$c_0 + c_1\\beta_1 + \\dots$$ Zeroes must given coefficients going included. testing multiple combinations, must matrix number columns equal number coefficients model. null.hypoth null hypothesis compare linear combination coefficients . scalar one combination given, vector matrix otherwise. default value 0. conf.level number 0 1, indicating desired confidence level intervals. robustSE logical value indicating whether use robust standard errors calculation. Defaults TRUE. TRUE, robustSE must TRUE reg created. joint.test logical value indicating whether use joint Chi-square test null hypotheses. joint.test TRUE, confidence interval calculated. Defaults FALSE. useFdstn logical indicator F distribution used test statistics instead chi squared distribution. Defaults TRUE. option supported input reg hazard regression (.e., fnctl=\"hazard\"). eform logical value indicating whether exponentiate estimated coefficient. default performed based type regression used.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/lincom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests of Linear Combinations of Regression Coefficients — lincom","text":"list class lincom (joint.test False) lincom.joint (joint.test True). lincom class, comb entries list labeled comb1, comb2, etc. many linear combinations used. list following components: printMat formatted table inferential results linear combination coefficients. include point estimate, standard error, confidence interval, t-test linear combination. nms name linear combination, printing. null.hypoth null hypothesis linear combination.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/lincom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests of Linear Combinations of Regression Coefficients — lincom","text":"","code":"# Loading required libraries library(sandwich)  # Reading in a dataset data(mri)  # Linear regression of LDL on age (with robust SE by default) testReg <- regress (\"mean\", ldl~age+stroke, data = mri)  # Testing coefficient created by .5*age - stroke (the first 0 comes from excluding the intercept) testC <- c(0, 0.5, -1) lincom(testReg, testC) #>  #> H0: 0.5*age-1*stroke   =  0  #> Ha: 0.5*age-1*stroke  !=  0  #>      Estimate Std. Err.   95%L   95%H      T Pr(T > |t|) #> [1,]   -1.367     2.152 -5.593  2.859 -0.635       0.526  # Test multiple combinations:  # whether separately whether .5*age - stroke = 0 or Intercept + 60*age = 125  testC <- matrix(c(0, 0.5, -1, 1, 60, 0), byrow = TRUE, nrow = 2) lincom(testReg, testC, null.hypoth = c(0, 125)) #>  #> H0: 0.5*age-1*stroke   =  0  #> Ha: 0.5*age-1*stroke  !=  0  #>      Estimate Std. Err.   95%L   95%H      T Pr(T > |t|) #> [1,]   -1.367     2.152 -5.593  2.859 -0.635       0.526 #>  #> H0: 1*(Intercept)+60*age   =  125  #> Ha: 1*(Intercept)+60*age  !=  125  #>      Estimate Std. Err.    95%L    95%H     T Pr(T > |t|) #> [1,]  126.989     3.568 119.984 133.994 0.557       0.577  # Test joint null hypothesis: # H0: .5*age - stroke = 0 AND Intercept + 60*age = 125  lincom(testReg, testC, null.hypoth = c(0, 125), joint.test = TRUE) #>      Chi2 stat df p value #> [1,]    0.6911  2   0.708"},{"path":"https://statdivlab.github.io/rigr/reference/mri.html","id":null,"dir":"Reference","previous_headings":"","what":"MRI dataset — mri","title":"MRI dataset — mri","text":"Data observational study incidence cardiovascular disease (especially heart attacks congestive heart failure) cerebrovascular disease (especially strokes) U.S. elderly. information, including coding key,  available rct-design.com (Teaching Materials, Datasets section).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/mri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MRI dataset — mri","text":"","code":"mri"},{"path":"https://statdivlab.github.io/rigr/reference/mri.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MRI dataset — mri","text":"data frame 735 rows 30 variables: ptid Participant identification number. mridate date participant underwent MRI scan MMDDYY format. age Participant age time MRI, years. sex sex partipant. `Male` `Female` represented. race Participant's race. One following: `White`, `Black`, `Asian`,  `Subject identify White, Black Asian`. unclear study   participants self-identified race, guessed study organisers. weight Participant's weight time MRI (pounds). height Participant's height time MRI (centimeters). packyrs Participant smoking history pack years (1 pack year = smoking 1 pack cigarettes per day 1 year). participant never smoked 0 pack years. yrsquit Number years since quitting smoking. current smoker nonzero packyrs 0 yrsquit. never smoker zero variables. alcoh Average alcohol intake participant two weeks prior MRI (drinks per week, one drink 1 oz. whiskey, 4 oz. wine, 12 oz.beer). physact Physical activity participant week prior MRI (1,000 kcal). chf Indicator whether participant diagnosed congestive heart failure prior MRI (0=, 1=yes). chd Indicator whether participant diagnosed coronary heart disease prior MRI (0=, 1=diagnosis angina, 2=diagnosis myocardial infarction). stroke Indicator whether participant diagnosed cerebrovascular event prior MRI (0=, 1=diagnosis transient ischemic attack, 2=diagnosis stroke). diabetes Indicator whether participant diagnosed diabetes prior MRI (0=, 1=yes). genhlth indicator participant's view health (1=excellent, 2=good, 3=good, 4=fair, 5=poor) ldl laboratory measure low density lipoprotein (kind cholesterol) participant's blood time MRI (mg/dL). alb laboratory measure albumin, kind protein, participant's blood time MRI (g/L). crt laboratory measure creatinine, waste product, participant's blood time MRI (mg/dL). plt laboratory measure number platelets circulating participant's blood time MRI (1000 per cubic mm). sbp measurement participant's systolic blood pressure arm time MRI (mm Hg). aai ratio systolic blood pressure measured participant's ankle time MRI systolic blood pressure participant's arm. fev measure forced expiratory volume participant time MRI (L/sec). dsst measure cognitive function (Digit Symbol Substitution Test) participant time MRI. Maximum score possible 100. atrophy measure loss neurons estimated degree ventricular enlargement relative predicted ventricular size; 0 indicating atrophy 100 indicating severe degree atrophy. whgrd measure white matter changes detected MRI. 0 means changes, 9 means marked changes. numinf count number distinct regions identified MRI scan suggestive infarcts. volinf measure total volume infarct-like lesions found MRI scan (cubic cm). obstime total time (days) participant observed study date MRI death September 16, 1997, whichever came first. death indicator participant observed die study. 1, number days recorded obstime number days participant's MRI death. 0, number days obstime number days participant's MRI September 16, 1997.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/mri.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MRI dataset — mri","text":"Dataset originally distributed rct-design.com (Teaching Materials, Datasets section).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/polynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Polynomials — polynomial","title":"Create Polynomials — polynomial","text":"Creates polynomial variables, used regression. create polynomials degree less equal degree specified, mean center variables default.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/polynomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Polynomials — polynomial","text":"","code":"polynomial(x, degree = 2, center = mean(x, na.rm = TRUE))"},{"path":"https://statdivlab.github.io/rigr/reference/polynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Polynomials — polynomial","text":"x variable used create polynomials. degree maximum degree polynomial returned. Polynomials degree <= degree returned. center value center polynomials .","code":""},{"path":"https://statdivlab.github.io/rigr/reference/polynomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Polynomials — polynomial","text":"matrix containing linear splines.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/polynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Polynomials — polynomial","text":"","code":"# Reading in a dataset data(mri)  # Create a polynomial on ldl polynomial(mri$ldl, degree=3) #>         Linear(ctr)  Square(ctr)     Cube(ctr) #>   [1,]    9.1972414 8.458925e+01  7.779877e+02 #>   [2,]  -41.8027586 1.747471e+03 -7.304909e+04 #>   [3,]  -10.8027586 1.166996e+02 -1.260678e+03 #>   [4,]  -64.8027586 4.199398e+03 -2.721325e+05 #>   [5,]   22.1972414 4.927175e+02  1.093697e+04 #>   [6,]   37.1972414 1.383635e+03  5.146740e+04 #>   [7,]  -24.8027586 6.151768e+02 -1.525808e+04 #>   [8,]   -9.8027586 9.609408e+01 -9.419870e+02 #>   [9,]   -1.8027586 3.249939e+00 -5.858855e+00 #>  [10,]  -15.8027586 2.497272e+02 -3.946378e+03 #>  [11,]   10.1972414 1.039837e+02  1.060347e+03 #>  [12,]  -17.8027586 3.169382e+02 -5.642375e+03 #>  [13,]   80.1972414 6.431598e+03  5.157964e+05 #>  [14,]    4.1972414 1.761684e+01  7.394211e+01 #>  [15,]   -4.8027586 2.306649e+01 -1.107828e+02 #>  [16,]  -30.8027586 9.488099e+02 -2.922596e+04 #>  [17,]  -47.8027586 2.285104e+03 -1.092343e+05 #>  [18,]  -15.8027586 2.497272e+02 -3.946378e+03 #>  [19,]   10.1972414 1.039837e+02  1.060347e+03 #>  [20,]   34.1972414 1.169451e+03  3.999201e+04 #>  [21,]    4.1972414 1.761684e+01  7.394211e+01 #>  [22,]  -42.8027586 1.832076e+03 -7.841791e+04 #>  [23,]   28.1972414 7.950844e+02  2.241919e+04 #>  [24,]  -55.8027586 3.113948e+03 -1.737669e+05 #>  [25,]  -50.8027586 2.580920e+03 -1.311179e+05 #>  [26,]  -11.8027586 1.393051e+02 -1.644185e+03 #>  [27,]   13.1972414 1.741672e+02  2.298526e+03 #>  [28,]  -44.8027586 2.007287e+03 -8.993200e+04 #>  [29,]   -4.8027586 2.306649e+01 -1.107828e+02 #>  [30,]  -20.8027586 4.327548e+02 -9.002493e+03 #>  [31,]   -3.8027586 1.446097e+01 -5.499159e+01 #>  [32,]    9.1972414 8.458925e+01  7.779877e+02 #>  [33,]   10.1972414 1.039837e+02  1.060347e+03 #>  [34,]   62.1972414 3.868497e+03  2.406098e+05 #>  [35,]   19.1972414 3.685341e+02  7.074838e+03 #>  [36,]  -26.8027586 7.183879e+02 -1.925478e+04 #>  [37,]   45.1972414 2.042791e+03  9.232850e+04 #>  [38,]  -42.8027586 1.832076e+03 -7.841791e+04 #>  [39,]   29.1972414 8.524789e+02  2.489003e+04 #>  [40,]   17.1972414 2.957451e+02  5.086000e+03 #>  [41,]   22.1972414 4.927175e+02  1.093697e+04 #>  [42,]   36.1972414 1.310240e+03  4.742708e+04 #>  [43,]   56.1972414 3.158130e+03  1.774782e+05 #>  [44,]  -43.8027586 1.918682e+03 -8.404355e+04 #>  [45,]   25.1972414 6.349010e+02  1.599775e+04 #>  [46,]  -13.8027586 1.905161e+02 -2.629648e+03 #>  [47,]   33.1972414 1.102057e+03  3.658525e+04 #>  [48,]  -50.8027586 2.580920e+03 -1.311179e+05 #>  [49,]  -27.8027586 7.729934e+02 -2.149135e+04 #>  [50,]   63.1972414 3.993891e+03  2.524029e+05 #>  [51,]   -2.8027586 7.855456e+00 -2.201695e+01 #>  [52,]  101.1972414 1.024088e+04  1.036349e+06 #>  [53,]  -52.8027586 2.788131e+03 -1.472210e+05 #>  [54,]  -26.8027586 7.183879e+02 -1.925478e+04 #>  [55,]   90.1972414 8.135542e+03  7.338035e+05 #>  [56,]  -21.8027586 4.753603e+02 -1.036417e+04 #>  [57,]  -45.8027586 2.097893e+03 -9.608927e+04 #>  [58,]  -36.8027586 1.354443e+03 -4.984724e+04 #>  [59,]  -17.8027586 3.169382e+02 -5.642375e+03 #>  [60,]   21.1972414 4.493230e+02  9.524409e+03 #>  [61,]   17.1972414 2.957451e+02  5.086000e+03 #>  [62,]   25.1972414 6.349010e+02  1.599775e+04 #>  [63,]   25.1972414 6.349010e+02  1.599775e+04 #>  [64,]   12.1972414 1.487727e+02  1.814616e+03 #>  [65,]  -12.8027586 1.639106e+02 -2.098508e+03 #>  [66,]   20.1972414 4.079286e+02  8.239032e+03 #>  [67,]   23.1972414 5.381120e+02  1.248271e+04 #>  [68,]  -53.8027586 2.894737e+03 -1.557448e+05 #>  [69,]    6.1972414 3.840580e+01  2.380100e+02 #>  [70,]  -31.8027586 1.011415e+03 -3.216580e+04 #>  [71,]  -40.8027586 1.664865e+03 -6.793109e+04 #>  [72,]  -46.8027586 2.190498e+03 -1.025214e+05 #>  [73,]    9.1972414 8.458925e+01  7.779877e+02 #>  [74,]   13.1972414 1.741672e+02  2.298526e+03 #>  [75,]  -40.8027586 1.664865e+03 -6.793109e+04 #>  [76,]  -22.8027586 5.199658e+02 -1.185665e+04 #>  [77,]    1.1972414 1.433387e+00  1.716110e+00 #>  [78,]   14.1972414 2.015617e+02  2.861620e+03 #>  [79,]  -24.8027586 6.151768e+02 -1.525808e+04 #>  [80,]   -4.8027586 2.306649e+01 -1.107828e+02 #>  [81,]   20.1972414 4.079286e+02  8.239032e+03 #>  [82,]  -38.8027586 1.505654e+03 -5.842353e+04 #>  [83,]   24.1972414 5.855065e+02  1.416764e+04 #>  [84,]    8.1972414 6.719477e+01  5.508117e+02 #>  [85,]  -45.8027586 2.097893e+03 -9.608927e+04 #>  [86,]    3.1972414 1.022235e+01  3.268333e+01 #>  [87,]   28.1972414 7.950844e+02  2.241919e+04 #>  [88,]  -26.8027586 7.183879e+02 -1.925478e+04 #>  [89,]   -8.8027586 7.748856e+01 -6.821131e+02 #>  [90,]   47.1972414 2.227580e+03  1.051356e+05 #>  [91,]   -5.8027586 3.367201e+01 -1.953905e+02 #>  [92,]   -0.8027586 6.444214e-01 -5.173148e-01 #>  [93,]  -15.8027586 2.497272e+02 -3.946378e+03 #>  [94,]  -40.8027586 1.664865e+03 -6.793109e+04 #>  [95,]  -55.8027586 3.113948e+03 -1.737669e+05 #>  [96,]   41.1972414 1.697213e+03  6.992048e+04 #>  [97,]   -3.8027586 1.446097e+01 -5.499159e+01 #>  [98,]   37.1972414 1.383635e+03  5.146740e+04 #>  [99,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [100,]   32.1972414 1.036662e+03  3.337767e+04 #> [101,]  -10.8027586 1.166996e+02 -1.260678e+03 #> [102,]  -28.8027586 8.295989e+02 -2.389474e+04 #> [103,]  -41.8027586 1.747471e+03 -7.304909e+04 #> [104,]  -44.8027586 2.007287e+03 -8.993200e+04 #> [105,]   25.1972414 6.349010e+02  1.599775e+04 #> [106,]   65.1972414 4.250680e+03  2.771326e+05 #> [107,]   41.1972414 1.697213e+03  6.992048e+04 #> [108,]   -8.8027586 7.748856e+01 -6.821131e+02 #> [109,]  -21.8027586 4.753603e+02 -1.036417e+04 #> [110,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [111,]   -7.8027586 6.088304e+01 -4.750557e+02 #> [112,]   -5.8027586 3.367201e+01 -1.953905e+02 #> [113,]  -27.8027586 7.729934e+02 -2.149135e+04 #> [114,]    0.1972414 3.890416e-02  7.673511e-03 #> [115,]   16.1972414 2.623506e+02  4.249356e+03 #> [116,]   20.1972414 4.079286e+02  8.239032e+03 #> [117,]  -42.8027586 1.832076e+03 -7.841791e+04 #> [118,]    7.1972414 5.180028e+01  3.728191e+02 #> [119,]    2.1972414 4.827870e+00  1.060800e+01 #> [120,]    4.1972414 1.761684e+01  7.394211e+01 #> [121,]  -35.8027586 1.281838e+03 -4.589332e+04 #> [122,]   10.1972414 1.039837e+02  1.060347e+03 #> [123,]  -18.8027586 3.535437e+02 -6.647597e+03 #> [124,]   -2.8027586 7.855456e+00 -2.201695e+01 #> [125,]  -21.8027586 4.753603e+02 -1.036417e+04 #> [126,]  -23.8027586 5.665713e+02 -1.348596e+04 #> [127,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [128,]   51.1972414 2.621158e+03  1.341960e+05 #> [129,]  -39.8027586 1.584260e+03 -6.305790e+04 #> [130,]           NA           NA            NA #> [131,]   38.1972414 1.459029e+03  5.573089e+04 #> [132,]   30.1972414 9.118734e+02  2.753606e+04 #> [133,]  -17.8027586 3.169382e+02 -5.642375e+03 #> [134,]  -72.8027586 5.300242e+03 -3.858722e+05 #> [135,]   24.1972414 5.855065e+02  1.416764e+04 #> [136,]   69.1972414 4.788258e+03  3.313343e+05 #> [137,]    8.1972414 6.719477e+01  5.508117e+02 #> [138,]   16.1972414 2.623506e+02  4.249356e+03 #> [139,]  -37.8027586 1.429049e+03 -5.402198e+04 #> [140,]    4.1972414 1.761684e+01  7.394211e+01 #> [141,]   48.1972414 2.322974e+03  1.119609e+05 #> [142,]   25.1972414 6.349010e+02  1.599775e+04 #> [143,]   22.1972414 4.927175e+02  1.093697e+04 #> [144,]   -6.8027586 4.627752e+01 -3.148148e+02 #> [145,]   35.1972414 1.238846e+03  4.360395e+04 #> [146,]   10.1972414 1.039837e+02  1.060347e+03 #> [147,]   30.1972414 9.118734e+02  2.753606e+04 #> [148,]  -26.8027586 7.183879e+02 -1.925478e+04 #> [149,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [150,]   12.1972414 1.487727e+02  1.814616e+03 #> [151,]  -21.8027586 4.753603e+02 -1.036417e+04 #> [152,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [153,]    7.1972414 5.180028e+01  3.728191e+02 #> [154,]  -44.8027586 2.007287e+03 -8.993200e+04 #> [155,]  -47.8027586 2.285104e+03 -1.092343e+05 #> [156,]  -10.8027586 1.166996e+02 -1.260678e+03 #> [157,]   15.1972414 2.309561e+02  3.509896e+03 #> [158,]           NA           NA            NA #> [159,]  -47.8027586 2.285104e+03 -1.092343e+05 #> [160,]  -24.8027586 6.151768e+02 -1.525808e+04 #> [161,]   29.1972414 8.524789e+02  2.489003e+04 #> [162,]   10.1972414 1.039837e+02  1.060347e+03 #> [163,]    5.1972414 2.701132e+01  1.403843e+02 #> [164,]   12.1972414 1.487727e+02  1.814616e+03 #> [165,]   14.1972414 2.015617e+02  2.861620e+03 #> [166,]  -10.8027586 1.166996e+02 -1.260678e+03 #> [167,]   18.1972414 3.311396e+02  6.025827e+03 #> [168,]    0.1972414 3.890416e-02  7.673511e-03 #> [169,]   91.1972414 8.316937e+03  7.584817e+05 #> [170,]   19.1972414 3.685341e+02  7.074838e+03 #> [171,]    1.1972414 1.433387e+00  1.716110e+00 #> [172,]  -49.8027586 2.480315e+03 -1.235265e+05 #> [173,]           NA           NA            NA #> [174,]  -74.8027586 5.595453e+03 -4.185553e+05 #> [175,]    6.1972414 3.840580e+01  2.380100e+02 #> [176,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [177,]  -64.8027586 4.199398e+03 -2.721325e+05 #> [178,]   23.1972414 5.381120e+02  1.248271e+04 #> [179,]   11.1972414 1.253782e+02  1.403890e+03 #> [180,]    1.1972414 1.433387e+00  1.716110e+00 #> [181,]    7.1972414 5.180028e+01  3.728191e+02 #> [182,]    7.1972414 5.180028e+01  3.728191e+02 #> [183,]   18.1972414 3.311396e+02  6.025827e+03 #> [184,]  -16.8027586 2.823327e+02 -4.743968e+03 #> [185,]   26.1972414 6.862955e+02  1.797905e+04 #> [186,]  -30.8027586 9.488099e+02 -2.922596e+04 #> [187,]    3.1972414 1.022235e+01  3.268333e+01 #> [188,]           NA           NA            NA #> [189,]    2.1972414 4.827870e+00  1.060800e+01 #> [190,]  -26.8027586 7.183879e+02 -1.925478e+04 #> [191,]   13.1972414 1.741672e+02  2.298526e+03 #> [192,]   16.1972414 2.623506e+02  4.249356e+03 #> [193,]  -22.8027586 5.199658e+02 -1.185665e+04 #> [194,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [195,]   59.1972414 3.504313e+03  2.074457e+05 #> [196,]   -1.8027586 3.249939e+00 -5.858855e+00 #> [197,]  -27.8027586 7.729934e+02 -2.149135e+04 #> [198,]  -24.8027586 6.151768e+02 -1.525808e+04 #> [199,]   65.1972414 4.250680e+03  2.771326e+05 #> [200,]   -7.8027586 6.088304e+01 -4.750557e+02 #> [201,]  -28.8027586 8.295989e+02 -2.389474e+04 #> [202,]   -8.8027586 7.748856e+01 -6.821131e+02 #> [203,]  -30.8027586 9.488099e+02 -2.922596e+04 #> [204,]    9.1972414 8.458925e+01  7.779877e+02 #> [205,]   80.1972414 6.431598e+03  5.157964e+05 #> [206,]   24.1972414 5.855065e+02  1.416764e+04 #> [207,]   -3.8027586 1.446097e+01 -5.499159e+01 #> [208,]   14.1972414 2.015617e+02  2.861620e+03 #> [209,]  -34.8027586 1.211232e+03 -4.215422e+04 #> [210,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [211,]   34.1972414 1.169451e+03  3.999201e+04 #> [212,]   36.1972414 1.310240e+03  4.742708e+04 #> [213,]   62.1972414 3.868497e+03  2.406098e+05 #> [214,]  -30.8027586 9.488099e+02 -2.922596e+04 #> [215,]   38.1972414 1.459029e+03  5.573089e+04 #> [216,]    4.1972414 1.761684e+01  7.394211e+01 #> [217,]   28.1972414 7.950844e+02  2.241919e+04 #> [218,]           NA           NA            NA #> [219,]   10.1972414 1.039837e+02  1.060347e+03 #> [220,]  -30.8027586 9.488099e+02 -2.922596e+04 #> [221,]  121.1972414 1.468877e+04  1.780239e+06 #> [222,]   18.1972414 3.311396e+02  6.025827e+03 #> [223,]  -42.8027586 1.832076e+03 -7.841791e+04 #> [224,]   -3.8027586 1.446097e+01 -5.499159e+01 #> [225,]   31.1972414 9.732679e+02  3.036327e+04 #> [226,]  -18.8027586 3.535437e+02 -6.647597e+03 #> [227,]    5.1972414 2.701132e+01  1.403843e+02 #> [228,]   14.1972414 2.015617e+02  2.861620e+03 #> [229,]   74.1972414 5.505231e+03  4.084729e+05 #> [230,]  -30.8027586 9.488099e+02 -2.922596e+04 #> [231,]   20.1972414 4.079286e+02  8.239032e+03 #> [232,]  -23.8027586 5.665713e+02 -1.348596e+04 #> [233,]   11.1972414 1.253782e+02  1.403890e+03 #> [234,]   24.1972414 5.855065e+02  1.416764e+04 #> [235,]   22.1972414 4.927175e+02  1.093697e+04 #> [236,]  -53.8027586 2.894737e+03 -1.557448e+05 #> [237,]   16.1972414 2.623506e+02  4.249356e+03 #> [238,]  -34.8027586 1.211232e+03 -4.215422e+04 #> [239,]   27.1972414 7.396899e+02  2.011753e+04 #> [240,]   82.1972414 6.756386e+03  5.553563e+05 #> [241,]   -7.8027586 6.088304e+01 -4.750557e+02 #> [242,]   24.1972414 5.855065e+02  1.416764e+04 #> [243,]   25.1972414 6.349010e+02  1.599775e+04 #> [244,]    1.1972414 1.433387e+00  1.716110e+00 #> [245,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [246,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [247,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [248,]    3.1972414 1.022235e+01  3.268333e+01 #> [249,]   53.1972414 2.829946e+03  1.505453e+05 #> [250,]    8.1972414 6.719477e+01  5.508117e+02 #> [251,]  -10.8027586 1.166996e+02 -1.260678e+03 #> [252,]  -17.8027586 3.169382e+02 -5.642375e+03 #> [253,]  -26.8027586 7.183879e+02 -1.925478e+04 #> [254,]   81.1972414 6.592992e+03  5.353328e+05 #> [255,]  -48.8027586 2.381709e+03 -1.162340e+05 #> [256,]   15.1972414 2.309561e+02  3.509896e+03 #> [257,]    4.1972414 1.761684e+01  7.394211e+01 #> [258,]   36.1972414 1.310240e+03  4.742708e+04 #> [259,]    1.1972414 1.433387e+00  1.716110e+00 #> [260,]  -33.8027586 1.142626e+03 -3.862393e+04 #> [261,]           NA           NA            NA #> [262,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [263,]   61.1972414 3.745102e+03  2.291899e+05 #> [264,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [265,]    2.1972414 4.827870e+00  1.060800e+01 #> [266,]   57.1972414 3.271524e+03  1.871222e+05 #> [267,]           NA           NA            NA #> [268,]  -15.8027586 2.497272e+02 -3.946378e+03 #> [269,]  -22.8027586 5.199658e+02 -1.185665e+04 #> [270,]   30.1972414 9.118734e+02  2.753606e+04 #> [271,]  -26.8027586 7.183879e+02 -1.925478e+04 #> [272,]   29.1972414 8.524789e+02  2.489003e+04 #> [273,]   55.1972414 3.046735e+03  1.681714e+05 #> [274,]   -7.8027586 6.088304e+01 -4.750557e+02 #> [275,]    6.1972414 3.840580e+01  2.380100e+02 #> [276,]   22.1972414 4.927175e+02  1.093697e+04 #> [277,]  -35.8027586 1.281838e+03 -4.589332e+04 #> [278,]    5.1972414 2.701132e+01  1.403843e+02 #> [279,]   12.1972414 1.487727e+02  1.814616e+03 #> [280,]  -16.8027586 2.823327e+02 -4.743968e+03 #> [281,]   10.1972414 1.039837e+02  1.060347e+03 #> [282,]   13.1972414 1.741672e+02  2.298526e+03 #> [283,]  -34.8027586 1.211232e+03 -4.215422e+04 #> [284,]   50.1972414 2.519763e+03  1.264852e+05 #> [285,]   22.1972414 4.927175e+02  1.093697e+04 #> [286,]  -38.8027586 1.505654e+03 -5.842353e+04 #> [287,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [288,]   29.1972414 8.524789e+02  2.489003e+04 #> [289,]   59.1972414 3.504313e+03  2.074457e+05 #> [290,]   11.1972414 1.253782e+02  1.403890e+03 #> [291,]   11.1972414 1.253782e+02  1.403890e+03 #> [292,]   43.1972414 1.866002e+03  8.060612e+04 #> [293,]   80.1972414 6.431598e+03  5.157964e+05 #> [294,]  -37.8027586 1.429049e+03 -5.402198e+04 #> [295,]   13.1972414 1.741672e+02  2.298526e+03 #> [296,]   56.1972414 3.158130e+03  1.774782e+05 #> [297,]   11.1972414 1.253782e+02  1.403890e+03 #> [298,]   59.1972414 3.504313e+03  2.074457e+05 #> [299,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [300,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [301,]  -56.8027586 3.226553e+03 -1.832771e+05 #> [302,]   -6.8027586 4.627752e+01 -3.148148e+02 #> [303,]  -43.8027586 1.918682e+03 -8.404355e+04 #> [304,]    4.1972414 1.761684e+01  7.394211e+01 #> [305,]  -15.8027586 2.497272e+02 -3.946378e+03 #> [306,]   36.1972414 1.310240e+03  4.742708e+04 #> [307,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [308,]  -32.8027586 1.076021e+03 -3.529646e+04 #> [309,]   -7.8027586 6.088304e+01 -4.750557e+02 #> [310,]   70.1972414 4.927653e+03  3.459076e+05 #> [311,]  -47.8027586 2.285104e+03 -1.092343e+05 #> [312,]  -14.8027586 2.191217e+02 -3.243605e+03 #> [313,]  -54.8027586 3.003342e+03 -1.645914e+05 #> [314,]   15.1972414 2.309561e+02  3.509896e+03 #> [315,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [316,]   69.1972414 4.788258e+03  3.313343e+05 #> [317,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [318,]   18.1972414 3.311396e+02  6.025827e+03 #> [319,]   47.1972414 2.227580e+03  1.051356e+05 #> [320,]   27.1972414 7.396899e+02  2.011753e+04 #> [321,]   10.1972414 1.039837e+02  1.060347e+03 #> [322,]   56.1972414 3.158130e+03  1.774782e+05 #> [323,]  -35.8027586 1.281838e+03 -4.589332e+04 #> [324,]    2.1972414 4.827870e+00  1.060800e+01 #> [325,]   62.1972414 3.868497e+03  2.406098e+05 #> [326,]   58.1972414 3.386919e+03  1.971093e+05 #> [327,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [328,]   -0.8027586 6.444214e-01 -5.173148e-01 #> [329,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [330,]    8.1972414 6.719477e+01  5.508117e+02 #> [331,]   14.1972414 2.015617e+02  2.861620e+03 #> [332,]  -45.8027586 2.097893e+03 -9.608927e+04 #> [333,]   45.1972414 2.042791e+03  9.232850e+04 #> [334,]  -44.8027586 2.007287e+03 -8.993200e+04 #> [335,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [336,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [337,]   32.1972414 1.036662e+03  3.337767e+04 #> [338,]  -19.8027586 3.921492e+02 -7.765637e+03 #> [339,]   32.1972414 1.036662e+03  3.337767e+04 #> [340,]  -34.8027586 1.211232e+03 -4.215422e+04 #> [341,]    6.1972414 3.840580e+01  2.380100e+02 #> [342,]  -37.8027586 1.429049e+03 -5.402198e+04 #> [343,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [344,]   21.1972414 4.493230e+02  9.524409e+03 #> [345,]   16.1972414 2.623506e+02  4.249356e+03 #> [346,]  -58.8027586 3.457764e+03 -2.033261e+05 #> [347,]   35.1972414 1.238846e+03  4.360395e+04 #> [348,]   52.1972414 2.724552e+03  1.422141e+05 #> [349,]  -17.8027586 3.169382e+02 -5.642375e+03 #> [350,]  -38.8027586 1.505654e+03 -5.842353e+04 #> [351,]   11.1972414 1.253782e+02  1.403890e+03 #> [352,]   34.1972414 1.169451e+03  3.999201e+04 #> [353,]    1.1972414 1.433387e+00  1.716110e+00 #> [354,]  -29.8027586 8.882044e+02 -2.647094e+04 #> [355,]  -15.8027586 2.497272e+02 -3.946378e+03 #> [356,]   49.1972414 2.420369e+03  1.190755e+05 #> [357,]   45.1972414 2.042791e+03  9.232850e+04 #> [358,]    5.1972414 2.701132e+01  1.403843e+02 #> [359,]  -32.8027586 1.076021e+03 -3.529646e+04 #> [360,]  -17.8027586 3.169382e+02 -5.642375e+03 #> [361,]   -7.8027586 6.088304e+01 -4.750557e+02 #> [362,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [363,]  -68.8027586 4.733820e+03 -3.256998e+05 #> [364,]    1.1972414 1.433387e+00  1.716110e+00 #> [365,]   55.1972414 3.046735e+03  1.681714e+05 #> [366,]  -17.8027586 3.169382e+02 -5.642375e+03 #> [367,]    7.1972414 5.180028e+01  3.728191e+02 #> [368,]   16.1972414 2.623506e+02  4.249356e+03 #> [369,]    8.1972414 6.719477e+01  5.508117e+02 #> [370,]    0.1972414 3.890416e-02  7.673511e-03 #> [371,]   38.1972414 1.459029e+03  5.573089e+04 #> [372,]  -48.8027586 2.381709e+03 -1.162340e+05 #> [373,]  -28.8027586 8.295989e+02 -2.389474e+04 #> [374,]  -70.8027586 5.013031e+03 -3.549364e+05 #> [375,]  -32.8027586 1.076021e+03 -3.529646e+04 #> [376,]  -57.8027586 3.341159e+03 -1.931282e+05 #> [377,]   10.1972414 1.039837e+02  1.060347e+03 #> [378,]   -1.8027586 3.249939e+00 -5.858855e+00 #> [379,]    7.1972414 5.180028e+01  3.728191e+02 #> [380,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [381,]  -45.8027586 2.097893e+03 -9.608927e+04 #> [382,]   17.1972414 2.957451e+02  5.086000e+03 #> [383,]   16.1972414 2.623506e+02  4.249356e+03 #> [384,]  -48.8027586 2.381709e+03 -1.162340e+05 #> [385,]  -53.8027586 2.894737e+03 -1.557448e+05 #> [386,]  -36.8027586 1.354443e+03 -4.984724e+04 #> [387,]  -48.8027586 2.381709e+03 -1.162340e+05 #> [388,]  -32.8027586 1.076021e+03 -3.529646e+04 #> [389,]   75.1972414 5.654625e+03  4.252122e+05 #> [390,]   55.1972414 3.046735e+03  1.681714e+05 #> [391,]  -55.8027586 3.113948e+03 -1.737669e+05 #> [392,]  -52.8027586 2.788131e+03 -1.472210e+05 #> [393,]  -20.8027586 4.327548e+02 -9.002493e+03 #> [394,]    8.1972414 6.719477e+01  5.508117e+02 #> [395,]  -18.8027586 3.535437e+02 -6.647597e+03 #> [396,]   94.1972414 8.873120e+03  8.358235e+05 #> [397,]   40.1972414 1.615818e+03  6.495143e+04 #> [398,]    7.1972414 5.180028e+01  3.728191e+02 #> [399,]   99.1972414 9.840093e+03  9.761101e+05 #> [400,]    6.1972414 3.840580e+01  2.380100e+02 #> [401,]   17.1972414 2.957451e+02  5.086000e+03 #> [402,]  -41.8027586 1.747471e+03 -7.304909e+04 #> [403,]   33.1972414 1.102057e+03  3.658525e+04 #> [404,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [405,]  -50.8027586 2.580920e+03 -1.311179e+05 #> [406,]  -14.8027586 2.191217e+02 -3.243605e+03 #> [407,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [408,]   44.1972414 1.953396e+03  8.633472e+04 #> [409,]  -16.8027586 2.823327e+02 -4.743968e+03 #> [410,]   32.1972414 1.036662e+03  3.337767e+04 #> [411,]   47.1972414 2.227580e+03  1.051356e+05 #> [412,]  -31.8027586 1.011415e+03 -3.216580e+04 #> [413,]   27.1972414 7.396899e+02  2.011753e+04 #> [414,]    0.1972414 3.890416e-02  7.673511e-03 #> [415,]    6.1972414 3.840580e+01  2.380100e+02 #> [416,]  -10.8027586 1.166996e+02 -1.260678e+03 #> [417,]  -35.8027586 1.281838e+03 -4.589332e+04 #> [418,]    2.1972414 4.827870e+00  1.060800e+01 #> [419,]   19.1972414 3.685341e+02  7.074838e+03 #> [420,]   18.1972414 3.311396e+02  6.025827e+03 #> [421,]   13.1972414 1.741672e+02  2.298526e+03 #> [422,]   21.1972414 4.493230e+02  9.524409e+03 #> [423,]  -44.8027586 2.007287e+03 -8.993200e+04 #> [424,]   69.1972414 4.788258e+03  3.313343e+05 #> [425,]   35.1972414 1.238846e+03  4.360395e+04 #> [426,]  -28.8027586 8.295989e+02 -2.389474e+04 #> [427,]  -19.8027586 3.921492e+02 -7.765637e+03 #> [428,]  -73.8027586 5.446847e+03 -4.019923e+05 #> [429,]   20.1972414 4.079286e+02  8.239032e+03 #> [430,]    2.1972414 4.827870e+00  1.060800e+01 #> [431,]   -3.8027586 1.446097e+01 -5.499159e+01 #> [432,]    7.1972414 5.180028e+01  3.728191e+02 #> [433,]  -14.8027586 2.191217e+02 -3.243605e+03 #> [434,]   30.1972414 9.118734e+02  2.753606e+04 #> [435,]  -16.8027586 2.823327e+02 -4.743968e+03 #> [436,]   13.1972414 1.741672e+02  2.298526e+03 #> [437,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [438,] -114.8027586 1.317967e+04 -1.513063e+06 #> [439,]    0.1972414 3.890416e-02  7.673511e-03 #> [440,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [441,]    7.1972414 5.180028e+01  3.728191e+02 #> [442,]  -86.8027586 7.534719e+03 -6.540344e+05 #> [443,]  -19.8027586 3.921492e+02 -7.765637e+03 #> [444,]   11.1972414 1.253782e+02  1.403890e+03 #> [445,]   30.1972414 9.118734e+02  2.753606e+04 #> [446,]   36.1972414 1.310240e+03  4.742708e+04 #> [447,]  -15.8027586 2.497272e+02 -3.946378e+03 #> [448,]   -3.8027586 1.446097e+01 -5.499159e+01 #> [449,]   21.1972414 4.493230e+02  9.524409e+03 #> [450,]   43.1972414 1.866002e+03  8.060612e+04 #> [451,]   40.1972414 1.615818e+03  6.495143e+04 #> [452,]  -31.8027586 1.011415e+03 -3.216580e+04 #> [453,]  -33.8027586 1.142626e+03 -3.862393e+04 #> [454,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [455,]  -29.8027586 8.882044e+02 -2.647094e+04 #> [456,]  -36.8027586 1.354443e+03 -4.984724e+04 #> [457,]   13.1972414 1.741672e+02  2.298526e+03 #> [458,]   61.1972414 3.745102e+03  2.291899e+05 #> [459,]   47.1972414 2.227580e+03  1.051356e+05 #> [460,]  -35.8027586 1.281838e+03 -4.589332e+04 #> [461,]  -23.8027586 5.665713e+02 -1.348596e+04 #> [462,]   18.1972414 3.311396e+02  6.025827e+03 #> [463,]  -35.8027586 1.281838e+03 -4.589332e+04 #> [464,]   42.1972414 1.780607e+03  7.513671e+04 #> [465,]  -14.8027586 2.191217e+02 -3.243605e+03 #> [466,]  -24.8027586 6.151768e+02 -1.525808e+04 #> [467,]  -23.8027586 5.665713e+02 -1.348596e+04 #> [468,]  -55.8027586 3.113948e+03 -1.737669e+05 #> [469,]   63.1972414 3.993891e+03  2.524029e+05 #> [470,]  -21.8027586 4.753603e+02 -1.036417e+04 #> [471,]  -65.8027586 4.330003e+03 -2.849261e+05 #> [472,]  -42.8027586 1.832076e+03 -7.841791e+04 #> [473,]    0.1972414 3.890416e-02  7.673511e-03 #> [474,]  -63.8027586 4.070792e+03 -2.597278e+05 #> [475,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [476,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [477,]  -23.8027586 5.665713e+02 -1.348596e+04 #> [478,]   12.1972414 1.487727e+02  1.814616e+03 #> [479,]   -1.8027586 3.249939e+00 -5.858855e+00 #> [480,]   78.1972414 6.114809e+03  4.781612e+05 #> [481,]   -5.8027586 3.367201e+01 -1.953905e+02 #> [482,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [483,]   25.1972414 6.349010e+02  1.599775e+04 #> [484,]  -43.8027586 1.918682e+03 -8.404355e+04 #> [485,]  -31.8027586 1.011415e+03 -3.216580e+04 #> [486,]    7.1972414 5.180028e+01  3.728191e+02 #> [487,]  -88.8027586 7.885930e+03 -7.002923e+05 #> [488,]   30.1972414 9.118734e+02  2.753606e+04 #> [489,]   45.1972414 2.042791e+03  9.232850e+04 #> [490,]  -23.8027586 5.665713e+02 -1.348596e+04 #> [491,]  -57.8027586 3.341159e+03 -1.931282e+05 #> [492,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [493,]   39.1972414 1.536424e+03  6.022357e+04 #> [494,]   22.1972414 4.927175e+02  1.093697e+04 #> [495,]   15.1972414 2.309561e+02  3.509896e+03 #> [496,]  -17.8027586 3.169382e+02 -5.642375e+03 #> [497,]   48.1972414 2.322974e+03  1.119609e+05 #> [498,]   -5.8027586 3.367201e+01 -1.953905e+02 #> [499,]  -38.8027586 1.505654e+03 -5.842353e+04 #> [500,]    3.1972414 1.022235e+01  3.268333e+01 #> [501,]   23.1972414 5.381120e+02  1.248271e+04 #> [502,]   24.1972414 5.855065e+02  1.416764e+04 #> [503,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [504,]   32.1972414 1.036662e+03  3.337767e+04 #> [505,]   -2.8027586 7.855456e+00 -2.201695e+01 #> [506,]           NA           NA            NA #> [507,]   90.1972414 8.135542e+03  7.338035e+05 #> [508,]   14.1972414 2.015617e+02  2.861620e+03 #> [509,]   35.1972414 1.238846e+03  4.360395e+04 #> [510,]   25.1972414 6.349010e+02  1.599775e+04 #> [511,]    6.1972414 3.840580e+01  2.380100e+02 #> [512,]    6.1972414 3.840580e+01  2.380100e+02 #> [513,]    0.1972414 3.890416e-02  7.673511e-03 #> [514,]   26.1972414 6.862955e+02  1.797905e+04 #> [515,]  -35.8027586 1.281838e+03 -4.589332e+04 #> [516,]  -30.8027586 9.488099e+02 -2.922596e+04 #> [517,]   10.1972414 1.039837e+02  1.060347e+03 #> [518,]   17.1972414 2.957451e+02  5.086000e+03 #> [519,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [520,]  -21.8027586 4.753603e+02 -1.036417e+04 #> [521,]  -48.8027586 2.381709e+03 -1.162340e+05 #> [522,]  -26.8027586 7.183879e+02 -1.925478e+04 #> [523,]  -20.8027586 4.327548e+02 -9.002493e+03 #> [524,]    1.1972414 1.433387e+00  1.716110e+00 #> [525,]   15.1972414 2.309561e+02  3.509896e+03 #> [526,]  -57.8027586 3.341159e+03 -1.931282e+05 #> [527,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [528,]   36.1972414 1.310240e+03  4.742708e+04 #> [529,]  -17.8027586 3.169382e+02 -5.642375e+03 #> [530,]  -12.8027586 1.639106e+02 -2.098508e+03 #> [531,]  -16.8027586 2.823327e+02 -4.743968e+03 #> [532,]  -27.8027586 7.729934e+02 -2.149135e+04 #> [533,]   60.1972414 3.623708e+03  2.181372e+05 #> [534,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [535,]   41.1972414 1.697213e+03  6.992048e+04 #> [536,]  -64.8027586 4.199398e+03 -2.721325e+05 #> [537,]    7.1972414 5.180028e+01  3.728191e+02 #> [538,]   22.1972414 4.927175e+02  1.093697e+04 #> [539,]   18.1972414 3.311396e+02  6.025827e+03 #> [540,]   21.1972414 4.493230e+02  9.524409e+03 #> [541,]  -15.8027586 2.497272e+02 -3.946378e+03 #> [542,]  -21.8027586 4.753603e+02 -1.036417e+04 #> [543,]   31.1972414 9.732679e+02  3.036327e+04 #> [544,]    4.1972414 1.761684e+01  7.394211e+01 #> [545,]           NA           NA            NA #> [546,]    7.1972414 5.180028e+01  3.728191e+02 #> [547,]  -22.8027586 5.199658e+02 -1.185665e+04 #> [548,]   16.1972414 2.623506e+02  4.249356e+03 #> [549,]    4.1972414 1.761684e+01  7.394211e+01 #> [550,]   26.1972414 6.862955e+02  1.797905e+04 #> [551,]  -30.8027586 9.488099e+02 -2.922596e+04 #> [552,]    5.1972414 2.701132e+01  1.403843e+02 #> [553,]   23.1972414 5.381120e+02  1.248271e+04 #> [554,]  -38.8027586 1.505654e+03 -5.842353e+04 #> [555,]   29.1972414 8.524789e+02  2.489003e+04 #> [556,]  -33.8027586 1.142626e+03 -3.862393e+04 #> [557,]   28.1972414 7.950844e+02  2.241919e+04 #> [558,]           NA           NA            NA #> [559,]   -0.8027586 6.444214e-01 -5.173148e-01 #> [560,]   12.1972414 1.487727e+02  1.814616e+03 #> [561,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [562,]   17.1972414 2.957451e+02  5.086000e+03 #> [563,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [564,]   -7.8027586 6.088304e+01 -4.750557e+02 #> [565,]  -37.8027586 1.429049e+03 -5.402198e+04 #> [566,]   -2.8027586 7.855456e+00 -2.201695e+01 #> [567,]   29.1972414 8.524789e+02  2.489003e+04 #> [568,]  -79.8027586 6.368480e+03 -5.082223e+05 #> [569,]   14.1972414 2.015617e+02  2.861620e+03 #> [570,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [571,]    6.1972414 3.840580e+01  2.380100e+02 #> [572,]   -1.8027586 3.249939e+00 -5.858855e+00 #> [573,]   25.1972414 6.349010e+02  1.599775e+04 #> [574,]  -48.8027586 2.381709e+03 -1.162340e+05 #> [575,]   33.1972414 1.102057e+03  3.658525e+04 #> [576,]  -14.8027586 2.191217e+02 -3.243605e+03 #> [577,]    5.1972414 2.701132e+01  1.403843e+02 #> [578,]  -14.8027586 2.191217e+02 -3.243605e+03 #> [579,]   -2.8027586 7.855456e+00 -2.201695e+01 #> [580,]   18.1972414 3.311396e+02  6.025827e+03 #> [581,]  -50.8027586 2.580920e+03 -1.311179e+05 #> [582,]  -39.8027586 1.584260e+03 -6.305790e+04 #> [583,]  -16.8027586 2.823327e+02 -4.743968e+03 #> [584,]   90.1972414 8.135542e+03  7.338035e+05 #> [585,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [586,]  -42.8027586 1.832076e+03 -7.841791e+04 #> [587,]   16.1972414 2.623506e+02  4.249356e+03 #> [588,]    2.1972414 4.827870e+00  1.060800e+01 #> [589,]   -3.8027586 1.446097e+01 -5.499159e+01 #> [590,]   30.1972414 9.118734e+02  2.753606e+04 #> [591,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [592,]   42.1972414 1.780607e+03  7.513671e+04 #> [593,]  -61.8027586 3.819581e+03 -2.360606e+05 #> [594,]  -16.8027586 2.823327e+02 -4.743968e+03 #> [595,]  -15.8027586 2.497272e+02 -3.946378e+03 #> [596,]  -47.8027586 2.285104e+03 -1.092343e+05 #> [597,]   39.1972414 1.536424e+03  6.022357e+04 #> [598,]   33.1972414 1.102057e+03  3.658525e+04 #> [599,]   -3.8027586 1.446097e+01 -5.499159e+01 #> [600,]   27.1972414 7.396899e+02  2.011753e+04 #> [601,]  -36.8027586 1.354443e+03 -4.984724e+04 #> [602,]   38.1972414 1.459029e+03  5.573089e+04 #> [603,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [604,]  -31.8027586 1.011415e+03 -3.216580e+04 #> [605,]  -47.8027586 2.285104e+03 -1.092343e+05 #> [606,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [607,]   41.1972414 1.697213e+03  6.992048e+04 #> [608,]  -20.8027586 4.327548e+02 -9.002493e+03 #> [609,]    9.1972414 8.458925e+01  7.779877e+02 #> [610,]   -3.8027586 1.446097e+01 -5.499159e+01 #> [611,]  -42.8027586 1.832076e+03 -7.841791e+04 #> [612,]  -10.8027586 1.166996e+02 -1.260678e+03 #> [613,]  -23.8027586 5.665713e+02 -1.348596e+04 #> [614,]   43.1972414 1.866002e+03  8.060612e+04 #> [615,]  -19.8027586 3.921492e+02 -7.765637e+03 #> [616,]  -33.8027586 1.142626e+03 -3.862393e+04 #> [617,]   35.1972414 1.238846e+03  4.360395e+04 #> [618,]   21.1972414 4.493230e+02  9.524409e+03 #> [619,]   30.1972414 9.118734e+02  2.753606e+04 #> [620,]   22.1972414 4.927175e+02  1.093697e+04 #> [621,]  -10.8027586 1.166996e+02 -1.260678e+03 #> [622,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [623,]   56.1972414 3.158130e+03  1.774782e+05 #> [624,]  -31.8027586 1.011415e+03 -3.216580e+04 #> [625,]   20.1972414 4.079286e+02  8.239032e+03 #> [626,]   71.1972414 5.069047e+03  3.609022e+05 #> [627,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [628,]    5.1972414 2.701132e+01  1.403843e+02 #> [629,]    7.1972414 5.180028e+01  3.728191e+02 #> [630,]   -1.8027586 3.249939e+00 -5.858855e+00 #> [631,]  -33.8027586 1.142626e+03 -3.862393e+04 #> [632,]   30.1972414 9.118734e+02  2.753606e+04 #> [633,]  -26.8027586 7.183879e+02 -1.925478e+04 #> [634,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [635,]  -39.8027586 1.584260e+03 -6.305790e+04 #> [636,]    4.1972414 1.761684e+01  7.394211e+01 #> [637,]   46.1972414 2.134185e+03  9.859346e+04 #> [638,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [639,]   24.1972414 5.855065e+02  1.416764e+04 #> [640,]    8.1972414 6.719477e+01  5.508117e+02 #> [641,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [642,]   92.1972414 8.500331e+03  7.837071e+05 #> [643,]   30.1972414 9.118734e+02  2.753606e+04 #> [644,]   -1.8027586 3.249939e+00 -5.858855e+00 #> [645,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [646,]   35.1972414 1.238846e+03  4.360395e+04 #> [647,]  -17.8027586 3.169382e+02 -5.642375e+03 #> [648,]  -22.8027586 5.199658e+02 -1.185665e+04 #> [649,]  -50.8027586 2.580920e+03 -1.311179e+05 #> [650,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [651,]   12.1972414 1.487727e+02  1.814616e+03 #> [652,]   43.1972414 1.866002e+03  8.060612e+04 #> [653,]   26.1972414 6.862955e+02  1.797905e+04 #> [654,]   -1.8027586 3.249939e+00 -5.858855e+00 #> [655,]  -26.8027586 7.183879e+02 -1.925478e+04 #> [656,]  -42.8027586 1.832076e+03 -7.841791e+04 #> [657,]  -32.8027586 1.076021e+03 -3.529646e+04 #> [658,]   42.1972414 1.780607e+03  7.513671e+04 #> [659,]   15.1972414 2.309561e+02  3.509896e+03 #> [660,]  -11.8027586 1.393051e+02 -1.644185e+03 #> [661,]  -34.8027586 1.211232e+03 -4.215422e+04 #> [662,]   -2.8027586 7.855456e+00 -2.201695e+01 #> [663,]  -48.8027586 2.381709e+03 -1.162340e+05 #> [664,]   26.1972414 6.862955e+02  1.797905e+04 #> [665,]    6.1972414 3.840580e+01  2.380100e+02 #> [666,]  -20.8027586 4.327548e+02 -9.002493e+03 #> [667,]  -29.8027586 8.882044e+02 -2.647094e+04 #> [668,]    7.1972414 5.180028e+01  3.728191e+02 #> [669,]   45.1972414 2.042791e+03  9.232850e+04 #> [670,]   13.1972414 1.741672e+02  2.298526e+03 #> [671,]  -39.8027586 1.584260e+03 -6.305790e+04 #> [672,]    2.1972414 4.827870e+00  1.060800e+01 #> [673,]  -23.8027586 5.665713e+02 -1.348596e+04 #> [674,]   10.1972414 1.039837e+02  1.060347e+03 #> [675,]   62.1972414 3.868497e+03  2.406098e+05 #> [676,]    2.1972414 4.827870e+00  1.060800e+01 #> [677,]   57.1972414 3.271524e+03  1.871222e+05 #> [678,]  -36.8027586 1.354443e+03 -4.984724e+04 #> [679,]  -46.8027586 2.190498e+03 -1.025214e+05 #> [680,]  -19.8027586 3.921492e+02 -7.765637e+03 #> [681,]   45.1972414 2.042791e+03  9.232850e+04 #> [682,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [683,]   10.1972414 1.039837e+02  1.060347e+03 #> [684,]  -29.8027586 8.882044e+02 -2.647094e+04 #> [685,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [686,]  -48.8027586 2.381709e+03 -1.162340e+05 #> [687,]  -16.8027586 2.823327e+02 -4.743968e+03 #> [688,]    5.1972414 2.701132e+01  1.403843e+02 #> [689,]  -34.8027586 1.211232e+03 -4.215422e+04 #> [690,]   -9.8027586 9.609408e+01 -9.419870e+02 #> [691,]  -41.8027586 1.747471e+03 -7.304909e+04 #> [692,]    6.1972414 3.840580e+01  2.380100e+02 #> [693,]   52.1972414 2.724552e+03  1.422141e+05 #> [694,]   42.1972414 1.780607e+03  7.513671e+04 #> [695,]  -56.8027586 3.226553e+03 -1.832771e+05 #> [696,]   20.1972414 4.079286e+02  8.239032e+03 #> [697,]  -33.8027586 1.142626e+03 -3.862393e+04 #> [698,]   12.1972414 1.487727e+02  1.814616e+03 #> [699,]   -5.8027586 3.367201e+01 -1.953905e+02 #> [700,]  -15.8027586 2.497272e+02 -3.946378e+03 #> [701,]   -8.8027586 7.748856e+01 -6.821131e+02 #> [702,]  -36.8027586 1.354443e+03 -4.984724e+04 #> [703,]   13.1972414 1.741672e+02  2.298526e+03 #> [704,]  -22.8027586 5.199658e+02 -1.185665e+04 #> [705,]   25.1972414 6.349010e+02  1.599775e+04 #> [706,]  -40.8027586 1.664865e+03 -6.793109e+04 #> [707,]   -2.8027586 7.855456e+00 -2.201695e+01 #> [708,]   34.1972414 1.169451e+03  3.999201e+04 #> [709,]  -13.8027586 1.905161e+02 -2.629648e+03 #> [710,]   -4.8027586 2.306649e+01 -1.107828e+02 #> [711,]   35.1972414 1.238846e+03  4.360395e+04 #> [712,]  -32.8027586 1.076021e+03 -3.529646e+04 #> [713,]   27.1972414 7.396899e+02  2.011753e+04 #> [714,]   30.1972414 9.118734e+02  2.753606e+04 #> [715,]   -5.8027586 3.367201e+01 -1.953905e+02 #> [716,]  -54.8027586 3.003342e+03 -1.645914e+05 #> [717,]    2.1972414 4.827870e+00  1.060800e+01 #> [718,]   19.1972414 3.685341e+02  7.074838e+03 #> [719,]   15.1972414 2.309561e+02  3.509896e+03 #> [720,]  -25.8027586 6.657824e+02 -1.717902e+04 #> [721,]   55.1972414 3.046735e+03  1.681714e+05 #> [722,]  -68.8027586 4.733820e+03 -3.256998e+05 #> [723,]   56.1972414 3.158130e+03  1.774782e+05 #> [724,]    7.1972414 5.180028e+01  3.728191e+02 #> [725,]  -32.8027586 1.076021e+03 -3.529646e+04 #> [726,]   12.1972414 1.487727e+02  1.814616e+03 #> [727,]  -15.8027586 2.497272e+02 -3.946378e+03 #> [728,]  -39.8027586 1.584260e+03 -6.305790e+04 #> [729,]   22.1972414 4.927175e+02  1.093697e+04 #> [730,]    1.1972414 1.433387e+00  1.716110e+00 #> [731,]   -1.8027586 3.249939e+00 -5.858855e+00 #> [732,]   18.1972414 3.311396e+02  6.025827e+03 #> [733,]   -3.8027586 1.446097e+01 -5.499159e+01 #> [734,]   29.1972414 8.524789e+02  2.489003e+04 #> [735,]   21.1972414 4.493230e+02  9.524409e+03 #> attr(,\"transformation\") #> [1] \"polynomial\" #> attr(,\"name\") #> [1] \"polynomial(mri$ldl)\" #> attr(,\"prnm\") #> [1] \"mri$ldl\" #> attr(,\"degree\") #> [1] 1 2 3 #> attr(,\"center\") #> [1] 125.8028 #> attr(,\"original\") #>   [1]    9.1972414  -41.8027586  -10.8027586  -64.8027586   22.1972414 #>   [6]   37.1972414  -24.8027586   -9.8027586   -1.8027586  -15.8027586 #>  [11]   10.1972414  -17.8027586   80.1972414    4.1972414   -4.8027586 #>  [16]  -30.8027586  -47.8027586  -15.8027586   10.1972414   34.1972414 #>  [21]    4.1972414  -42.8027586   28.1972414  -55.8027586  -50.8027586 #>  [26]  -11.8027586   13.1972414  -44.8027586   -4.8027586  -20.8027586 #>  [31]   -3.8027586    9.1972414   10.1972414   62.1972414   19.1972414 #>  [36]  -26.8027586   45.1972414  -42.8027586   29.1972414   17.1972414 #>  [41]   22.1972414   36.1972414   56.1972414  -43.8027586   25.1972414 #>  [46]  -13.8027586   33.1972414  -50.8027586  -27.8027586   63.1972414 #>  [51]   -2.8027586  101.1972414  -52.8027586  -26.8027586   90.1972414 #>  [56]  -21.8027586  -45.8027586  -36.8027586  -17.8027586   21.1972414 #>  [61]   17.1972414   25.1972414   25.1972414   12.1972414  -12.8027586 #>  [66]   20.1972414   23.1972414  -53.8027586    6.1972414  -31.8027586 #>  [71]  -40.8027586  -46.8027586    9.1972414   13.1972414  -40.8027586 #>  [76]  -22.8027586    1.1972414   14.1972414  -24.8027586   -4.8027586 #>  [81]   20.1972414  -38.8027586   24.1972414    8.1972414  -45.8027586 #>  [86]    3.1972414   28.1972414  -26.8027586   -8.8027586   47.1972414 #>  [91]   -5.8027586   -0.8027586  -15.8027586  -40.8027586  -55.8027586 #>  [96]   41.1972414   -3.8027586   37.1972414  -25.8027586   32.1972414 #> [101]  -10.8027586  -28.8027586  -41.8027586  -44.8027586   25.1972414 #> [106]   65.1972414   41.1972414   -8.8027586  -21.8027586  -12.8027586 #> [111]   -7.8027586   -5.8027586  -27.8027586    0.1972414   16.1972414 #> [116]   20.1972414  -42.8027586    7.1972414    2.1972414    4.1972414 #> [121]  -35.8027586   10.1972414  -18.8027586   -2.8027586  -21.8027586 #> [126]  -23.8027586  -25.8027586   51.1972414  -39.8027586           NA #> [131]   38.1972414   30.1972414  -17.8027586  -72.8027586   24.1972414 #> [136]   69.1972414    8.1972414   16.1972414  -37.8027586    4.1972414 #> [141]   48.1972414   25.1972414   22.1972414   -6.8027586   35.1972414 #> [146]   10.1972414   30.1972414  -26.8027586  -11.8027586   12.1972414 #> [151]  -21.8027586  -12.8027586    7.1972414  -44.8027586  -47.8027586 #> [156]  -10.8027586   15.1972414           NA  -47.8027586  -24.8027586 #> [161]   29.1972414   10.1972414    5.1972414   12.1972414   14.1972414 #> [166]  -10.8027586   18.1972414    0.1972414   91.1972414   19.1972414 #> [171]    1.1972414  -49.8027586           NA  -74.8027586    6.1972414 #> [176]  -11.8027586  -64.8027586   23.1972414   11.1972414    1.1972414 #> [181]    7.1972414    7.1972414   18.1972414  -16.8027586   26.1972414 #> [186]  -30.8027586    3.1972414           NA    2.1972414  -26.8027586 #> [191]   13.1972414   16.1972414  -22.8027586  -11.8027586   59.1972414 #> [196]   -1.8027586  -27.8027586  -24.8027586   65.1972414   -7.8027586 #> [201]  -28.8027586   -8.8027586  -30.8027586    9.1972414   80.1972414 #> [206]   24.1972414   -3.8027586   14.1972414  -34.8027586   -4.8027586 #> [211]   34.1972414   36.1972414   62.1972414  -30.8027586   38.1972414 #> [216]    4.1972414   28.1972414           NA   10.1972414  -30.8027586 #> [221]  121.1972414   18.1972414  -42.8027586   -3.8027586   31.1972414 #> [226]  -18.8027586    5.1972414   14.1972414   74.1972414  -30.8027586 #> [231]   20.1972414  -23.8027586   11.1972414   24.1972414   22.1972414 #> [236]  -53.8027586   16.1972414  -34.8027586   27.1972414   82.1972414 #> [241]   -7.8027586   24.1972414   25.1972414    1.1972414  -25.8027586 #> [246]  -11.8027586  -13.8027586    3.1972414   53.1972414    8.1972414 #> [251]  -10.8027586  -17.8027586  -26.8027586   81.1972414  -48.8027586 #> [256]   15.1972414    4.1972414   36.1972414    1.1972414  -33.8027586 #> [261]           NA  -25.8027586   61.1972414  -12.8027586    2.1972414 #> [266]   57.1972414           NA  -15.8027586  -22.8027586   30.1972414 #> [271]  -26.8027586   29.1972414   55.1972414   -7.8027586    6.1972414 #> [276]   22.1972414  -35.8027586    5.1972414   12.1972414  -16.8027586 #> [281]   10.1972414   13.1972414  -34.8027586   50.1972414   22.1972414 #> [286]  -38.8027586  -12.8027586   29.1972414   59.1972414   11.1972414 #> [291]   11.1972414   43.1972414   80.1972414  -37.8027586   13.1972414 #> [296]   56.1972414   11.1972414   59.1972414   -9.8027586  -11.8027586 #> [301]  -56.8027586   -6.8027586  -43.8027586    4.1972414  -15.8027586 #> [306]   36.1972414  -12.8027586  -32.8027586   -7.8027586   70.1972414 #> [311]  -47.8027586  -14.8027586  -54.8027586   15.1972414  -13.8027586 #> [316]   69.1972414   -9.8027586   18.1972414   47.1972414   27.1972414 #> [321]   10.1972414   56.1972414  -35.8027586    2.1972414   62.1972414 #> [326]   58.1972414   -4.8027586   -0.8027586  -12.8027586    8.1972414 #> [331]   14.1972414  -45.8027586   45.1972414  -44.8027586  -13.8027586 #> [336]   -9.8027586   32.1972414  -19.8027586   32.1972414  -34.8027586 #> [341]    6.1972414  -37.8027586  -12.8027586   21.1972414   16.1972414 #> [346]  -58.8027586   35.1972414   52.1972414  -17.8027586  -38.8027586 #> [351]   11.1972414   34.1972414    1.1972414  -29.8027586  -15.8027586 #> [356]   49.1972414   45.1972414    5.1972414  -32.8027586  -17.8027586 #> [361]   -7.8027586   -9.8027586  -68.8027586    1.1972414   55.1972414 #> [366]  -17.8027586    7.1972414   16.1972414    8.1972414    0.1972414 #> [371]   38.1972414  -48.8027586  -28.8027586  -70.8027586  -32.8027586 #> [376]  -57.8027586   10.1972414   -1.8027586    7.1972414   -4.8027586 #> [381]  -45.8027586   17.1972414   16.1972414  -48.8027586  -53.8027586 #> [386]  -36.8027586  -48.8027586  -32.8027586   75.1972414   55.1972414 #> [391]  -55.8027586  -52.8027586  -20.8027586    8.1972414  -18.8027586 #> [396]   94.1972414   40.1972414    7.1972414   99.1972414    6.1972414 #> [401]   17.1972414  -41.8027586   33.1972414  -11.8027586  -50.8027586 #> [406]  -14.8027586  -11.8027586   44.1972414  -16.8027586   32.1972414 #> [411]   47.1972414  -31.8027586   27.1972414    0.1972414    6.1972414 #> [416]  -10.8027586  -35.8027586    2.1972414   19.1972414   18.1972414 #> [421]   13.1972414   21.1972414  -44.8027586   69.1972414   35.1972414 #> [426]  -28.8027586  -19.8027586  -73.8027586   20.1972414    2.1972414 #> [431]   -3.8027586    7.1972414  -14.8027586   30.1972414  -16.8027586 #> [436]   13.1972414  -11.8027586 -114.8027586    0.1972414   -4.8027586 #> [441]    7.1972414  -86.8027586  -19.8027586   11.1972414   30.1972414 #> [446]   36.1972414  -15.8027586   -3.8027586   21.1972414   43.1972414 #> [451]   40.1972414  -31.8027586  -33.8027586   -9.8027586  -29.8027586 #> [456]  -36.8027586   13.1972414   61.1972414   47.1972414  -35.8027586 #> [461]  -23.8027586   18.1972414  -35.8027586   42.1972414  -14.8027586 #> [466]  -24.8027586  -23.8027586  -55.8027586   63.1972414  -21.8027586 #> [471]  -65.8027586  -42.8027586    0.1972414  -63.8027586   -4.8027586 #> [476]  -12.8027586  -23.8027586   12.1972414   -1.8027586   78.1972414 #> [481]   -5.8027586  -11.8027586   25.1972414  -43.8027586  -31.8027586 #> [486]    7.1972414  -88.8027586   30.1972414   45.1972414  -23.8027586 #> [491]  -57.8027586   -9.8027586   39.1972414   22.1972414   15.1972414 #> [496]  -17.8027586   48.1972414   -5.8027586  -38.8027586    3.1972414 #> [501]   23.1972414   24.1972414  -13.8027586   32.1972414   -2.8027586 #> [506]           NA   90.1972414   14.1972414   35.1972414   25.1972414 #> [511]    6.1972414    6.1972414    0.1972414   26.1972414  -35.8027586 #> [516]  -30.8027586   10.1972414   17.1972414  -12.8027586  -21.8027586 #> [521]  -48.8027586  -26.8027586  -20.8027586    1.1972414   15.1972414 #> [526]  -57.8027586   -4.8027586   36.1972414  -17.8027586  -12.8027586 #> [531]  -16.8027586  -27.8027586   60.1972414   -4.8027586   41.1972414 #> [536]  -64.8027586    7.1972414   22.1972414   18.1972414   21.1972414 #> [541]  -15.8027586  -21.8027586   31.1972414    4.1972414           NA #> [546]    7.1972414  -22.8027586   16.1972414    4.1972414   26.1972414 #> [551]  -30.8027586    5.1972414   23.1972414  -38.8027586   29.1972414 #> [556]  -33.8027586   28.1972414           NA   -0.8027586   12.1972414 #> [561]   -4.8027586   17.1972414  -13.8027586   -7.8027586  -37.8027586 #> [566]   -2.8027586   29.1972414  -79.8027586   14.1972414  -13.8027586 #> [571]    6.1972414   -1.8027586   25.1972414  -48.8027586   33.1972414 #> [576]  -14.8027586    5.1972414  -14.8027586   -2.8027586   18.1972414 #> [581]  -50.8027586  -39.8027586  -16.8027586   90.1972414   -4.8027586 #> [586]  -42.8027586   16.1972414    2.1972414   -3.8027586   30.1972414 #> [591]   -4.8027586   42.1972414  -61.8027586  -16.8027586  -15.8027586 #> [596]  -47.8027586   39.1972414   33.1972414   -3.8027586   27.1972414 #> [601]  -36.8027586   38.1972414  -25.8027586  -31.8027586  -47.8027586 #> [606]   -4.8027586   41.1972414  -20.8027586    9.1972414   -3.8027586 #> [611]  -42.8027586  -10.8027586  -23.8027586   43.1972414  -19.8027586 #> [616]  -33.8027586   35.1972414   21.1972414   30.1972414   22.1972414 #> [621]  -10.8027586  -25.8027586   56.1972414  -31.8027586   20.1972414 #> [626]   71.1972414   -4.8027586    5.1972414    7.1972414   -1.8027586 #> [631]  -33.8027586   30.1972414  -26.8027586  -25.8027586  -39.8027586 #> [636]    4.1972414   46.1972414   -9.8027586   24.1972414    8.1972414 #> [641]  -25.8027586   92.1972414   30.1972414   -1.8027586  -13.8027586 #> [646]   35.1972414  -17.8027586  -22.8027586  -50.8027586   -9.8027586 #> [651]   12.1972414   43.1972414   26.1972414   -1.8027586  -26.8027586 #> [656]  -42.8027586  -32.8027586   42.1972414   15.1972414  -11.8027586 #> [661]  -34.8027586   -2.8027586  -48.8027586   26.1972414    6.1972414 #> [666]  -20.8027586  -29.8027586    7.1972414   45.1972414   13.1972414 #> [671]  -39.8027586    2.1972414  -23.8027586   10.1972414   62.1972414 #> [676]    2.1972414   57.1972414  -36.8027586  -46.8027586  -19.8027586 #> [681]   45.1972414  -13.8027586   10.1972414  -29.8027586  -13.8027586 #> [686]  -48.8027586  -16.8027586    5.1972414  -34.8027586   -9.8027586 #> [691]  -41.8027586    6.1972414   52.1972414   42.1972414  -56.8027586 #> [696]   20.1972414  -33.8027586   12.1972414   -5.8027586  -15.8027586 #> [701]   -8.8027586  -36.8027586   13.1972414  -22.8027586   25.1972414 #> [706]  -40.8027586   -2.8027586   34.1972414  -13.8027586   -4.8027586 #> [711]   35.1972414  -32.8027586   27.1972414   30.1972414   -5.8027586 #> [716]  -54.8027586    2.1972414   19.1972414   15.1972414  -25.8027586 #> [721]   55.1972414  -68.8027586   56.1972414    7.1972414  -32.8027586 #> [726]   12.1972414  -15.8027586  -39.8027586   22.1972414    1.1972414 #> [731]   -1.8027586   18.1972414   -3.8027586   29.1972414   21.1972414  # Use a polynomial in regress regress(\"mean\", atrophy ~ polynomial(age, degree = 2), data = mri) #>  #> Call: #> regress(fnctl = \"mean\", formula = atrophy ~ polynomial(age, degree = 2),  #>     data = mri) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -36.828  -9.063  -1.018   7.816  50.887  #>  #> Coefficients: #>                                    Estimate  Naive SE  Robust SE    95%L       #> [1] Intercept                        35.34     0.5598    0.5622        34.24   #>     polynomial(age, degree = 2)                                                #> [2]    age^1                         0.5869    0.1009   0.09808       0.3943   #> [3]    age^2                        0.02159   0.01099   0.01150     -9.897e-04 #>                                    95%H         F stat    df Pr(>F)    #> [1] Intercept                        36.45        3952.13 1  < 0.00005 #>     polynomial(age, degree = 2)                     32.91 2  < 0.00005 #> [2]    age^1                         0.7794         35.80 1  < 0.00005 #> [3]    age^2                        0.04417          3.52 1    0.0609  #>  #>  Polynomial terms calculated from age, centered at 74.566  #>  #> Residual standard error: 12.33 on 732 degrees of freedom #> Multiple R-squared:  0.09148,\tAdjusted R-squared:  0.089  #> F-statistic: 32.91 on 2 and 732 DF,  p-value: 2.06e-14 #>"},{"path":"https://statdivlab.github.io/rigr/reference/predict.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction Intervals for uRegress objects — predict.uRegress","title":"Prediction Intervals for uRegress objects — predict.uRegress","text":"Produces prediction intervals objects class uRegress.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/predict.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction Intervals for uRegress objects — predict.uRegress","text":"","code":"# S3 method for class 'uRegress' predict(object, interval = \"prediction\", level = 0.95, ...)"},{"path":"https://statdivlab.github.io/rigr/reference/predict.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction Intervals for uRegress objects — predict.uRegress","text":"object object class uRegress. interval Type interval calculation level Tolerance/confidence level ... arguments pass appropriate predict function class object$fit. See predict.lm, predict.glm details.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/predict.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction Intervals for uRegress objects — predict.uRegress","text":"Returns matrix fitted value prediction interval entered X.","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/reference/predict.uRegress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction Intervals for uRegress objects — predict.uRegress","text":"","code":"# Loading required libraries library(survival) library(sandwich)  # Reading in a dataset data(mri)  # Linear regression of LDL on age (with robust SE by default) testReg <- regress (\"mean\", ldl~age, data = mri)  # 95% Prediction Interval for age 50 predict(testReg) #> Warning: predictions on current data refer to _future_ responses #>          fit      lwr      upr #> 1   126.0344 59.97112 192.0977 #> 2   125.2227 59.10603 191.3393 #> 3   124.4110 57.99308 190.8288 #> 4   126.0344 59.97112 192.0977 #> 5   126.2148 60.12959 192.3000 #> 6   126.0344 59.97112 192.0977 #> 7   125.7638 59.71039 191.8172 #> 8   125.7638 59.71039 191.8172 #> 9   126.4853 60.34429 192.6264 #> 10  126.2148 60.12959 192.3000 #> 11  124.7717 58.51818 191.0253 #> 12  126.1246 60.05189 192.1973 #> 13  125.7638 59.71039 191.8172 #> 14  126.2148 60.12959 192.3000 #> 15  125.4031 59.31976 191.4864 #> 16  126.2148 60.12959 192.3000 #> 17  125.2227 59.10603 191.3393 #> 18  126.0344 59.97112 192.0977 #> 19  126.3952 60.27578 192.5145 #> 20  126.4853 60.34429 192.6264 #> 21  124.9521 58.76248 191.1417 #> 22  126.1246 60.05189 192.1973 #> 23  126.2148 60.12959 192.3000 #> 24  126.1246 60.05189 192.1973 #> 25  124.5012 58.12890 190.8734 #> 26  125.4933 59.42202 191.5645 #> 27  126.1246 60.05189 192.1973 #> 28  124.7717 58.51818 191.0253 #> 29  126.1246 60.05189 192.1973 #> 30  126.2148 60.12959 192.3000 #> 31  126.1246 60.05189 192.1973 #> 32  126.2148 60.12959 192.3000 #> 33  125.9442 59.88728 192.0011 #> 34  125.9442 59.88728 192.0011 #> 35  126.4853 60.34429 192.6264 #> 36  125.3129 59.21443 191.4113 #> 37  125.8540 59.80037 191.9076 #> 38  125.7638 59.71039 191.8172 #> 39  126.2148 60.12959 192.3000 #> 40  126.0344 59.97112 192.0977 #> 41  125.2227 59.10603 191.3393 #> 42  126.2148 60.12959 192.3000 #> 43  126.1246 60.05189 192.1973 #> 44  126.2148 60.12959 192.3000 #> 45  126.3050 60.20422 192.4057 #> 46  125.1325 58.99457 191.2704 #> 47  125.8540 59.80037 191.9076 #> 48  125.8540 59.80037 191.9076 #> 49  126.0344 59.97112 192.0977 #> 50  126.3952 60.27578 192.5145 #> 51  125.9442 59.88728 192.0011 #> 52  124.9521 58.76248 191.1417 #> 53  125.4031 59.31976 191.4864 #> 54  125.6736 59.61734 191.7299 #> 55  124.7717 58.51818 191.0253 #> 56  126.1246 60.05189 192.1973 #> 57  126.4853 60.34429 192.6264 #> 58  125.7638 59.71039 191.8172 #> 59  126.0344 59.97112 192.0977 #> 60  125.7638 59.71039 191.8172 #> 61  125.4933 59.42202 191.5645 #> 62  126.2148 60.12959 192.3000 #> 63  125.8540 59.80037 191.9076 #> 64  126.3952 60.27578 192.5145 #> 65  125.9442 59.88728 192.0011 #> 66  126.2148 60.12959 192.3000 #> 67  125.8540 59.80037 191.9076 #> 68  124.7717 58.51818 191.0253 #> 69  126.2148 60.12959 192.3000 #> 70  126.0344 59.97112 192.0977 #> 71  126.0344 59.97112 192.0977 #> 72  125.6736 59.61734 191.7299 #> 73  126.3952 60.27578 192.5145 #> 74  126.2148 60.12959 192.3000 #> 75  125.9442 59.88728 192.0011 #> 76  125.4031 59.31976 191.4864 #> 77  126.0344 59.97112 192.0977 #> 78  126.3952 60.27578 192.5145 #> 79  126.1246 60.05189 192.1973 #> 80  126.4853 60.34429 192.6264 #> 81  126.1246 60.05189 192.1973 #> 82  126.3952 60.27578 192.5145 #> 83  125.2227 59.10603 191.3393 #> 84  125.0423 58.88006 191.2045 #> 85  125.9442 59.88728 192.0011 #> 86  125.4031 59.31976 191.4864 #> 87  126.3050 60.20422 192.4057 #> 88  125.1325 58.99457 191.2704 #> 89  125.5834 59.52122 191.6457 #> 90  124.9521 58.76248 191.1417 #> 91  125.2227 59.10603 191.3393 #> 92  125.0423 58.88006 191.2045 #> 93  125.3129 59.21443 191.4113 #> 94  125.6736 59.61734 191.7299 #> 95  125.7638 59.71039 191.8172 #> 96  125.4031 59.31976 191.4864 #> 97  125.7638 59.71039 191.8172 #> 98  126.0344 59.97112 192.0977 #> 99  125.7638 59.71039 191.8172 #> 100 125.4031 59.31976 191.4864 #> 101 126.0344 59.97112 192.0977 #> 102 125.6736 59.61734 191.7299 #> 103 126.4853 60.34429 192.6264 #> 104 125.7638 59.71039 191.8172 #> 105 125.4031 59.31976 191.4864 #> 106 124.8619 58.64185 191.0820 #> 107 126.3050 60.20422 192.4057 #> 108 125.4031 59.31976 191.4864 #> 109 124.6815 58.39145 190.9716 #> 110 125.6736 59.61734 191.7299 #> 111 125.2227 59.10603 191.3393 #> 112 126.1246 60.05189 192.1973 #> 113 125.8540 59.80037 191.9076 #> 114 126.2148 60.12959 192.3000 #> 115 126.4853 60.34429 192.6264 #> 116 125.8540 59.80037 191.9076 #> 117 126.4853 60.34429 192.6264 #> 118 126.2148 60.12959 192.3000 #> 119 125.8540 59.80037 191.9076 #> 120 126.1246 60.05189 192.1973 #> 121 126.1246 60.05189 192.1973 #> 122 125.3129 59.21443 191.4113 #> 123 126.4853 60.34429 192.6264 #> 124 126.1246 60.05189 192.1973 #> 125 125.6736 59.61734 191.7299 #> 126 125.2227 59.10603 191.3393 #> 127 125.4933 59.42202 191.5645 #> 128 125.1325 58.99457 191.2704 #> 129 126.1246 60.05189 192.1973 #> 131 125.4031 59.31976 191.4864 #> 132 126.3952 60.27578 192.5145 #> 133 125.6736 59.61734 191.7299 #> 134 126.1246 60.05189 192.1973 #> 135 126.3952 60.27578 192.5145 #> 136 125.6736 59.61734 191.7299 #> 137 126.3050 60.20422 192.4057 #> 138 126.4853 60.34429 192.6264 #> 139 124.8619 58.64185 191.0820 #> 140 125.4933 59.42202 191.5645 #> 141 126.3952 60.27578 192.5145 #> 142 126.3952 60.27578 192.5145 #> 143 125.0423 58.88006 191.2045 #> 144 126.0344 59.97112 192.0977 #> 145 125.7638 59.71039 191.8172 #> 146 126.4853 60.34429 192.6264 #> 147 126.0344 59.97112 192.0977 #> 148 124.8619 58.64185 191.0820 #> 149 125.4031 59.31976 191.4864 #> 150 125.6736 59.61734 191.7299 #> 151 126.5755 60.40973 192.7413 #> 152 126.2148 60.12959 192.3000 #> 153 126.1246 60.05189 192.1973 #> 154 126.1246 60.05189 192.1973 #> 155 125.6736 59.61734 191.7299 #> 156 126.3050 60.20422 192.4057 #> 157 125.9442 59.88728 192.0011 #> 159 126.4853 60.34429 192.6264 #> 160 126.2148 60.12959 192.3000 #> 161 125.3129 59.21443 191.4113 #> 162 126.1246 60.05189 192.1973 #> 163 125.4933 59.42202 191.5645 #> 164 125.8540 59.80037 191.9076 #> 165 124.4110 57.99308 190.8288 #> 166 125.9442 59.88728 192.0011 #> 167 126.2148 60.12959 192.3000 #> 168 126.0344 59.97112 192.0977 #> 169 126.3952 60.27578 192.5145 #> 170 126.3952 60.27578 192.5145 #> 171 125.0423 58.88006 191.2045 #> 172 125.5834 59.52122 191.6457 #> 174 126.3050 60.20422 192.4057 #> 175 125.7638 59.71039 191.8172 #> 176 125.2227 59.10603 191.3393 #> 177 125.7638 59.71039 191.8172 #> 178 126.1246 60.05189 192.1973 #> 179 124.7717 58.51818 191.0253 #> 180 126.0344 59.97112 192.0977 #> 181 125.4031 59.31976 191.4864 #> 182 123.5993 56.63561 190.5629 #> 183 125.9442 59.88728 192.0011 #> 184 125.8540 59.80037 191.9076 #> 185 125.5834 59.52122 191.6457 #> 186 124.4110 57.99308 190.8288 #> 187 125.5834 59.52122 191.6457 #> 189 125.4933 59.42202 191.5645 #> 190 126.3050 60.20422 192.4057 #> 191 125.9442 59.88728 192.0011 #> 192 124.5913 58.26170 190.9210 #> 193 126.3050 60.20422 192.4057 #> 194 125.8540 59.80037 191.9076 #> 195 125.4933 59.42202 191.5645 #> 196 125.7638 59.71039 191.8172 #> 197 124.5012 58.12890 190.8734 #> 198 125.2227 59.10603 191.3393 #> 199 125.1325 58.99457 191.2704 #> 200 126.2148 60.12959 192.3000 #> 201 124.7717 58.51818 191.0253 #> 202 125.6736 59.61734 191.7299 #> 203 126.0344 59.97112 192.0977 #> 204 125.4031 59.31976 191.4864 #> 205 126.0344 59.97112 192.0977 #> 206 126.3050 60.20422 192.4057 #> 207 125.4933 59.42202 191.5645 #> 208 126.1246 60.05189 192.1973 #> 209 125.8540 59.80037 191.9076 #> 210 124.5913 58.26170 190.9210 #> 211 124.5012 58.12890 190.8734 #> 212 124.6815 58.39145 190.9716 #> 213 125.9442 59.88728 192.0011 #> 214 124.5012 58.12890 190.8734 #> 215 125.4933 59.42202 191.5645 #> 216 125.8540 59.80037 191.9076 #> 217 125.9442 59.88728 192.0011 #> 219 126.3952 60.27578 192.5145 #> 220 126.2148 60.12959 192.3000 #> 221 126.2148 60.12959 192.3000 #> 222 126.2148 60.12959 192.3000 #> 223 126.3050 60.20422 192.4057 #> 224 125.9442 59.88728 192.0011 #> 225 125.4031 59.31976 191.4864 #> 226 124.6815 58.39145 190.9716 #> 227 123.9600 57.26880 190.6512 #> 228 125.4933 59.42202 191.5645 #> 229 125.4031 59.31976 191.4864 #> 230 124.9521 58.76248 191.1417 #> 231 125.7638 59.71039 191.8172 #> 232 125.0423 58.88006 191.2045 #> 233 126.3050 60.20422 192.4057 #> 234 125.8540 59.80037 191.9076 #> 235 125.5834 59.52122 191.6457 #> 236 125.4933 59.42202 191.5645 #> 237 124.3208 57.85424 190.7873 #> 238 126.4853 60.34429 192.6264 #> 239 126.1246 60.05189 192.1973 #> 240 126.3952 60.27578 192.5145 #> 241 125.9442 59.88728 192.0011 #> 242 125.8540 59.80037 191.9076 #> 243 125.5834 59.52122 191.6457 #> 244 126.1246 60.05189 192.1973 #> 245 125.7638 59.71039 191.8172 #> 246 126.1246 60.05189 192.1973 #> 247 126.3050 60.20422 192.4057 #> 248 126.3050 60.20422 192.4057 #> 249 125.9442 59.88728 192.0011 #> 250 125.4031 59.31976 191.4864 #> 251 126.1246 60.05189 192.1973 #> 252 126.2148 60.12959 192.3000 #> 253 125.2227 59.10603 191.3393 #> 254 126.2148 60.12959 192.3000 #> 255 124.7717 58.51818 191.0253 #> 256 124.6815 58.39145 190.9716 #> 257 125.9442 59.88728 192.0011 #> 258 125.4933 59.42202 191.5645 #> 259 125.1325 58.99457 191.2704 #> 260 125.4031 59.31976 191.4864 #> 262 126.4853 60.34429 192.6264 #> 263 126.2148 60.12959 192.3000 #> 264 125.7638 59.71039 191.8172 #> 265 124.8619 58.64185 191.0820 #> 266 125.0423 58.88006 191.2045 #> 268 126.1246 60.05189 192.1973 #> 269 126.3050 60.20422 192.4057 #> 270 126.3952 60.27578 192.5145 #> 271 126.2148 60.12959 192.3000 #> 272 126.2148 60.12959 192.3000 #> 273 124.6815 58.39145 190.9716 #> 274 125.4031 59.31976 191.4864 #> 275 125.2227 59.10603 191.3393 #> 276 126.3050 60.20422 192.4057 #> 277 125.9442 59.88728 192.0011 #> 278 126.4853 60.34429 192.6264 #> 279 125.5834 59.52122 191.6457 #> 280 125.2227 59.10603 191.3393 #> 281 126.0344 59.97112 192.0977 #> 282 126.2148 60.12959 192.3000 #> 283 125.7638 59.71039 191.8172 #> 284 126.0344 59.97112 192.0977 #> 285 126.0344 59.97112 192.0977 #> 286 126.0344 59.97112 192.0977 #> 287 126.3050 60.20422 192.4057 #> 288 125.7638 59.71039 191.8172 #> 289 125.7638 59.71039 191.8172 #> 290 126.4853 60.34429 192.6264 #> 291 125.9442 59.88728 192.0011 #> 292 125.0423 58.88006 191.2045 #> 293 126.4853 60.34429 192.6264 #> 294 126.0344 59.97112 192.0977 #> 295 126.0344 59.97112 192.0977 #> 296 126.1246 60.05189 192.1973 #> 297 126.2148 60.12959 192.3000 #> 298 126.4853 60.34429 192.6264 #> 299 126.1246 60.05189 192.1973 #> 300 126.1246 60.05189 192.1973 #> 301 125.8540 59.80037 191.9076 #> 302 124.9521 58.76248 191.1417 #> 303 125.2227 59.10603 191.3393 #> 304 126.1246 60.05189 192.1973 #> 305 125.8540 59.80037 191.9076 #> 306 125.7638 59.71039 191.8172 #> 307 126.3050 60.20422 192.4057 #> 308 126.1246 60.05189 192.1973 #> 309 125.9442 59.88728 192.0011 #> 310 126.1246 60.05189 192.1973 #> 311 126.1246 60.05189 192.1973 #> 312 126.4853 60.34429 192.6264 #> 313 126.3050 60.20422 192.4057 #> 314 124.3208 57.85424 190.7873 #> 315 125.8540 59.80037 191.9076 #> 316 125.7638 59.71039 191.8172 #> 317 125.2227 59.10603 191.3393 #> 318 125.5834 59.52122 191.6457 #> 319 125.5834 59.52122 191.6457 #> 320 126.1246 60.05189 192.1973 #> 321 125.0423 58.88006 191.2045 #> 322 125.6736 59.61734 191.7299 #> 323 126.1246 60.05189 192.1973 #> 324 126.3952 60.27578 192.5145 #> 325 126.0344 59.97112 192.0977 #> 326 125.5834 59.52122 191.6457 #> 327 125.8540 59.80037 191.9076 #> 328 126.0344 59.97112 192.0977 #> 329 126.3952 60.27578 192.5145 #> 330 126.3050 60.20422 192.4057 #> 331 125.4933 59.42202 191.5645 #> 332 126.4853 60.34429 192.6264 #> 333 126.2148 60.12959 192.3000 #> 334 125.3129 59.21443 191.4113 #> 335 126.2148 60.12959 192.3000 #> 336 126.4853 60.34429 192.6264 #> 337 125.6736 59.61734 191.7299 #> 338 126.4853 60.34429 192.6264 #> 339 125.9442 59.88728 192.0011 #> 340 125.9442 59.88728 192.0011 #> 341 125.8540 59.80037 191.9076 #> 342 126.3050 60.20422 192.4057 #> 343 125.8540 59.80037 191.9076 #> 344 126.1246 60.05189 192.1973 #> 345 125.1325 58.99457 191.2704 #> 346 125.4031 59.31976 191.4864 #> 347 125.5834 59.52122 191.6457 #> 348 125.4031 59.31976 191.4864 #> 349 124.6815 58.39145 190.9716 #> 350 125.9442 59.88728 192.0011 #> 351 125.4031 59.31976 191.4864 #> 352 125.4933 59.42202 191.5645 #> 353 126.0344 59.97112 192.0977 #> 354 125.4031 59.31976 191.4864 #> 355 126.3952 60.27578 192.5145 #> 356 124.0502 57.41965 190.6808 #> 357 126.1246 60.05189 192.1973 #> 358 125.8540 59.80037 191.9076 #> 359 126.3952 60.27578 192.5145 #> 360 124.9521 58.76248 191.1417 #> 361 126.0344 59.97112 192.0977 #> 362 126.5755 60.40973 192.7413 #> 363 126.1246 60.05189 192.1973 #> 364 125.4933 59.42202 191.5645 #> 365 126.1246 60.05189 192.1973 #> 366 124.9521 58.76248 191.1417 #> 367 126.4853 60.34429 192.6264 #> 368 125.5834 59.52122 191.6457 #> 369 125.8540 59.80037 191.9076 #> 370 126.0344 59.97112 192.0977 #> 371 126.2148 60.12959 192.3000 #> 372 124.9521 58.76248 191.1417 #> 373 126.1246 60.05189 192.1973 #> 374 125.8540 59.80037 191.9076 #> 375 125.8540 59.80037 191.9076 #> 376 124.7717 58.51818 191.0253 #> 377 125.8540 59.80037 191.9076 #> 378 125.1325 58.99457 191.2704 #> 379 125.8540 59.80037 191.9076 #> 380 125.4933 59.42202 191.5645 #> 381 125.7638 59.71039 191.8172 #> 382 126.3050 60.20422 192.4057 #> 383 125.4031 59.31976 191.4864 #> 384 125.7638 59.71039 191.8172 #> 385 125.3129 59.21443 191.4113 #> 386 125.7638 59.71039 191.8172 #> 387 126.3952 60.27578 192.5145 #> 388 126.0344 59.97112 192.0977 #> 389 124.9521 58.76248 191.1417 #> 390 125.7638 59.71039 191.8172 #> 391 126.2148 60.12959 192.3000 #> 392 125.7638 59.71039 191.8172 #> 393 126.4853 60.34429 192.6264 #> 394 125.5834 59.52122 191.6457 #> 395 125.6736 59.61734 191.7299 #> 396 125.6736 59.61734 191.7299 #> 397 125.7638 59.71039 191.8172 #> 398 126.2148 60.12959 192.3000 #> 399 125.4031 59.31976 191.4864 #> 400 126.1246 60.05189 192.1973 #> 401 125.8540 59.80037 191.9076 #> 402 125.7638 59.71039 191.8172 #> 403 126.3050 60.20422 192.4057 #> 404 126.5755 60.40973 192.7413 #> 405 125.5834 59.52122 191.6457 #> 406 125.3129 59.21443 191.4113 #> 407 125.4933 59.42202 191.5645 #> 408 126.3050 60.20422 192.4057 #> 409 125.8540 59.80037 191.9076 #> 410 125.5834 59.52122 191.6457 #> 411 125.5834 59.52122 191.6457 #> 412 125.4933 59.42202 191.5645 #> 413 125.7638 59.71039 191.8172 #> 414 125.9442 59.88728 192.0011 #> 415 126.3050 60.20422 192.4057 #> 416 126.2148 60.12959 192.3000 #> 417 125.1325 58.99457 191.2704 #> 418 126.3952 60.27578 192.5145 #> 419 126.1246 60.05189 192.1973 #> 420 126.0344 59.97112 192.0977 #> 421 125.8540 59.80037 191.9076 #> 422 126.4853 60.34429 192.6264 #> 423 125.8540 59.80037 191.9076 #> 424 125.9442 59.88728 192.0011 #> 425 125.5834 59.52122 191.6457 #> 426 126.4853 60.34429 192.6264 #> 427 126.1246 60.05189 192.1973 #> 428 125.3129 59.21443 191.4113 #> 429 126.3050 60.20422 192.4057 #> 430 124.9521 58.76248 191.1417 #> 431 125.8540 59.80037 191.9076 #> 432 126.3050 60.20422 192.4057 #> 433 126.2148 60.12959 192.3000 #> 434 125.0423 58.88006 191.2045 #> 435 124.8619 58.64185 191.0820 #> 436 125.8540 59.80037 191.9076 #> 437 125.8540 59.80037 191.9076 #> 438 125.5834 59.52122 191.6457 #> 439 126.2148 60.12959 192.3000 #> 440 125.7638 59.71039 191.8172 #> 441 124.4110 57.99308 190.8288 #> 442 125.7638 59.71039 191.8172 #> 443 126.0344 59.97112 192.0977 #> 444 125.3129 59.21443 191.4113 #> 445 126.1246 60.05189 192.1973 #> 446 125.2227 59.10603 191.3393 #> 447 126.1246 60.05189 192.1973 #> 448 126.0344 59.97112 192.0977 #> 449 125.9442 59.88728 192.0011 #> 450 126.2148 60.12959 192.3000 #> 451 126.3050 60.20422 192.4057 #> 452 126.3952 60.27578 192.5145 #> 453 125.9442 59.88728 192.0011 #> 454 125.4933 59.42202 191.5645 #> 455 125.3129 59.21443 191.4113 #> 456 126.1246 60.05189 192.1973 #> 457 126.2148 60.12959 192.3000 #> 458 125.7638 59.71039 191.8172 #> 459 125.5834 59.52122 191.6457 #> 460 125.4933 59.42202 191.5645 #> 461 125.4933 59.42202 191.5645 #> 462 126.2148 60.12959 192.3000 #> 463 125.3129 59.21443 191.4113 #> 464 126.3050 60.20422 192.4057 #> 465 125.5834 59.52122 191.6457 #> 466 125.6736 59.61734 191.7299 #> 467 125.4933 59.42202 191.5645 #> 468 126.0344 59.97112 192.0977 #> 469 126.1246 60.05189 192.1973 #> 470 125.9442 59.88728 192.0011 #> 471 125.3129 59.21443 191.4113 #> 472 125.5834 59.52122 191.6457 #> 473 125.6736 59.61734 191.7299 #> 474 125.7638 59.71039 191.8172 #> 475 126.2148 60.12959 192.3000 #> 476 126.0344 59.97112 192.0977 #> 477 125.6736 59.61734 191.7299 #> 478 124.8619 58.64185 191.0820 #> 479 125.7638 59.71039 191.8172 #> 480 125.8540 59.80037 191.9076 #> 481 126.3952 60.27578 192.5145 #> 482 125.0423 58.88006 191.2045 #> 483 126.0344 59.97112 192.0977 #> 484 125.6736 59.61734 191.7299 #> 485 125.4933 59.42202 191.5645 #> 486 125.7638 59.71039 191.8172 #> 487 125.9442 59.88728 192.0011 #> 488 125.5834 59.52122 191.6457 #> 489 125.1325 58.99457 191.2704 #> 490 125.7638 59.71039 191.8172 #> 491 126.3050 60.20422 192.4057 #> 492 125.8540 59.80037 191.9076 #> 493 125.9442 59.88728 192.0011 #> 494 125.6736 59.61734 191.7299 #> 495 125.5834 59.52122 191.6457 #> 496 126.0344 59.97112 192.0977 #> 497 126.0344 59.97112 192.0977 #> 498 125.9442 59.88728 192.0011 #> 499 126.3952 60.27578 192.5145 #> 500 125.8540 59.80037 191.9076 #> 501 126.0344 59.97112 192.0977 #> 502 126.4853 60.34429 192.6264 #> 503 126.3952 60.27578 192.5145 #> 504 126.3952 60.27578 192.5145 #> 505 126.1246 60.05189 192.1973 #> 507 125.7638 59.71039 191.8172 #> 508 126.2148 60.12959 192.3000 #> 509 126.2148 60.12959 192.3000 #> 510 125.8540 59.80037 191.9076 #> 511 125.9442 59.88728 192.0011 #> 512 125.9442 59.88728 192.0011 #> 513 124.8619 58.64185 191.0820 #> 514 126.3952 60.27578 192.5145 #> 515 126.3952 60.27578 192.5145 #> 516 125.2227 59.10603 191.3393 #> 517 125.8540 59.80037 191.9076 #> 518 125.5834 59.52122 191.6457 #> 519 125.7638 59.71039 191.8172 #> 520 125.4933 59.42202 191.5645 #> 521 125.9442 59.88728 192.0011 #> 522 125.3129 59.21443 191.4113 #> 523 125.2227 59.10603 191.3393 #> 524 125.1325 58.99457 191.2704 #> 525 126.0344 59.97112 192.0977 #> 526 125.9442 59.88728 192.0011 #> 527 125.8540 59.80037 191.9076 #> 528 124.8619 58.64185 191.0820 #> 529 125.4031 59.31976 191.4864 #> 530 125.5834 59.52122 191.6457 #> 531 125.7638 59.71039 191.8172 #> 532 126.1246 60.05189 192.1973 #> 533 125.9442 59.88728 192.0011 #> 534 125.3129 59.21443 191.4113 #> 535 125.7638 59.71039 191.8172 #> 536 126.1246 60.05189 192.1973 #> 537 126.0344 59.97112 192.0977 #> 538 126.1246 60.05189 192.1973 #> 539 126.2148 60.12959 192.3000 #> 540 126.0344 59.97112 192.0977 #> 541 125.4933 59.42202 191.5645 #> 542 125.9442 59.88728 192.0011 #> 543 126.3952 60.27578 192.5145 #> 544 126.4853 60.34429 192.6264 #> 546 125.9442 59.88728 192.0011 #> 547 125.8540 59.80037 191.9076 #> 548 125.2227 59.10603 191.3393 #> 549 125.4031 59.31976 191.4864 #> 550 125.4031 59.31976 191.4864 #> 551 126.1246 60.05189 192.1973 #> 552 126.3952 60.27578 192.5145 #> 553 125.1325 58.99457 191.2704 #> 554 125.3129 59.21443 191.4113 #> 555 126.3050 60.20422 192.4057 #> 556 125.9442 59.88728 192.0011 #> 557 125.5834 59.52122 191.6457 #> 559 126.0344 59.97112 192.0977 #> 560 125.9442 59.88728 192.0011 #> 561 125.8540 59.80037 191.9076 #> 562 125.6736 59.61734 191.7299 #> 563 125.9442 59.88728 192.0011 #> 564 125.8540 59.80037 191.9076 #> 565 125.9442 59.88728 192.0011 #> 566 125.5834 59.52122 191.6457 #> 567 125.9442 59.88728 192.0011 #> 568 126.1246 60.05189 192.1973 #> 569 125.5834 59.52122 191.6457 #> 570 125.5834 59.52122 191.6457 #> 571 126.1246 60.05189 192.1973 #> 572 126.2148 60.12959 192.3000 #> 573 124.8619 58.64185 191.0820 #> 574 125.8540 59.80037 191.9076 #> 575 125.7638 59.71039 191.8172 #> 576 125.8540 59.80037 191.9076 #> 577 126.1246 60.05189 192.1973 #> 578 126.1246 60.05189 192.1973 #> 579 126.3952 60.27578 192.5145 #> 580 125.6736 59.61734 191.7299 #> 581 126.4853 60.34429 192.6264 #> 582 125.5834 59.52122 191.6457 #> 583 126.3050 60.20422 192.4057 #> 584 124.6815 58.39145 190.9716 #> 585 126.2148 60.12959 192.3000 #> 586 125.9442 59.88728 192.0011 #> 587 124.5012 58.12890 190.8734 #> 588 125.9442 59.88728 192.0011 #> 589 125.9442 59.88728 192.0011 #> 590 126.0344 59.97112 192.0977 #> 591 126.3050 60.20422 192.4057 #> 592 125.5834 59.52122 191.6457 #> 593 125.8540 59.80037 191.9076 #> 594 125.4031 59.31976 191.4864 #> 595 125.5834 59.52122 191.6457 #> 596 126.1246 60.05189 192.1973 #> 597 126.3952 60.27578 192.5145 #> 598 126.1246 60.05189 192.1973 #> 599 126.2148 60.12959 192.3000 #> 600 126.0344 59.97112 192.0977 #> 601 126.0344 59.97112 192.0977 #> 602 126.2148 60.12959 192.3000 #> 603 126.0344 59.97112 192.0977 #> 604 125.9442 59.88728 192.0011 #> 605 126.0344 59.97112 192.0977 #> 606 125.7638 59.71039 191.8172 #> 607 125.3129 59.21443 191.4113 #> 608 125.4933 59.42202 191.5645 #> 609 125.9442 59.88728 192.0011 #> 610 125.2227 59.10603 191.3393 #> 611 124.7717 58.51818 191.0253 #> 612 126.1246 60.05189 192.1973 #> 613 125.8540 59.80037 191.9076 #> 614 125.8540 59.80037 191.9076 #> 615 125.6736 59.61734 191.7299 #> 616 126.2148 60.12959 192.3000 #> 617 126.1246 60.05189 192.1973 #> 618 126.3050 60.20422 192.4057 #> 619 125.0423 58.88006 191.2045 #> 620 126.4853 60.34429 192.6264 #> 621 126.1246 60.05189 192.1973 #> 622 125.9442 59.88728 192.0011 #> 623 126.1246 60.05189 192.1973 #> 624 126.3952 60.27578 192.5145 #> 625 126.1246 60.05189 192.1973 #> 626 126.2148 60.12959 192.3000 #> 627 126.1246 60.05189 192.1973 #> 628 126.3952 60.27578 192.5145 #> 629 125.7638 59.71039 191.8172 #> 630 125.4031 59.31976 191.4864 #> 631 126.1246 60.05189 192.1973 #> 632 126.0344 59.97112 192.0977 #> 633 126.2148 60.12959 192.3000 #> 634 126.3050 60.20422 192.4057 #> 635 126.2148 60.12959 192.3000 #> 636 125.7638 59.71039 191.8172 #> 637 126.1246 60.05189 192.1973 #> 638 126.3952 60.27578 192.5145 #> 639 125.4933 59.42202 191.5645 #> 640 125.4031 59.31976 191.4864 #> 641 125.9442 59.88728 192.0011 #> 642 125.5834 59.52122 191.6457 #> 643 125.8540 59.80037 191.9076 #> 644 125.3129 59.21443 191.4113 #> 645 126.3050 60.20422 192.4057 #> 646 125.8540 59.80037 191.9076 #> 647 125.8540 59.80037 191.9076 #> 648 125.4031 59.31976 191.4864 #> 649 126.2148 60.12959 192.3000 #> 650 125.3129 59.21443 191.4113 #> 651 126.4853 60.34429 192.6264 #> 652 126.1246 60.05189 192.1973 #> 653 125.3129 59.21443 191.4113 #> 654 125.9442 59.88728 192.0011 #> 655 125.5834 59.52122 191.6457 #> 656 126.0344 59.97112 192.0977 #> 657 125.4933 59.42202 191.5645 #> 658 126.3050 60.20422 192.4057 #> 659 126.0344 59.97112 192.0977 #> 660 126.0344 59.97112 192.0977 #> 661 125.8540 59.80037 191.9076 #> 662 125.8540 59.80037 191.9076 #> 663 126.1246 60.05189 192.1973 #> 664 125.7638 59.71039 191.8172 #> 665 125.4933 59.42202 191.5645 #> 666 125.4031 59.31976 191.4864 #> 667 126.4853 60.34429 192.6264 #> 668 125.9442 59.88728 192.0011 #> 669 126.3952 60.27578 192.5145 #> 670 126.0344 59.97112 192.0977 #> 671 125.3129 59.21443 191.4113 #> 672 125.6736 59.61734 191.7299 #> 673 126.0344 59.97112 192.0977 #> 674 125.5834 59.52122 191.6457 #> 675 126.2148 60.12959 192.3000 #> 676 126.1246 60.05189 192.1973 #> 677 126.3050 60.20422 192.4057 #> 678 125.8540 59.80037 191.9076 #> 679 126.0344 59.97112 192.0977 #> 680 126.2148 60.12959 192.3000 #> 681 126.2148 60.12959 192.3000 #> 682 125.3129 59.21443 191.4113 #> 683 125.6736 59.61734 191.7299 #> 684 125.4933 59.42202 191.5645 #> 685 126.3952 60.27578 192.5145 #> 686 125.7638 59.71039 191.8172 #> 687 125.7638 59.71039 191.8172 #> 688 125.9442 59.88728 192.0011 #> 689 126.4853 60.34429 192.6264 #> 690 125.3129 59.21443 191.4113 #> 691 126.3952 60.27578 192.5145 #> 692 125.4933 59.42202 191.5645 #> 693 126.0344 59.97112 192.0977 #> 694 125.0423 58.88006 191.2045 #> 695 125.2227 59.10603 191.3393 #> 696 126.1246 60.05189 192.1973 #> 697 125.8540 59.80037 191.9076 #> 698 126.1246 60.05189 192.1973 #> 699 126.0344 59.97112 192.0977 #> 700 126.1246 60.05189 192.1973 #> 701 125.7638 59.71039 191.8172 #> 702 126.2148 60.12959 192.3000 #> 703 125.4933 59.42202 191.5645 #> 704 125.4933 59.42202 191.5645 #> 705 126.2148 60.12959 192.3000 #> 706 125.1325 58.99457 191.2704 #> 707 125.4933 59.42202 191.5645 #> 708 125.1325 58.99457 191.2704 #> 709 126.6657 60.47212 192.8593 #> 710 126.1246 60.05189 192.1973 #> 711 126.2148 60.12959 192.3000 #> 712 125.4933 59.42202 191.5645 #> 713 125.7638 59.71039 191.8172 #> 714 126.3050 60.20422 192.4057 #> 715 125.4031 59.31976 191.4864 #> 716 126.0344 59.97112 192.0977 #> 717 124.6815 58.39145 190.9716 #> 718 125.6736 59.61734 191.7299 #> 719 125.7638 59.71039 191.8172 #> 720 125.3129 59.21443 191.4113 #> 721 125.7638 59.71039 191.8172 #> 722 124.2306 57.71238 190.7488 #> 723 126.6657 60.47212 192.8593 #> 724 125.5834 59.52122 191.6457 #> 725 125.9442 59.88728 192.0011 #> 726 124.9521 58.76248 191.1417 #> 727 124.5913 58.26170 190.9210 #> 728 125.4933 59.42202 191.5645 #> 729 125.4933 59.42202 191.5645 #> 730 125.9442 59.88728 192.0011 #> 731 125.6736 59.61734 191.7299 #> 732 126.1246 60.05189 192.1973 #> 733 125.1325 58.99457 191.2704 #> 734 126.0344 59.97112 192.0977 #> 735 126.1246 60.05189 192.1973"},{"path":"https://statdivlab.github.io/rigr/reference/proptest.html","id":null,"dir":"Reference","previous_headings":"","what":"Test of proportions with improved layout — proptest","title":"Test of proportions with improved layout — proptest","text":"Performs one- two-sample test proportions using data. test can approximate exact.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/proptest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test of proportions with improved layout — proptest","text":"","code":"proptest(   var1,   var2 = NULL,   by = NULL,   exact = FALSE,   null.hypoth = ifelse(is.null(var2) && is.null(by), 0.5, 0),   alternative = \"two.sided\",   conf.level = 0.95,   correct = FALSE,   more.digits = 0 )"},{"path":"https://statdivlab.github.io/rigr/reference/proptest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test of proportions with improved layout — proptest","text":"var1 (non-empty) vector binary numeric (0-1), binary factor, logical data values var2 optional (non-empty) vector binary numeric (0-1), binary factor, logical data values variable equal length var1 two outcomes (numeric factor). used define strata prop test var1. exact true, performs test equality proportions using exact binomial probabilities. null.hypoth number specifying null hypothesis mean (difference means performing two-sample test). Defaults 0.5 one-sample test 0 two-sample test. alternative string: one \"less\", \"two.sided\", \"greater\" specifying form test. Defaults two-sided test. conf.level confidence level test. Defaults 0.95. correct logical indicating whether perform continuity correction .digits numeric value specifying whether display fewer digits output. Non-integers automatically rounded .","code":""},{"path":"https://statdivlab.github.io/rigr/reference/proptest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test of proportions with improved layout — proptest","text":"list class proptest. print method lays information easy--read format. tab formatted table descriptive inferential results (total number observations, number missing observations, sample proportion, standard error proportion estimate), along confidence interval underlying proportion. zstat value test statistic, using approximate test. pval p-value test var1 user-supplied first data vector. var2 user-supplied second data vector. user-supplied stratification variable. par vector information type test (null hypothesis, alternative hypothesis, etc.)","code":""},{"path":"https://statdivlab.github.io/rigr/reference/proptest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test of proportions with improved layout — proptest","text":"Missing values must given \"NA\"s recognized missing values. Numeric data must given 0-1 form. function also accepts binary factor variables, treating higher level 1 lower level 0, logical variables.","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/reference/proptest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test of proportions with improved layout — proptest","text":"","code":"# Read in data set data(psa) attach(psa)  # Define new binary variable as indicator # of whether or not bss was worst possible bssworst <- bss bssworst[bss == 1] <- 0 bssworst[bss == 2] <- 0 bssworst[bss == 3] <- 1   # Perform test comparing proportion in remission # between bss strata proptest(factor(inrem), by = bssworst) #>  #> Call: #> proptest(var1 = factor(inrem), by = bssworst) #>  #> Two-sample proportion test (approximate) : #>   #>           Group Obs Missing      Mean Std. Err.         95% CI #>    bssworst = 0  18       0       0.5     0.118 [0.269, 0.731] #>    bssworst = 1  30       0 0.1666667     0.068  [0.0333, 0.3] #>      Difference  48       0 0.3333333     0.136  [0.0666, 0.6] #> Summary: #>  #>  Ho: Difference in proportions = 0  #>  Ha: Difference in proportions != 0  #>  Z = 2.46  #>  p.value = 0.0139"},{"path":"https://statdivlab.github.io/rigr/reference/proptesti.html","id":null,"dir":"Reference","previous_headings":"","what":"Test of proportions from summary statistics — proptesti","title":"Test of proportions from summary statistics — proptesti","text":"Performs one- two-sample test proportions using counts successes trials, rather binary data. test can approximate exact.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/proptesti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test of proportions from summary statistics — proptesti","text":"","code":"proptesti(   x1,   n1,   x2 = NULL,   n2 = NULL,   exact = FALSE,   null.hypoth = ifelse(is.null(x2) && is.null(n2), 0.5, 0),   conf.level = 0.95,   alternative = \"two.sided\",   correct = FALSE,   more.digits = 0 )"},{"path":"https://statdivlab.github.io/rigr/reference/proptesti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test of proportions from summary statistics — proptesti","text":"x1 Number successes first sample n1 Number trials first sample x2 Number successes second sample n2 Number trials second sample exact true, performs test equality proportions Exact Binomial based confidence intervals. null.hypoth number specifying null hypothesis mean (difference means performing two-sample test). Defaults 0.5 one-sample 0 two-sample. conf.level confidence level test. Defaults 0.95 alternative string: one \"less\", \"two.sided\", \"greater\" specifying form test. Defaults two-sided test. either \"less\" \"greater\" used, corresponding one-sided confidence interval returned. correct logical indicating whether perform continuity correction .digits numeric value specifying whether display fewer digits output. Non-integers automatically rounded .","code":""},{"path":"https://statdivlab.github.io/rigr/reference/proptesti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test of proportions from summary statistics — proptesti","text":"list class proptesti. print method lays information easy--read format. tab formatted table descriptive inferential results (total number observations, sample proportion, standard error proportion estimate), along confidence interval underlying proportion. zstat value test statistic, using approximate test. pval p-value test par vector information type test (null hypothesis, alternative hypothesis, etc.)","code":""},{"path":"https://statdivlab.github.io/rigr/reference/proptesti.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test of proportions from summary statistics — proptesti","text":"x2 n2 specified, must specified, two-sample test run.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/proptesti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test of proportions from summary statistics — proptesti","text":"","code":"# Two-sample test proptesti(10, 100, 15, 200, alternative = \"less\") #>  #> Call: #> proptesti(x1 = 10, n1 = 100, x2 = 15, n2 = 200, alternative = \"less\") #>  #> Two-sample proportion test (approximate)  : #>   #>         Group Obs  Mean Std. Err.            95% CI #>          var1 100   0.1      0.03  [0.0412, 0.1588] #>          var2 200 0.075    0.0186  [0.0385, 0.1115] #>    Difference 300 0.025    0.0353 [-0.0442, 0.0942] #> Summary: #>  #>  Ho: Difference in proportions >= 0  #>  Ha: Difference in proportions < 0  #>  Z = 0.739  #>  p.value = 0.77"},{"path":"https://statdivlab.github.io/rigr/reference/psa.html","id":null,"dir":"Reference","previous_headings":"","what":"PSA dataset — psa","title":"PSA dataset — psa","text":"Data study 50 men hormonally treated prostate cancer. Includes information PSA levels, tumor characteristics, remission status, age, disease state. information, including coding key, available rct-design.com (Teaching Materials, Datasets section).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/psa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PSA dataset — psa","text":"","code":"psa"},{"path":"https://statdivlab.github.io/rigr/reference/psa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PSA dataset — psa","text":"data frame 50 rows 9 variables: ptid patient identifier nadirpsa lowest PSA value attained post therapy (ng/ml) pretxpsa PSA value prior therapy (ng/ml) ps performance status (0= worst, 100= best) bss bone scan score (1= least disease, 3= ) grade tumor grade (1= least aggressive, 3= ) age patient's age (years) obstime time observed remission (months) inrem Indicator whether patient still remission last follow-(yes )","code":""},{"path":"https://statdivlab.github.io/rigr/reference/psa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PSA dataset — psa","text":"Dataset originally distributed rct-design.com (Teaching Materials, Datasets section).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/regress.html","id":null,"dir":"Reference","previous_headings":"","what":"General Regression for an Arbitrary Functional — regress","title":"General Regression for an Arbitrary Functional — regress","text":"Produces point estimates, interval estimates, p values arbitrary functional (mean, geometric mean, proportion, odds, hazard) variable class integer, numeric regressed arbitrary number covariates. Multiple Partial F-tests can specified using U function.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/regress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General Regression for an Arbitrary Functional — regress","text":"","code":"regress(   fnctl,   formula,   data,   intercept = TRUE,   weights = rep(1, nrow(data.frame(data))),   subset = rep(TRUE, nrow(data.frame(data))),   robustSE = TRUE,   conf.level = 0.95,   exponentiate = fnctl != \"mean\",   replaceZeroes,   useFdstn = TRUE,   suppress = FALSE,   na.action,   method = \"qr\",   qr = TRUE,   singular.ok = TRUE,   contrasts = NULL,   init = NULL,   ties = \"efron\",   offset,   control = list(...),   ... )"},{"path":"https://statdivlab.github.io/rigr/reference/regress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General Regression for an Arbitrary Functional — regress","text":"fnctl character string indicating functional (summary measure distribution) inference desired. Choices include \"mean\", \"geometric mean\", \"odds\", \"rate\", \"hazard\". formula object class formula might passed lm, glm, coxph. Functions variables, specified using dummy polynomial may also included formula. data data frame, matrix, data structure matching names entered formula. intercept logical value indicating whether intercept exists . Default value TRUE functionals. Intercept may also removed \"-1\" present formula. \"-1\" present formula intercept = TRUE specified, model fit without intercept. Note fnctl = \"hazard\", intercept always set FALSE Cox proportional hazards regression models explicitly estimate intercept. weights vector indicating optional weights weighted regression. subset vector indicating subset used inference. robustSE logical indicator standard errors (confidence intervals) computed using Huber-White sandwich estimator. default TRUE. conf.level numeric scalar indicating level confidence used computing confidence intervals. default 0.95. exponentiate logical indicator regression parameters exponentiated. default true functionals except mean. replaceZeroes FALSE, indicates value used place zeroes computing geometric mean. TRUE, value equal one-half lowest nonzero value used. numeric value supplied, value used. Defaults TRUE fnctl = \"geometric mean\". parameter always FALSE values fnctl. useFdstn logical indicator F distribution used test statistics instead chi squared distribution even logistic regression models. using F distribution, degrees freedom taken sample size minus number parameters, linear regression model. suppress TRUE, model requires exponentiation (instance, regression geometric mean) computed, table exponentiated coefficients confidence interval returned. Otherwise, two tables returned - one original unexponentiated coefficients, one exponentiated coefficients. na.action, qr, singular.ok, offset, contrasts, control optional arguments passed functionality lm glm. method method used fitting model. default value fnctl = \"mean\" fnctl = \"geometric mean\" \"qr\", default value fnctl = \"odds\" fnctl = \"rate\" \"glm.fit\". argument passed lm() glm() function, respectively. may optionally specify method = \"model.frame\", returns model frame fitting. init numeric vector initial values regression parameters hazard regression. Default initial value zero variables. ties character string describing method breaking ties hazard regression. efron, breslow, exact accepted. See details documentation argument survival::coxph function. Default efron. ... additional arguments passed lm function call","code":""},{"path":"https://statdivlab.github.io/rigr/reference/regress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General Regression for an Arbitrary Functional — regress","text":"object class uRegress returned. Parameter estimates, confidence intervals, p values contained matrix $augCoefficients.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/regress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General Regression for an Arbitrary Functional — regress","text":"Regression models include linear regression (“mean” functional), logistic regression logit link (“odds” functional), Poisson regression log link (“rate” functional), linear regression log-transformed outcome (“geometric mean” functional), Cox proportional hazards regression (hazard functional). Currently, hazard functional, `coxph` syntax supported; words, using `dummy`, `polynomial`, U functions result error `fnctl = hazard`. Note possible link function `regress` `fnctl = odds\"` logit link. Similarly, possible link function `regress` `fnctl = \"rate\"` log link. Objects created using U function can also passed . U call involves partial formula form ~ var1 + var2, regress return multiple-partial F-test involving var1 var2. F-statistic already calculated regardless U specification, naming convention specified via name ~ var1 ignored. multiple partial tests must last terms specified model (.e. predictors can follow ).","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/reference/regress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General Regression for an Arbitrary Functional — regress","text":"","code":"# Loading dataset data(mri)  # Linear regression of atrophy on age regress(\"mean\", atrophy ~ age, data = mri) #>  #> Call: #> regress(fnctl = \"mean\", formula = atrophy ~ age, data = mri) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -36.870  -8.589  -0.870   7.666  51.203  #>  #> Coefficients: #>                  Estimate  Naive SE  Robust SE    95%L      95%H      #> [1] Intercept     -16.06     6.256     6.701       -29.22    -2.907   #> [2] age            0.6980   0.08368   0.09002       0.5213    0.8747  #>                     F stat    df Pr(>F)    #> [1] Intercept            5.75 1    0.0168  #> [2] age                 60.12 1  < 0.00005 #>  #> Residual standard error: 12.36 on 733 degrees of freedom #> Multiple R-squared:  0.08669,\tAdjusted R-squared:  0.08545  #> F-statistic: 60.12 on 1 and 733 DF,  p-value: 2.988e-14 #>   # Linear regression of atrophy on sex and height and their interaction,  # with a multiple-partial F-test on the height-sex interaction regress(\"mean\", atrophy ~ height + sex + U(hs=~height:sex), data = mri) #>  #> Call: #> regress(fnctl = \"mean\", formula = atrophy ~ height + sex + U(hs = ~height:sex),  #>     data = mri) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -28.092  -8.799  -0.935   8.100  48.862  #>  #> Coefficients: #>                       Estimate  Naive SE  Robust SE    95%L      95%H      #> [1] Intercept           47.60     16.28     14.75        18.64     76.57   #> [2] height            -0.09272    0.1026   0.09296      -0.2752   0.08978  #> [3] sexMale             36.80     23.93     23.60       -9.543     83.14   #> [4] height:sexMale     -0.1690    0.1442    0.1411      -0.4460    0.1079  #>                          F stat    df Pr(>F)    #> [1] Intercept                10.41 1    0.0013  #> [2] height                    0.99 1    0.3189  #> [3] sexMale                   2.43 1    0.1194  #> [4] height:sexMale            1.44 1    0.2312  #>  #> Residual standard error: 12.51 on 731 degrees of freedom #> Multiple R-squared:  0.06687,\tAdjusted R-squared:  0.06304  #> F-statistic:  16.9 on 3 and 731 DF,  p-value: 1.274e-10 #>   # Logistic regression of sex on atrophy mri$sex_bin <- ifelse(mri$sex == \"Female\", 1, 0) regress(\"odds\", sex_bin ~ atrophy, data = mri) #>  #> Call: #> regress(fnctl = \"odds\", formula = sex_bin ~ atrophy, data = mri) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -1.636  -1.129   0.741   1.110   1.985   #>  #> Coefficients: #>  #> Raw Model: #>                  Estimate  Naive SE   Robust SE        F stat    df Pr(>F)    #> [1] Intercept      1.430     0.2372     0.2421             34.87 1  < 0.00005 #> [2] atrophy      -0.03962   6.296e-03  6.504e-03           37.12 1  < 0.00005 #>  #> Transformed Model: #>                  e(Est)    e(95%L)   e(95%H)         F stat    df Pr(>F)    #> [1] Intercept      4.177     2.597     6.719             34.87 1  < 0.00005 #> [2] atrophy        0.9612    0.9490    0.9735            37.12 1  < 0.00005 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 1018.91  on 734  degrees of freedom #> Residual deviance:  975.38  on 733  degrees of freedom #> AIC: 979.38 #>  #> Number of Fisher Scoring iterations: 4 #>   # Cox regression of age on survival  library(survival) regress(\"hazard\", Surv(obstime, death)~age, data=mri) #>  #> Call: #> regress(fnctl = \"hazard\", formula = Surv(obstime, death) ~ age,  #>     data = mri) #>  #>  #> Coefficients: #>  #> Raw Model: #>            Estimate  Naive SE  Robust SE       F stat    df Pr(>F)    #> [1] age     0.06795   0.01354   0.01412            23.17 1  < 0.00005 #>  #> Transformed Model: #>            e(Est)    e(95%L)   e(95%H)         F stat    df Pr(>F)    #> [1] age      1.070     1.041     1.100             23.17 1  < 0.00005 #> n =  735, number of events= 133  #> Overall significance test:  #> Likelihood ratio test= 22.33  on 1 df,   p=2.292e-06 #> Wald test            = 25.17  on 1 df,   p=5.24e-07 #> Score (logrank) test = 25.44  on 1 df,   p=4.554e-07 #>  #>"},{"path":"https://statdivlab.github.io/rigr/reference/residuals.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Residuals from uRegress objects — residuals.uRegress","title":"Extract Residuals from uRegress objects — residuals.uRegress","text":"Extracts residuals (unstandardized, standardized, studentized, jackknife) uRegress objects.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/residuals.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Residuals from uRegress objects — residuals.uRegress","text":"","code":"# S3 method for class 'uRegress' residuals(object, type = \"\", ...)"},{"path":"https://statdivlab.github.io/rigr/reference/residuals.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Residuals from uRegress objects — residuals.uRegress","text":"object object class uRegress, returned regress. type denotes type residuals return. Default value \"\", returns unstandardized residuals. \"standardized\", \"studentized\", \"jackknife\" return expected type residuals. ... arguments","code":""},{"path":"https://statdivlab.github.io/rigr/reference/residuals.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Residuals from uRegress objects — residuals.uRegress","text":"Returns type residuals requested.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/residuals.uRegress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Residuals from uRegress objects — residuals.uRegress","text":"Relies functionality stats package return residuals uRegress object. \"studentized\" residuals computed internally studentized residuals, \"jackknife\" computes externally studentized residuals.","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/reference/residuals.uRegress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Residuals from uRegress objects — residuals.uRegress","text":"","code":"# Reading in a dataset data(mri)  # Create a uRegress object, regressing ldl on age ldlReg <- regress(\"mean\", age~ldl, data=mri)  # Get the studentized residuals residuals(ldlReg, \"studentized\") #>           1           2           3           4           5           6  #> -0.46765314  1.16416172  2.82933726 -0.50111494 -0.82949726 -0.45583332  #>           7           8           9          10          11          12  #>  0.06851531  0.07502001 -1.39060232 -0.84590908  2.10385769 -0.66314161  #>          13          14          15          16          17          18  #>  0.11462464 -0.83708725  0.81175029 -0.85280153  1.16193199 -0.47857896  #>          19          20          21          22          23          24  #> -1.20181825 -1.37592281  1.73385803 -0.67464717 -0.82703930 -0.68084546  #>          25          26          27          28          29          30  #>  2.63225947  0.62510968 -0.64959489  2.08235638 -0.65736620 -0.84817990  #>          31          32          33          34          35          36  #> -0.65692765 -0.83494611 -0.28357493 -0.26155352 -1.38177495  0.98623822  #>          37          38          39          40          41          42  #> -0.08479850  0.06072635 -0.82663310 -0.46423242  1.19111926 -0.82381725  #>          43          44          45          46          47          48  #> -0.63204119 -0.85897178 -1.01197224  1.35889264 -0.08997397 -0.12665977  #>          49          50          51          52          53          54  #> -0.48395582 -1.18157676 -0.28921422  1.78728755  0.79220932  0.25136693  #>          55          56          57          58          59          60  #>  2.14926611 -0.66494679 -1.41155773  0.06332116 -0.47946898  0.08852724  #>          61          62          63          64          65          66  #>  0.63778902 -0.82826382 -0.09343014 -1.20098100 -0.29359304 -0.83032452  #>          67          68          69          70          71          72  #> -0.09429503  2.07956935 -0.83622774 -0.48576795 -0.48988239  0.24288092  #>          73          74          75          76          77          78  #> -1.20223907 -0.83325144 -0.30605787  0.80416365 -0.47110991 -1.20014959  #>          79          80          81          82          83          84  #> -0.66630949 -1.39192444 -0.64664166 -1.22418978  1.19205746  1.55200652  #>          85          86          87          88          89          90  #> -0.30831742  0.81522452 -1.01076576  1.35367387  0.44274561  1.75494352  #>          91          92          93          94          95          96  #>  1.17860199  1.54802760  0.99074153  0.24541566  0.05510741  0.83261819  #>          97          98          99         100         101         102  #>  0.07762672 -0.45583332  0.06808218  0.82836268 -0.47636443  0.25051348  #>         103         104         105         106         107         108  #> -1.40951192  0.05986166  0.82511196  1.94909690 -1.00566342  0.81003698  #>         109         110         111         112         113         114  #>  2.27410052  0.25737318  1.17775146 -0.65780555 -0.11650787 -0.83881853  #>         115         116         117         118         119         120  #> -1.38299048 -0.09559306 -1.41002069 -0.83579951 -0.10340080 -0.65344830  #>         121         122         123         124         125         126  #> -0.67137150  1.00196571 -1.39829863 -0.65648992  0.25350549  1.17115285  #>         127         128         129         131         132         133  #>  0.61921787  1.38924599 -0.67323808  0.83119011 -1.19370713  0.25522152  #>         134         135         136         137         138         139  #> -0.68918289 -1.19607969  0.29388654 -1.01901683 -1.38299048  1.90086772  #>         140         141         142         143         144         145  #>  0.63202434 -1.18689884 -1.19568066  1.55850408 -0.47460354  0.09466576  #>         146         147         148         149         150         151  #> -1.38546691 -0.45874866  1.90482733  0.80876232  0.26824862 -1.58339907  #>         152         153         154         155         156         157  #> -0.84455926 -0.65215672 -0.67559097  0.24245935 -1.02731472 -0.28142132  #>         159         160         161         162         163         164  #> -1.41259140 -0.85001569  1.01069615 -0.65087226  0.63246306 -0.09905879  #>         165         166         167         168         169         170  #>  2.84036253 -0.29271434 -0.83115578 -0.47154459 -1.17248878 -1.19809651  #>         171         172         174         175         176         177  #>  1.54889849  0.42553353 -1.05872065  0.08197870  1.17606759  0.05121846  #>         178         179         180         181         182         183  #> -0.64538760  2.10432037 -0.47110991  0.81698563  4.48984149 -0.28013311  #>         184         185         186         187         189         190  #> -0.11168621  0.45814479  2.82207404  0.44794828  0.63114924 -1.03465782  #>         191         192         193         194         195         196  #> -0.28228177  2.47400564 -1.03279114 -0.10950087  0.65735902  0.07849633  #>         197         198         199         200         201         202  #>  2.63935171  1.17075250  1.39674607 -0.84233051  2.08781697  0.25909993  #>         203         204         205         206         207         208  #> -0.48531397  0.81787223 -0.43846937 -1.01237683  0.62854250 -0.64917066  #>         209         210         211         212         213         214  #> -0.11958697  2.46450634  2.66698736  2.30051951 -0.26155352  2.63833026  #>         215         216         217         219         220         221  #>  0.64738881 -0.10253145 -0.27585992 -1.20181825 -0.85280153 -0.79334455  #>         222         223         224         225         226         227  #> -0.83115578 -1.04233393 -0.28965047  0.82789514  2.27523627  3.75434314  #>         228         229         230         231         232         233  #>  0.63644683  0.84897716  1.71961137  0.08808981  1.53855430 -1.01774782  #>         234         235         236         237         238         239  #> -0.09386254  0.45634962  0.60786196  3.02500509 -1.40600044 -0.64372627  #>         240         241         242         243         244         245  #> -1.17529015 -0.29139906 -0.09386254  0.45769512 -0.65474704  0.06808218  #>         246         247         248         249         250         251  #> -0.66045878 -1.02866655 -1.02115665 -0.26530898  0.81742842 -0.66001453  #>         252         253         254         255         256         257  #> -0.84681423  1.16995604 -0.80684232  2.08109243  2.28985997 -0.28617040  #>         258         259         260         262         263         264  #>  0.64645887  1.36526136  0.79968155 -1.40161300 -0.81414870  0.07371777  #>         265         266         268         269         270         271  #>  1.91661181  1.57642324 -0.66224402 -1.03279114 -1.19370713 -0.85094000  #>         272         273         274         275         276         277  #> -0.82663310  2.31125605  0.81046383  1.18382641 -1.01318967 -0.30380887  #>         278         279         280         281         282         283  #> -1.38757700  0.45190232  1.17399491 -0.46722360 -0.83325144  0.06418639  #>         284         285         286         287         288         289  #> -0.45048669 -0.46211244 -0.48896357 -1.02821466  0.09203152  0.10526184  #>         290         291         292         293         294         295  #> -1.38504997 -0.28314354  1.56896444 -1.36029274 -0.48850514 -0.46593833  #>         296         297         298         299         300         301  #> -0.63204119 -0.83409675 -1.36699731 -0.65957110 -0.66045878 -0.12932566  #>         302         303         304         305         306         307  #>  1.72910252  1.16341291 -0.65344830 -0.11124884  0.09510533 -1.02821466  #>         308         309         310         311         312         313  #> -0.66998067 -0.29139906 -0.62662049 -0.67701329 -1.39644294 -1.04831470  #>         314         315         316         317         318         319  #>  3.02451177 -0.11037455  0.10970862  1.17690666  0.45456379  0.46772731  #>         320         321         322         323         324         325  #> -0.64372627  1.55291170  0.28792489 -0.67137150 -1.20522586 -0.44562715  #>         326         327         328         329         330         331  #>  0.47285647 -0.10644751 -0.47197983 -1.21187007 -1.01901683  0.63644683  #>         332         333         334         335         336         337  #> -1.41155773 -0.82026716  0.97917744 -0.84500815 -1.39416220  0.27710165  #>         338         339         340         341         342         343  #> -1.39876689 -0.27415939 -0.30336032 -0.10166259 -1.03989887 -0.10993763  #>         344         345         346         347         348         349  #> -0.64622287  1.37200675  0.78991957  0.46221869  0.83793751  2.27562039  #>         350         351         352         353         354         355  #> -0.30515702  0.81876288  0.64553227 -0.47110991  0.80129803 -1.21323920  #>         356         357         358         359         360         361  #>  3.59512087 -0.63639999 -0.10209696 -1.22125501  1.72460252 -0.47504288  #>         362         363         364         365         366         367  #> -1.57780998 -0.68719699  0.63071285 -0.63243379  1.72460252 -1.38672789  #>         368         369         370         371         372         373  #>  0.45367434 -0.10079420 -0.47154459 -0.82302153  1.71328155 -0.66813826  #>         374         375         376         377         378         379  #> -0.13557779 -0.11870633  2.07839636 -0.09992627  1.36395766 -0.10122834  #>         380         381         382         383         384         385  #>  0.62811073  0.05942936 -1.01524314  0.82100731  0.05813259  0.97578881  #>         386         387         388         389         390         391  #>  0.06332116 -1.22920550 -0.48622255  1.77087348  0.10348867 -0.86483368  #>         392         393         394         395         396         397  #>  0.05640383 -1.39923688  0.45013937  0.25479207  0.30556541  0.09686518  #>         398         399         400         401         402         403  #> -0.83579951  0.86219869 -0.65258645 -0.09689194  0.06115873 -1.00877921  #>         404         405         406         407         408         409  #> -1.57872196  0.42512408  0.99115809  0.62510968 -1.00451480 -0.11168621  #>         410         411         412         413         414         415  #>  0.46085532  0.46772731  0.61673705  0.09115462 -0.28790761 -1.01986902  #>         416         417         418         419         420         421  #> -0.84366462  1.35022294 -1.20522586 -0.64706122 -0.46380733 -0.09862521  #>         422         423         424         425         426         427  #> -1.38097297 -0.12400150 -0.25864720  0.46221869 -1.40305965 -0.66404253  #>         428         429         430         431         432         433  #>  0.96859250 -1.01400739  1.73297430 -0.10601187 -1.01944230 -0.84545809  #>         434         435         436         437         438         439  #>  1.56238713  1.90866983 -0.09862521 -0.10950087  0.39984769 -0.83881853  #>         440         441         442         443         444         445  #>  0.07719205  2.83705635  0.04170785 -0.48036144  1.00241395 -0.64248828  #>         446         447         448         449         450         451  #>  1.19781242 -0.66224402 -0.47328906 -0.27884782 -0.82104927 -1.00604869  #>         452         453         454         455         456         457  #> -1.22077128 -0.30291218  0.62596333  0.98503498 -0.67183684 -0.83325144  #>         458         459         460         461         462         463  #>  0.10614958  0.46772731  0.61509769  0.62005067 -0.83115578  0.98266032  #>         464         465         466         467         468         469  #> -1.00527935  0.44017324  0.25222151  0.62005067 -0.49685724 -0.62931324  #>         470         471         472         473         474         475  #> -0.29756588  0.97141602  0.42841310  0.26300330  0.05165056 -0.84100576  #>         476         477         478         479         480         481  #> -0.47724845  0.25264922  1.92113194  0.07849633 -0.07059982 -1.20872781  #>         482         483         484         485         486         487  #>  1.54337287 -0.46084698  0.24414714  0.61673705  0.08241446 -0.32821832  #>         488         489         490         491         492         493  #>  0.45994943  1.38613882  0.06894849 -1.04984038 -0.10862777 -0.27119507  #>         494         495         496         497         498         499  #>  0.27265721  0.45323048 -0.47946898 -0.45130362 -0.29052404 -1.22418978  #>         500         501         502         503         504         505  #> -0.10296607 -0.46169008 -1.37978255 -1.21232494 -1.19292778 -0.65648992  #>         507         508         509         510         511         512  #>  0.11911799 -0.83283030 -0.82421657 -0.09343014 -0.28530388 -0.28530388  #>         513         514         515         516         517         518  #>  1.91573604 -1.19528307 -1.22271544  1.16838004 -0.09992627  0.45411878  #>         519         520         521         522         523         524  #>  0.07371777  0.62088641 -0.30967829  0.98623822  1.17236237  1.36526136  #>         525         526         527         528         529         530  #> -0.46508427 -0.31378467 -0.10644751  1.93295048  0.80623939  0.44102858  #>         531         532         533         534         535         536  #>  0.07198252 -0.66767979 -0.26238621  0.99538985  0.09730555 -0.68522607  #>         537         538         539         540         541         542  #> -0.46851392 -0.64580485 -0.83115578 -0.46253534  0.62341141 -0.29756588  #>         543         544         546         547         548         549  #> -1.19331673 -1.38800409 -0.28487113 -0.11431374  1.18834027  0.81566329  #>         550         551         552         553         554         555  #>  0.82557321 -0.66905775 -1.20393699  1.37528514  0.98148884 -1.01036603  #>         556         557         559         560         561         562  #> -0.30291218  0.45904592 -0.47197983 -0.28271249 -0.10644751  0.27044854  #>         563         564         565         566         567         568  #> -0.29403295 -0.10775525 -0.30470722  0.44533718 -0.27543433 -0.69269468  #>         569         570         571         572         573         574  #>  0.45278719  0.44060065 -0.65258645 -0.83969033  1.92736247 -0.12577285  #>         575         576         577         578         579         580  #>  0.09378708 -0.11081162 -0.65301698 -0.66179647 -1.20740347  0.27088956  #>         581         582         583         584         585         586  #> -1.41415542  0.42965443 -1.03002986  2.33382503 -0.84100576 -0.30696041  #>         587         588         589         590         591         592  #>  2.65767213 -0.28703831 -0.28965047 -0.45874866 -1.02464532  0.46542122  #>         593         594         595         596         597         598  #> -0.13155333  0.80665745  0.43974635 -0.67701329 -1.19024518 -0.64125711  #>         599         600         601         602         603         604  #> -0.84056625 -0.46000604 -0.48804734 -0.82302153 -0.48305351 -0.30201711  #>         605         606         607         608         609         610  #> -0.49311876  0.07719205  1.01644635  0.62130539 -0.28400666  1.17945828  #>         611         612         613         614         615         616  #>  2.08300352 -0.66001453 -0.11475223 -0.08566044  0.25436292 -0.85420904  #>         617         618         619         620         621         622  #> -0.64044011 -1.01359792  1.56238713 -1.38057449 -0.66001453 -0.29934161  #>         623         624         625         626         627         628  #> -0.63204119 -1.22077128 -0.64664166 -0.81044845 -0.65736620 -1.20393699  #>         629         630         631         632         633         634  #>  0.08241446  0.81304566 -0.67044342 -0.45874866 -0.85094000 -1.03418920  #>         635         636         637         638         639         640  #> -0.85705349  0.08110749 -0.63600007 -1.21051443  0.64094889  0.81742842  #>         641         642         643         644         645         646  #> -0.29934161  0.48922077 -0.09126942  0.99668300 -1.02866655 -0.08911071  #>         647         648         649         650         651         652  #> -0.11212373  0.80416365 -0.86237157  0.99325889 -1.38463470 -0.63720206  #>         653         654         655         656         657         658  #>  1.00928742 -0.28877833  0.43508476 -0.49080379  0.61632613 -1.00527935  #>         659         660         661         662         663         664  #> -0.46508427 -0.47680614 -0.11958697 -0.10557637 -0.67748917  0.09071638  #>         665         666         667         668         669         670  #>  0.63290255  0.80499105 -1.40354538 -0.28487113 -1.18800149 -0.46593833  #>         671         672         673         674         675         676  #>  0.98110069  0.26387422 -0.48215369  0.45101972 -0.81377442 -0.65431333  #>         677         678         679         680         681         682  #> -0.99966140 -0.12046834 -0.49265445 -0.84772362 -0.82026716  0.99157584  #>         683         684         685         686         687         688  #>  0.26737106  0.61756108 -1.21232494  0.05813259  0.07198252 -0.28573697  #>         689         690         691         692         693         694  #> -1.40600044  0.99325889 -1.22567809  0.63290255 -0.44967178  1.56844664  #>         695         696         697         698         699         700  #>  1.15868104 -0.64664166 -0.11914656 -0.65001989 -0.47416479 -0.66224402  #>         701         702         703         704         705         706  #>  0.07545425 -0.85562634  0.63600103  0.62046817 -0.82826382  1.34836273  #>         707         708         709         710         711         712  #>  0.62897503  1.38060685 -1.76330014 -0.65736620 -0.82421657  0.61632613  #>         713         714         715         716         717         718  #>  0.09115462 -1.00996751  0.81132048 -0.49638758  2.28388683  0.27133094  #>         719         720         721         722         723         724  #>  0.08590458  0.98664167  0.10348867  3.18040948 -1.73600048  0.44970004  #>         725         726         727         728         729         730  #> -0.30246444  1.73747824  2.46006203  0.61346985  0.64004203 -0.28747279  #>         731         732         733         734         735  #>  0.26213367 -0.64748155  1.36309687 -0.45916725 -0.64622287   # Get the jackknifed residuals residuals(ldlReg, \"jackknife\") #>           1           2           3           4           5           6  #> -0.46740032  1.16444825  2.84316367 -0.50085525 -0.82931813 -0.45558344  #>           7           8           9          10          11          12  #>  0.06846813  0.07496840 -1.39150244 -0.84574250  2.10886741 -0.66288447  #>          13          14          15          16          17          18  #>  0.11454639 -0.83691380  0.81155863 -0.85264050  1.16221379 -0.47832365  #>          19          20          21          22          23          24  #> -1.20218826 -1.37677465  1.73627205 -0.67439276 -0.82685837 -0.68059266  #>          25          26          27          28          29          30  #>  2.64313405  0.62484611 -0.64933501  2.08718418 -0.65710783 -0.84801513  #>          31          32          33          34          35          36  #> -0.65666920 -0.83477104 -0.28339452 -0.26138494 -1.38264589  0.98621955  #>          37          38          39          40          41          42  #> -0.08474026  0.06068449 -0.82645188 -0.46398042  1.19146484 -0.82363399  #>          43          44          45          46          47          48  #> -0.63177850 -0.85881587 -1.01198912  1.35969003 -0.08991223 -0.12657355  #>          49          50          51          52          53          54  #> -0.48369937 -1.18190103 -0.28903086  1.79000983  0.79200509  0.25120402  #>          55          56          57          58          59          60  #>  2.15467353 -0.66469006 -1.41252893  0.06327753 -0.47921348  0.08846647  #>          61          62          63          64          65          66  #>  0.63752716 -0.82808378 -0.09336607 -1.20134908 -0.29340742 -0.83014600  #>          67          68          69          70          71          72  #> -0.09423038  2.08437387 -0.83605364 -0.48551113 -0.48962475  0.24272280  #>          73          74          75          76          77          78  #> -1.20261005 -0.83307510 -0.30586596  0.80396696 -0.47085628 -1.20051575  #>          79          80          81          82          83          84  #> -0.66605306 -1.39282897 -0.64638125 -1.22461274  1.19240516  1.55352283  #>          85          86          87          88          89          90  #> -0.30812438  0.81503522 -1.01078092  1.35445490  0.44249931  1.75747668  #>          91          92          93          94          95          96  #>  1.17891971  1.54952676  0.99072889  0.24525610  0.05506941  0.83244137  #>          97          98          99         100         101         102  #>  0.07757334 -0.45558344  0.06803530  0.82818272 -0.47610961  0.25035104  #>         103         104         105         106         107         108  #> -1.41047607  0.05982039  0.82492963  1.95288595 -1.00567133  0.80984416  #>         109         110         111         112         113         114  #>  2.28069871  0.25720691  1.17806731 -0.65754727 -0.11642837 -0.83864641  #>         115         116         117         118         119         120  #> -1.38386541 -0.09552753 -1.41098659 -0.83562509 -0.10333003 -0.65318915  #>         121         122         123         124         125         126  #> -0.67111627  1.00196844 -1.39922456 -0.65623138  0.25334138  1.17145435  #>         127         128         129         131         132         133  #>  0.61895365  1.39014159 -0.67298331  0.83101223 -1.19405856  0.25505644  #>         134         135         136         137         138         139  #> -0.68893245 -1.19643653  0.29370077 -1.01904392 -1.38386541  1.90431721  #>         140         141         142         143         144         145  #>  0.63176165 -1.18723494 -1.19603659  1.56004862 -0.47434911  0.09460085  #>         146         147         148         149         150         151  #> -1.38635000 -0.45849803  1.90830399  0.80856865  0.26807638 -1.58505431  #>         152         153         154         155         156         157  #> -0.84439161 -0.65189732 -0.67533679  0.24230147 -1.02735411 -0.28124203  #>         159         160         161         162         163         164  #> -1.41356617 -0.84985240  1.01071121 -0.65061262  0.63220043 -0.09899093  #>         165         166         167         168         169         170  #>  2.85436760 -0.29252917 -0.83097787 -0.47129085 -1.17279317 -1.19845796  #>         171         172         174         175         176         177  #>  1.55040140  0.42529241 -1.05880930  0.08192236  1.17637976  0.05118311  #>         178         179         180         181         182         183  #> -0.64512698  2.10933405 -0.47085628  0.81679755  4.55062412 -0.27995450  #>         184         185         186         187         189         190  #> -0.11160990  0.45789432  2.83578356  0.44770052  0.63088643 -1.03470835  #>         191         192         193         194         195         196  #> -0.28210203  2.48282589 -1.03283882 -0.10942602  0.65710065  0.07844237  #>         197         198         199         200         201         202  #>  2.65032477  1.17105314  1.39766676 -0.84216111  2.09269058  0.25893270  #>         203         204         205         206         207         208  #> -0.48505724  0.81768477 -0.43822431 -1.01239429  0.62827935 -0.64891071  #>         209         210         211         212         213         214  #> -0.11950542  2.47321180  2.67834960  2.30738861 -0.26138494  2.64928911  #>         215         216         217         219         220         221  #>  0.64712854 -0.10246127 -0.27568359 -1.20218826 -0.85264050 -0.79314102  #>         222         223         224         225         226         227  #> -0.83097787 -1.04239635 -0.28946688  0.82771484  2.28184597  3.78886011  #>         228         229         230         231         232         233  #>  0.63618478  0.84881303  1.72194672  0.08802934  1.54001304 -1.01777307  #>         234         235         236         237         238         239  #> -0.09379818  0.45609961  0.60759671  3.04222567 -1.40695254 -0.64346536  #>         240         241         242         243         244         245  #> -1.17560063 -0.29121457 -0.09379818  0.45744476 -0.65448815  0.06803530  #>         246         247         248         249         250         251  #> -0.66020106 -1.02870798 -1.02118689 -0.26513834  0.81724065 -0.65975672  #>         252         253         254         255         256         257  #> -0.84664838  1.17025496 -0.80664738  2.08590966  2.29661895 -0.28598863  #>         258         259         260         262         263         264  #>  0.64619844  1.36607893  0.79948197 -1.40255014 -0.81395867  0.07366705  #>         265         266         268         269         270         271  #>  1.92017008  1.57804705 -0.66198669 -1.03283882 -1.19405856 -0.85077746  #>         272         273         274         275         276         277  #> -0.82645188  2.31823717  0.81027130  1.18415567 -1.01320830 -0.30361808  #>         278         279         280         281         282         283  #> -1.38846706  0.45165349  1.17430256 -0.46697087 -0.83307510  0.06414217  #>         284         285         286         287         288         289  #> -0.45023823 -0.46186096 -0.48870612 -1.02825541  0.09196839  0.10518982  #>         290         291         292         293         294         295  #> -1.38593168 -0.28296335  1.57055499 -1.36109455 -0.48824777 -0.46568591  #>         296         297         298         299         300         301  #> -0.63177850 -0.83392105 -1.36782041 -0.65931319 -0.66020106 -0.12923769  #>         302         303         304         305         306         307  #>  1.73149012  1.16369785 -0.65318915 -0.11117282  0.09504013 -1.02825541  #>         308         309         310         311         312         313  #> -0.66972511 -0.29121457 -0.62635710 -0.67675948 -1.39736261 -1.04838655  #>         314         315         316         317         318         319  #>  3.04172318 -0.11029912  0.10963364  1.17722066  0.45431424  0.46747446  #>         320         321         322         323         324         325  #> -0.64346536  1.55443193  0.28774220 -0.67111627 -1.20560377 -0.44538003  #>         326         327         328         329         330         331  #>  0.47260243 -0.10637471 -0.47172600 -1.21226355 -1.01904392  0.63618478  #>         332         333         334         335         336         337  #> -1.41252893 -0.82008137  0.97914950 -0.84484086 -1.39507421  0.27692465  #>         338         339         340         341         342         343  #> -1.39969439 -0.27398397 -0.30316975 -0.10159299 -1.03995749 -0.10986250  #>         344         345         346         347         348         349  #> -0.64596239  1.37284593  0.78971395  0.46196719  0.83776472  2.28223399  #>         350         351         352         353         354         355  #> -0.30496555  0.81857604  0.64527168 -0.47085628  0.80109948 -1.21363593  #>         356         357         358         359         360         361  #>  3.62518314 -0.63613793 -0.10202707 -1.22167087  1.72696526 -0.47478834  #>         362         363         364         365         366         367  #> -1.57944001 -0.68694597  0.63044999 -0.63217116  1.72696526 -1.38761515  #>         368         369         370         371         372         373  #>  0.45342503 -0.10072518 -0.47129085 -0.82283770  1.71558242 -0.66788226  #>         374         375         376         377         378         379  #> -0.13548572 -0.11862536  2.08319110 -0.09985783  1.36477108 -0.10115902  #>         380         381         382         383         384         385  #>  0.62784753  0.05938839 -1.01526474  0.82082205  0.05809251  0.97575648  #>         386         387         388         389         390         391  #>  0.06327753 -1.22964067 -0.48596564  1.77349882  0.10341784 -0.86468275  #>         392         393         394         395         396         397  #>  0.05636494 -1.40016598  0.44989101  0.25462724  0.30537373  0.09679880  #>         398         399         400         401         402         403  #> -0.83562509  0.86204551 -0.65232714 -0.09682554  0.06111658 -1.00879153  #>         404         405         406         407         408         409  #> -1.58035610  0.42488308  0.99114600  0.62484611 -1.00452110 -0.11160990  #>         410         411         412         413         414         415  #>  0.46060416  0.46747446  0.61647257  0.09109208 -0.28772493 -1.01989737  #>         416         417         418         419         420         421  #> -0.84349627  1.35099325 -1.20560377 -0.64680089 -0.46355543 -0.09855764  #>         422         423         424         425         426         427  #> -1.38184128 -0.12391703 -0.25848023  0.46196719 -1.40400171 -0.66378559  #>         428         429         430         431         432         433  #>  0.96855103 -1.01402720  1.73538339 -0.10593936 -1.01947002 -0.84529115  #>         434         435         436         437         438         439  #>  1.56394866  1.91217298 -0.09855764 -0.10942602  0.39961526 -0.83864641  #>         440         441         442         443         444         445  #>  0.07713896  2.85100769  0.04167905 -0.48010574  1.00241730 -0.64222716  #>         446         447         448         449         450         451  #>  1.19817322 -0.66198669 -0.47303492 -0.27866989 -0.82086404 -1.00605714  #>         452         453         454         455         456         457  #> -1.22118598 -0.30272183  0.62569986  0.98501471 -0.67158173 -0.83307510  #>         458         459         460         461         462         463  #>  0.10607697  0.46747446  0.61483306  0.61978653 -0.83097787  0.98263692  #>         464         465         466         467         468         469  #> -1.00528672  0.43992767  0.25205811  0.61978653 -0.49659830 -0.62905019  #>         470         471         472         473         474         475  #> -0.29737823  0.97137812  0.42817108  0.26283393  0.05161493 -0.84083533  #>         476         477         478         479         480         481  #> -0.47699342  0.25248558  1.92472181  0.07844237 -0.07055122 -1.20911390  #>         482         483         484         485         486         487  #>  1.54485210 -0.46059582  0.24398830  0.61647257  0.08235783 -0.32801570  #>         488         489         490         491         492         493  #>  0.45969849  1.38702413  0.06890102 -1.04991466 -0.10855351 -0.27102124  #>         494         495         496         497         498         499  #>  0.27248259  0.45298129 -0.47921348 -0.45105494 -0.29034000 -1.22461274  #>         500         501         502         503         504         505  #> -0.10289559 -0.46143871 -1.38064697 -1.21271951 -1.19327745 -0.65623138  #>         507         508         509         510         511         512  #>  0.11903675 -0.83265364 -0.82403360 -0.09336607 -0.28512255 -0.28512255  #>         513         514         515         516         517         518  #>  1.91928821 -1.19563809 -1.22313483  1.16867557 -0.09985783  0.45386935  #>         519         520         521         522         523         524  #>  0.07366705  0.62062236 -0.30948458  0.98621955  1.17266648  1.36607893  #>         525         526         527         528         529         530  #> -0.46483206 -0.31358895 -0.10637471  1.93662376  0.80604406  0.44078277  #>         531         532         533         534         535         536  #>  0.07193298 -0.66742368 -0.26221717  0.99538351  0.09723887 -0.68497448  #>         537         538         539         540         541         542  #> -0.46826089 -0.64554430 -0.83097787 -0.46228376  0.62314764 -0.29737823  #>         543         544         546         547         548         549  #> -1.19366728 -1.38889557 -0.28469003 -0.11423569  1.18867960  0.81547430  #>         550         551         552         553         554         555  #>  0.82539121 -0.66880197 -1.20431191  1.37613492  0.98146391 -1.01038061  #>         556         557         559         560         561         562  #> -0.30272183  0.45879522 -0.47172600 -0.28253252 -0.10637471  0.27027511  #>         563         564         565         566         567         568  #> -0.29384711 -0.10768157 -0.30451598  0.44509015 -0.27525822 -0.69244528  #>         569         570         571         572         573         574  #>  0.45253812  0.44035496 -0.65232714 -0.83951888  1.93099617 -0.12568722  #>         575         576         577         578         579         580  #>  0.09372277 -0.11073590 -0.65275775 -0.66153904 -1.20778646  0.27071590  #>         581         582         583         584         585         586  #> -1.41513561  0.42941202 -1.03007335  2.34104532 -0.84083533 -0.30676805  #>         587         588         589         590         591         592  #>  2.66890222 -0.28685608 -0.28946688 -0.45849803 -1.02468073  0.46516893  #>         593         594         595         596         597         598  #> -0.13146389  0.80646239  0.43950091 -0.67675948 -1.19058879 -0.64099580  #>         599         600         601         602         603         604  #> -0.84039548 -0.45975510 -0.48779007 -0.82283770 -0.48279725 -0.30182722  #>         605         606         607         608         609         610  #> -0.49286051  0.07713896  1.01646970  0.62104138 -0.28382602  1.17977788  #>         611         612         613         614         615         616  #>  2.08783674 -0.65975672 -0.11467389 -0.08560161  0.25419833 -0.85404917  #>         617         618         619         620         621         622  #> -0.64017867 -1.01361714  1.56394866 -1.38144150 -0.65975672 -0.29915307  #>         623         624         625         626         627         628  #> -0.63177850 -1.22118598 -0.64638125 -0.81025591 -0.65710783 -1.20431191  #>         629         630         631         632         633         634  #>  0.08235783  0.81285488 -0.67018796 -0.45849803 -0.85077746 -1.03423901  #>         635         636         637         638         639         640  #> -0.85689598  0.08105175 -0.63573794 -1.21090472  0.64068753  0.81724065  #>         641         642         643         644         645         646  #> -0.29915307  0.48896326 -0.09120681  0.99667842 -1.02870798 -0.08904955  #>         647         648         649         650         651         652  #> -0.11204714  0.80396696 -0.86221854  0.99324964 -1.38551505 -0.63694012  #>         653         654         655         656         657         658  #>  1.00930046 -0.28859520  0.43484069 -0.49054598  0.61606161 -1.00528672  #>         659         660         661         662         663         664  #> -0.46483206 -0.47655122 -0.11950542 -0.10550414 -0.67723549  0.09065414  #>         665         666         667         668         669         670  #>  0.63263999  0.80479489 -1.40448909 -0.28469003 -1.18834005 -0.46568591  #>         671         672         673         674         675         676  #>  0.98107525  0.26370437 -0.48189761  0.45077112 -0.81358413 -0.65405435  #>         677         678         679         680         681         682  #> -0.99966093 -0.12038621 -0.49239629 -0.84755849 -0.82008137  0.99156432  #>         683         684         685         686         687         688  #>  0.26719930  0.61729668 -1.21271951  0.05809251  0.07193298 -0.28555542  #>         689         690         691         692         693         694  #> -1.40695254  0.99324964 -1.22610466  0.63263999 -0.44942354  1.57003491  #>         695         696         697         698         699         700  #>  1.15895599 -0.64638125 -0.11906530 -0.64976010 -0.47391046 -0.66198669  #>         701         702         703         704         705         706  #>  0.07540234 -0.85546764  0.63573891  0.62020407 -0.82808378  1.34912728  #>         707         708         709         710         711         712  #>  0.62871194  1.38147396 -1.76588142 -0.65710783 -0.82403360  0.61606161  #>         713         714         715         716         717         718  #>  0.09109208 -1.00998152  0.81112853 -0.49612872  2.29058458  0.27115704  #>         719         720         721         722         723         724  #>  0.08584559  0.98662354  0.10341784  3.20067738 -1.73842646  0.44945180  #>         725         726         727         728         729         730  #> -0.30227432  1.73991248  2.46871411  0.61320507  0.63978052 -0.28729033  #>         731         732         733         734         735  #>  0.26196477 -0.64722130  1.36390755 -0.45891652 -0.64596239"},{"path":"https://statdivlab.github.io/rigr/reference/rigr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression, Inference, and General Data Analysis Tools in R — rigr-package","title":"Regression, Inference, and General Data Analysis Tools in R — rigr-package","text":"Developed Scott S. Emerson, Andrew J. Spieker, Brian D. Williamson, Travis Y. Hee Wai University Washington Department Biostatistics. Currently maintained Prof. Amy Willis University Washington Department Biostatistics. Previously maintained Charles Wolock Taylor Okonek, also University Washington Department Biostatistics. Aims facilitate regression, descriptive statistics, one- two-sample inference implementing intuitive layout functionality existing R functions.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/rigr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression, Inference, and General Data Analysis Tools in R — rigr-package","text":"set tools designed facilitate easy adoption R students introductory classes little programming experience. Compiles output existing routines together intuitive format, adds functionality existing functions. instance, regression function can perform linear models generalized linear models. user can also specify multiple-partial F-tests print model coefficients, robust standard errors provided automatically. also provide functions descriptive statistics one- two-sample inference improved, legible output.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/rigr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression, Inference, and General Data Analysis Tools in R — rigr-package","text":"Scott S. Emerson, Andrew J. Spieker, Brian D. Williamson, Amy D. Willis, Charles Wolock, Taylor Okonek Maintainer: Amy Willis <adwillis@uw.edu>","code":""},{"path":"https://statdivlab.github.io/rigr/reference/rstandard.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract standardized residuals from uRegress objects — rstandard.uRegress","title":"Extract standardized residuals from uRegress objects — rstandard.uRegress","text":"Extracts standardized residuals uRegress objects relying functionality stats package.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/rstandard.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract standardized residuals from uRegress objects — rstandard.uRegress","text":"","code":"# S3 method for class 'uRegress' rstandard(model, ...)"},{"path":"https://statdivlab.github.io/rigr/reference/rstandard.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract standardized residuals from uRegress objects — rstandard.uRegress","text":"model object class uRegress, returned regress. ... arguments pass residuals.uRegress","code":""},{"path":"https://statdivlab.github.io/rigr/reference/rstandard.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract standardized residuals from uRegress objects — rstandard.uRegress","text":"vector standardized residuals","code":""},{"path":"https://statdivlab.github.io/rigr/reference/rstudent.uRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Studentized residuals from uRegress objects — rstudent.uRegress","title":"Extract Studentized residuals from uRegress objects — rstudent.uRegress","text":"Extracts Studentized residuals uRegress objects relying functionality stats package.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/rstudent.uRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Studentized residuals from uRegress objects — rstudent.uRegress","text":"","code":"# S3 method for class 'uRegress' rstudent(model, ...)"},{"path":"https://statdivlab.github.io/rigr/reference/rstudent.uRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Studentized residuals from uRegress objects — rstudent.uRegress","text":"model object class uRegress, returned regress. ... arguments pass residuals.uRegress","code":""},{"path":"https://statdivlab.github.io/rigr/reference/rstudent.uRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Studentized residuals from uRegress objects — rstudent.uRegress","text":"vector Studentized residuals","code":""},{"path":"https://statdivlab.github.io/rigr/reference/salary.html","id":null,"dir":"Reference","previous_headings":"","what":"Salary dataset — salary","title":"Salary dataset — salary","text":"Data study 1,597 faculty members single US university. Includes information monthly salary year 1976 1995,  well sex, highest degree attained, year highest degree, field, year hired, rank, administrative duties. information, including coding key, available rct-design.com (Teaching Materials, Datasets section).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/salary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Salary dataset — salary","text":"","code":"salary"},{"path":"https://statdivlab.github.io/rigr/reference/salary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Salary dataset — salary","text":"data frame 19792 rows 11 variables: case case number id identification number faculty member sex M (male) F (female) deg highest degree attained: PhD, Prof (professional degree, eg, medicine law), (Master's Bachelor's degree) yrdeg year highest degree attained field Arts (Arts Humanities), Prof (professional school, e.g., Business, Law, Engineering Public Affairs), startyr year faculty member hired (2 digits) year year (2 digits) rank rank faculty member year: Assist (Assistant), Assoc (Associate), Full (Full) admin Indicator whether faculty member administrative duties (eg, department chair) year: 1 (yes), 0 () salary monthly salary faculty member year dollars","code":""},{"path":"https://statdivlab.github.io/rigr/reference/salary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Salary dataset — salary","text":"Dataset originally distributed rct-design.com (Teaching Materials, Datasets section).","code":""},{"path":"https://statdivlab.github.io/rigr/reference/ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"T-test with Improved Layout — ttest","title":"T-test with Improved Layout — ttest","text":"Performs one- two-sample t-test using data. two-sample case, user can specify whether observations matched, whether equal variances presumed.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T-test with Improved Layout — ttest","text":"","code":"ttest(   var1,   var2 = NA,   by = NA,   geom = FALSE,   null.hypoth = 0,   alternative = \"two.sided\",   var.eq = FALSE,   conf.level = 0.95,   matched = FALSE,   more.digits = 0 )"},{"path":"https://statdivlab.github.io/rigr/reference/ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"T-test with Improved Layout — ttest","text":"var1 (non-empty) numeric vector data values. var2 optional (non-empty) numeric vector data. variable equal length var1 two outcomes. used define strata t-test var1. geom logical indicating whether geometric mean calculated displayed. null.hypoth number specifying null hypothesis mean (difference means performing two-sample test). Defaults zero. alternative string: one \"less\", \"two.sided\", \"greater\" specifying form test. Defaults two-sided test. var.eq logical value, either TRUE FALSE (default), specifying whether equal variances presumed two-sample t-test. Also controls robust standard errors. conf.level confidence level test. Defaults 0.95. matched logical value, either TRUE FALSE, indicating whether variables two-sample t-test matched. Variables must equal length. .digits numeric value specifying whether display fewer digits output. Non-integers automatically rounded .","code":""},{"path":"https://statdivlab.github.io/rigr/reference/ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"T-test with Improved Layout — ttest","text":"list class ttest. print method lays information easy--read format. tab formatted table descriptive inferential statistics (total number observations, number missing observations, mean, standard error mean estimate, standard deviation), along confidence interval mean. df Degrees freedom t-test. p P-value t-test. tstat Test statistic t-test. var1 user-supplied first data vector. var2 user-supplied second data vector. user-supplied stratification variable. par vector information type test (null hypothesis, alternative hypothesis, etc.) geo formatted table descriptive inferential statistics geometric mean. call call made ttest function.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/ttest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"T-test with Improved Layout — ttest","text":"Missing values must given NA recognized missing values.","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/reference/ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"T-test with Improved Layout — ttest","text":"","code":"# Read in data set data(psa) attach(psa) #> The following objects are masked from psa (pos = 3): #>  #>     age, bss, grade, inrem, nadirpsa, obstime, pretxpsa, ps, ptid  # Perform t-test ttest(pretxpsa, null.hypoth = 100, alternative = \"greater\", more.digits = 1) #>  #> Call: #> ttest(var1 = pretxpsa, null.hypoth = 100, alternative = \"greater\",  #>     more.digits = 1) #>  #> One-sample t-test : #>   #> Summary: #>  Variable Obs Missing  Mean Std. Err. Std. Dev.        95% CI #>  pretxpsa  50       7 670.8     196.4      1288 [274.5, 1067] #>  #>  Ho:  mean <= 100 ;  #>  Ha:  mean > 100  #>  t = 2.9066 , df = 42  #>  Pr(T > t) =  0.002905293   # Define new binary variable as indicator # of whether or not bss was worst possible bssworst <- bss bssworst[bss == 1] <- 0 bssworst[bss == 2] <- 0 bssworst[bss == 3] <- 1  # Perform t-test allowing for unequal # variances between strata -# ttest(pretxpsa, by = bssworst) #>  #> Call: #> ttest(var1 = pretxpsa, by = bssworst) #>  #> Two-sample t-test allowing for unequal variances : #>   #> Summary: #>           Group Obs Missing Mean Std. Err. Std. Dev.          95% CI #>    bssworst = 0  18       2  119      36.2       145     [41.5, 196] #>    bssworst = 1  30       4 1016     307.2      1566   [383.5, 1649] #>      Difference  48       6 -897     309.3      <NA> [-1533.4, -261] #>  #>  Ho: difference in  means = 0 ;  #>  Ha: difference in  means != 0  #>  t = -2.901 , df = 25.7  #>  Pr(|T| > t) =  0.00752391   # Perform matched t-test ttest(pretxpsa, nadirpsa, matched = TRUE, conf.level = 99/100, more.digits = 1) #>  #> Call: #> ttest(var1 = pretxpsa, var2 = nadirpsa, conf.level = 99/100,  #>     matched = TRUE, more.digits = 1) #>  #> Two-sample (matched) t-test  : #>   #> Summary: #>         Group Obs Missing   Mean Std. Err. Std. Dev.             99% CI #>      pretxpsa  50       7 670.75    196.36   1287.64 [140.951, 1200.55] #>      nadirpsa  50       0  16.36      5.55     39.25     [1.486, 31.23] #>    Difference  50       7 655.88    193.57      1254 [133.622, 1178.14] #>  #>  Ho: difference in  means = 0 ;  #>  Ha: difference in  means != 0  #>  t = 3.3884 , df = 42  #>  Pr(|T| > t) =  0.00153846"},{"path":"https://statdivlab.github.io/rigr/reference/ttesti.html","id":null,"dir":"Reference","previous_headings":"","what":"T-test Given Summary Statistics with Improved Layout — ttesti","title":"T-test Given Summary Statistics with Improved Layout — ttesti","text":"Performs one- two-sample t-test given summary statistics. two-sample case, user can specify whether equal variances presumed.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/ttesti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T-test Given Summary Statistics with Improved Layout — ttesti","text":"","code":"ttesti(   obs,   mean,   sd,   obs2 = NA,   mean2 = NA,   sd2 = NA,   null.hypoth = 0,   conf.level = 0.95,   alternative = \"two.sided\",   var.eq = FALSE,   more.digits = 0 )"},{"path":"https://statdivlab.github.io/rigr/reference/ttesti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"T-test Given Summary Statistics with Improved Layout — ttesti","text":"obs number observations first sample. mean sample mean first sample. sd sample standard deviation first sample. obs2 number observations second sample (optional). mean2 obs2 supplied, sample mean second sample must supplied. sd2 obs2 supplied, sample standard deviation second sample must supplied. null.hypoth number specifying null hypothesis mean (difference means performing two-sample test). Defaults zero. conf.level confidence level test. Defaults 0.95. alternative string: one \"less\", \"two.sided\", \"greater\" specifying form test. Defaults two-sided test. var.eq logical value, either TRUE FALSE (default), specifying whether equal variances presumed two-sample t-test. .digits numeric value specifying whether display fewer digits output. Non-integers automatically rounded .","code":""},{"path":"https://statdivlab.github.io/rigr/reference/ttesti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"T-test Given Summary Statistics with Improved Layout — ttesti","text":"list class ttesti. print method lays information easy--read format. tab formatted table descriptive inferential statistics (number observations, mean, standard error mean estimate, standard deviation), along confidence interval mean. df Degrees freedom t-test. p P-value t-test. tstat Test statistic t-test. par vector information type test (null hypothesis, alternative hypothesis, etc.) twosamp logical value indicating whether two-sample test performed. call call made ttesti function.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/ttesti.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"T-test Given Summary Statistics with Improved Layout — ttesti","text":"obs2, mean2, sd2 specified, three must specified two-sample t-test run.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/ttesti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"T-test Given Summary Statistics with Improved Layout — ttesti","text":"","code":"# t-test given sample descriptives ttesti(24, 175, 35, null.hypoth=230) #>  #> Call: #> ttesti(obs = 24, mean = 175, sd = 35, null.hypoth = 230) #>  #> One-sample t-test : #>   #> Summary: #>      Obs Mean Std. Error Std. Dev. 95% CI     #> var1 24  175  7.14       35        [160, 190] #>  #>  Ho:  mean = 230 ;  #>  Ha:  mean != 230  #>  t = -7.698 , df = 23  #>  Pr(|T| > t) =  8.23997e-08   # two-sample test ttesti(10, -1.6, 1.5, 30, -.7, 2.1) #>  #> Call: #> ttesti(obs = 10, mean = -1.6, sd = 1.5, obs2 = 30, mean2 = -0.7,  #>     sd2 = 2.1) #>  #> Two-sample t-test allowing for unequal variances : #>   #> Summary: #>      Obs Mean Std. Error Std. Dev. 95% CI          #> var1 10  -1.6 0.474      1.5       [-2.67, -0.527] #> var2 30  -0.7 0.383      2.1       [-1.48, 0.0842] #> diff 40  -0.9 0.61       <NA>      [-2.13, 0.335]  #>  #>  Ho: difference in  means = 0 ;  #>  Ha: difference in  means != 0  #>  t = -1.476 , df = 21.7239  #>  Pr(|T| > t) =  0.154397"},{"path":"https://statdivlab.github.io/rigr/reference/wilcoxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilcoxon Signed Rank and Mann-Whitney-Wilcoxon Rank Sum Test — wilcoxon","title":"Wilcoxon Signed Rank and Mann-Whitney-Wilcoxon Rank Sum Test — wilcoxon","text":"Performs Wilcoxon signed rank test Mann-Whitney-Wilcoxon rank sum test depending data logicals entered. Relies heavily function wilcox.test. Adds formatting variances.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/wilcoxon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilcoxon Signed Rank and Mann-Whitney-Wilcoxon Rank Sum Test — wilcoxon","text":"","code":"wilcoxon(   var1,   var2 = NULL,   alternative = \"two.sided\",   null.hypoth = 0,   paired = FALSE,   exact = FALSE,   correct = FALSE,   conf.int = FALSE,   conf.level = 0.95 )"},{"path":"https://statdivlab.github.io/rigr/reference/wilcoxon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilcoxon Signed Rank and Mann-Whitney-Wilcoxon Rank Sum Test — wilcoxon","text":"var1 numeric vector data values. Non-finite (missing infinite) values omitted. var2 optional numeric vector data values. Non-finite (missing infinite) values omitted. alternative specifies alternative hypothesis test; acceptable values \"two.sided\", \"greater\", \"less\". null.hypoth value null hypothesis. paired logical indicating whether data paired . Default FALSE. TRUE, data must length. exact logical value indicating whether exact test computed. correct logical indicating whether continuity correction used displayed. conf.int logical indicating whether calculate display confidence interval conf.level confidence level interval. Defaults 0.95.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/wilcoxon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilcoxon Signed Rank and Mann-Whitney-Wilcoxon Rank Sum Test — wilcoxon","text":"list class wilcoxon returned. print method lays information easy--read format. statistic value test statistic name describing . parameter parameter(s) exact distribution test statistic. p.value p-value test (calculated test statistic). null.value parameter null.hypoth. alternative character string describing alternative hypothesis. method type test applied. data.name character string giving names data. conf.int confidence interval location parameter (present argument conf.int=TRUE). estimate estimate location parameter (present argument conf.int=TRUE). table formatted table rank sum number observation values, printing. vars formatted table variances, printing. hyps formatted table hypotheses, printing. inf formatted table inference values, printing.","code":""},{"path":"https://statdivlab.github.io/rigr/reference/wilcoxon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wilcoxon Signed Rank and Mann-Whitney-Wilcoxon Rank Sum Test — wilcoxon","text":"one-sample case, returned confidence interval (conf.int = TRUE) confidence interval pseudo-median underlying distribution. two-sample case, function returns confidence interval median difference samples two distributions. See wilcox.test information.","code":""},{"path":[]},{"path":"https://statdivlab.github.io/rigr/reference/wilcoxon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wilcoxon Signed Rank and Mann-Whitney-Wilcoxon Rank Sum Test — wilcoxon","text":"","code":"#- Create the data -# cf <- c(1153, 1132, 1165, 1460, 1162, 1493, 1358, 1453, 1185, 1824, 1793, 1930, 2075) healthy <- c(996, 1080, 1182, 1452, 1634, 1619, 1140, 1123, 1113, 1463, 1632, 1614, 1836)  #- Perform the test -# wilcoxon(cf, healthy, paired=TRUE) #>  #>  Wilcoxon signed rank test  #>          obs sum ranks expected #> positive  10        71     45.5 #> negative   3        20     45.5 #> zero       0         0      0.0 #> all       13        91     91.0 #>                              #> unadjusted variance   204.75 #> adjustment for ties     0.00 #> adjustment for zeroes   0.00 #> adjusted variance     204.75 #>                     H0 Ha        #> Hypothesized Median 0  two.sided #>   Test Statistic p-value  #> Z 1.7821         0.074735  #- Perform the test -# wilcoxon(cf, healthy, conf.int=TRUE) #>  #>  Wilcoxon rank sum test  #>          obs rank sum expected #> cf        13      194    175.5 #> healthy   13      157    175.5 #> combined  26      351    351.0 #>                            #> unadjusted variance 380.25 #> adjustment for ties   0.00 #> adjusted variance   380.25 #>                     H0 Ha        #> Hypothesized Median 0  two.sided #>   Test Statistic p-value CI          Point Estimate #> Z 0.94872        0.34276 [-172, 340] 62"}]
